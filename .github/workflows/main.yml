name: Docker Compose CI

# Запускать на пуш и PR в ветку main, а также вручную
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build & Test via Docker Compose
    runs-on: ubuntu-latest

    # Определяем сервис Postgres для тестов
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        options: >-
          --health-cmd="pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Собираем и поднимаем контейнеры из docker-compose.yml
      - name: Launch services
        run: docker-compose up -d --build

      # Ждём, пока Postgres станет доступен (опционально)
      - name: Wait for Postgres
        run: |
          until docker exec $(docker ps -q -f ancestor=postgres:15) \
            pg_isready -U $POSTGRES_USER -d $POSTGRES_DB; do
            echo "Waiting for PostgreSQL…"
            sleep 2
          done

      # Пример: запуск миграций (если используешь Prisma)
      - name: Run database migrations
        run: docker-compose exec backend npx prisma migrate deploy

      # Пример: запуск тестов
      - name: Run backend tests
        run: docker-compose exec backend npm test

      # Останавливаем и удаляем контейнеры
      - name: Tear down
        if: always()
        run: docker-compose down -v
