name: Docker Compose CI

# Запускать на пуш/PR в ветку master и вручную
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build & Test via Docker Compose
    runs-on: ubuntu-latest

    steps:
      # 1) Получаем код
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2) Генерируем .env рядом с docker-compose.yml
      - name: Create .env for Compose
        run: |
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" > .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          # Если нужны ещё переменные (Keycloak, Kong и т.п.), допиши их сюда:
          # echo "KEYCLOAK_ADMIN=${{ secrets.KEYCLOAK_ADMIN }}" >> .env
          # echo "KEYCLOAK_ADMIN_PASSWORD=${{ secrets.KEYCLOAK_ADMIN_PASSWORD }}" >> .env

      # 3) Устанавливаем Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # 4) Собираем и поднимаем все контейнеры
      - name: Launch services
        run: docker-compose up -d --build

      # 5) Ждём, пока Postgres будет готов (опционально, если в Compose прописан healthcheck, можно убрать)
      - name: Wait for Postgres
        run: |
          until docker exec $(docker ps -q -f ancestor=postgres:15) \
            pg_isready -U $POSTGRES_USER -d $POSTGRES_DB; do
            echo "Waiting for PostgreSQL…"
            sleep 2
          done

      # 6) Пример миграций (если есть)
      #- name: Run database migrations
      #  run: docker-compose exec backend npx prisma migrate deploy

      # 7) Пример тестов
      #- name: Run backend tests
      #  run: docker-compose exec backend npm test

      # 8) Очищаем всё в конце
      - name: Tear down
        if: always()
        run: docker-compose down -v
