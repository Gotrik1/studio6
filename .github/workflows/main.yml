name: Docker Compose CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js and Corepack
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Enable Corepack (for pnpm)
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - name: Create .env file
        run: |
          cat > .env <<EOF
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          KONG_PG_USER=${{ secrets.KONG_PG_USER }}
          KONG_PG_PASSWORD=${{ secrets.KONG_PG_PASSWORD }}
          KONG_PG_DATABASE=${{ secrets.KONG_PG_DATABASE }}
          PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }}
          PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }}
          RABBITMQ_DEFAULT_USER=${{ secrets.RABBITMQ_DEFAULT_USER }}
          RABBITMQ_DEFAULT_PASSWORD=${{ secrets.RABBITMQ_DEFAULT_PASSWORD }}
          MINIO_ROOT_USER=${{ secrets.MINIO_ROOT_USER }}
          MINIO_ROOT_PASSWORD=${{ secrets.MINIO_ROOT_PASSWORD }}
          DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@db:5432/${{ secrets.POSTGRES_DB }}?schema=public
          REDIS_URL=redis://redis:6379
          KAFKA_BROKERS=kafka:9092
          RABBITMQ_URL=amqp://${{ secrets.RABBITMQ_DEFAULT_USER }}:${{ secrets.RABBITMQ_DEFAULT_PASSWORD }}@rabbitmq:5672
          S3_ENDPOINT_URL=http://minio:9005
          S3_BUCKET_NAME=prodvor
          AWS_REGION=us-east-1
          AWS_ACCESS_KEY_ID=${{ secrets.MINIO_ROOT_USER }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.MINIO_ROOT_PASSWORD }}
          NEXT_PUBLIC_BACKEND_URL=http://kong:8000
          PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          EOF

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm --filter prodvor-backend prisma:generate

      # ⚙️ Устанавливаем Docker CLI и Buildx перед сборкой образов
      - name: Set up QEMU (for Buildx)
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up Docker CLI
        uses: docker/setup-docker-action@v4  # устанавливает Docker CE в runner :contentReference[oaicite:1]{index=1}

      - name: Build all images
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml build

      - name: Launch all services
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml up -d

      - name: Wait for App DB
        run: |
          i=0
          until docker compose exec -T db pg_isready -U "${POSTGRES_USER:-postgres}"; do
            ((i++)) && ((i==30)) && { docker compose logs db; exit 1; }
            sleep 2
          done

      - name: Wait for Kong DB
        run: |
          i=0
          until docker compose exec -T kong-db pg_isready -U "${KONG_PG_USER:-kong}"; do
            ((i++)) && ((i==30)) && { docker compose logs kong-db; exit 1; }
            sleep 2
          done

      - name: Run Kong migrations
        run: docker compose run --rm kong-migrations-ci

      - name: Run Prisma migrations
        run: |
          unset PNPM_HOME PATH
          docker compose run --rm migrations

      - name: Wait for Kong to start
        run: |
          i=0
          until curl -s -o /dev/null -w "%{http_code}" http://localhost:8001 | grep -E "200|401"; do
            ((i++)) && ((i==30)) && { docker compose logs kong; exit 1; }
            sleep 2
          done

      - name: Show logs on failure
        if: failure()
        run: |
          for svc in db kong-db kong-migrations-ci migrations kong backend; do
            echo "::group::$svc logs"
            docker compose logs $svc || true
            echo "::endgroup::"
          done

      - name: Tear down
        if: always()
        run: docker compose down -v
