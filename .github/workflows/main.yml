name: Docker Compose CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Validate secrets and create .env file
        env:
          POSTGRES_USER_SECRET: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD_SECRET: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB_SECRET: ${{ secrets.POSTGRES_DB }}
          PGADMIN_DEFAULT_EMAIL_SECRET: ${{ secrets.PGADMIN_DEFAULT_EMAIL }}
          PGADMIN_DEFAULT_PASSWORD_SECRET: ${{ secrets.PGADMIN_DEFAULT_PASSWORD }}
          KEYCLOAK_ADMIN_SECRET: ${{ secrets.KEYCLOAK_ADMIN }}
          KEYCLOAK_ADMIN_PASSWORD_SECRET: ${{ secrets.KEYCLOAK_ADMIN_PASSWORD }}
          KONG_ADMIN_LISTEN_SECRET: ${{ secrets.KONG_ADMIN_LISTEN }}
          KONG_PROXY_LISTEN_SECRET: ${{ secrets.KONG_PROXY_LISTEN }}
          RABBITMQ_DEFAULT_USER_SECRET: ${{ secrets.RABBITMQ_DEFAULT_USER }}
          RABBITMQ_DEFAULT_PASSWORD_SECRET: ${{ secrets.RABBITMQ_DEFAULT_PASSWORD }}
        run: |
          # Temporarily echo secrets for debugging
          echo "POSTGRES_PASSWORD_SECRET=$POSTGRES_PASSWORD_SECRET"
          echo "RABBITMQ_DEFAULT_USER_SECRET=$RABBITMQ_DEFAULT_USER_SECRET"
          echo "RABBITMQ_DEFAULT_PASSWORD_SECRET=$RABBITMQ_DEFAULT_PASSWORD_SECRET"
          
          # Fail fast if critical secrets are missing
          if [ -z "$POSTGRES_PASSWORD_SECRET" ]; then echo "::error::Required secret POSTGRES_PASSWORD is not set." >&2; exit 1; fi
          if [ -z "$RABBITMQ_DEFAULT_USER_SECRET" ]; then echo "::error::Required secret RABBITMQ_DEFAULT_USER is not set." >&2; exit 1; fi
          if [ -z "$RABBITMQ_DEFAULT_PASSWORD_SECRET" ]; then echo "::error::Required secret RABBITMQ_DEFAULT_PASSWORD is not set." >&2; exit 1; fi
          
          # Create .env file
          cat > .env <<EOF
          POSTGRES_USER=${POSTGRES_USER_SECRET:-postgres}
          POSTGRES_PASSWORD=${POSTGRES_PASSWORD_SECRET:-postgres}
          POSTGRES_DB=${POSTGRES_DB_SECRET:-prodvor}
          PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL_SECRET:-admin@example.com}
          PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD_SECRET:-admin}
          KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN_SECRET:-admin}
          KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD_SECRET:-admin}
          KONG_ADMIN_LISTEN=${KONG_ADMIN_LISTEN_SECRET:-0.0.0.0:8001}
          KONG_PROXY_LISTEN=${KONG_PROXY_LISTEN_SECRET:-0.0.0.0:8000}
          DATABASE_URL=postgresql://${POSTGRES_USER_SECRET:-postgres}:${POSTGRES_PASSWORD_SECRET:-postgres}@db:5432/${POSTGRES_DB_SECRET:-prodvor}?schema=public
          REDIS_URL=redis://redis:6379
          KAFKA_BROKERS=kafka:9092
          KEYCLOAK_URL=http://keycloak:8080
          KEYCLOAK_REALM=prodvor
          KEYCLOAK_CLIENT_ID=prodvor-frontend
          RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER_SECRET:-user}
          RABBITMQ_DEFAULT_PASSWORD=${RABBITMQ_DEFAULT_PASSWORD_SECRET:-password}
          RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER_SECRET:-user}:${RABBITMQ_DEFAULT_PASSWORD_SECRET:-password}@rabbitmq:5672
          NEXT_PUBLIC_BACKEND_URL=http://kong:8000
          PGPASSWORD=${POSTGRES_PASSWORD_SECRET:-postgres}
          EOF

      - name: Launch all services
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml up -d --wait

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for all services to become healthy..."
          sleep 30

      - name: Run Prisma migrations
        run: docker compose exec backend npm run prisma:migrate:deploy
        
      - name: Check container statuses
        run: docker compose ps

      - name: Show Main DB logs on failure
        if: failure()
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml logs db

      - name: Show Keycloak DB logs on failure
        if: failure()
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml logs keycloak-db

      - name: Show Kong DB logs on failure
        if: failure()
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml logs kong-db
        
      - name: Show backend logs on failure
        if: failure()
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml logs backend

      - name: Show frontend logs on failure
        if: failure()
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml logs frontend

      - name: Show Keycloak logs on failure
        if: failure()
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml logs keycloak

      - name: Show Kafka logs on failure
        if: failure()
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml logs kafka

      - name: Show Zookeeper logs on failure
        if: failure()
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml logs zookeeper
        
      - name: Install dependencies
        run: npm install

      - name: Lint code
        run: |
          npm run lint --workspace=frontend
          npm run lint --workspace=backend
      
      - name: Typecheck code
        run: |
          npm run typecheck --workspace=frontend
          npm run typecheck --workspace=backend

      - name: Build frontend
        run: npm run build --workspace=frontend

      - name: Tear down
        if: always()
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml down -v
