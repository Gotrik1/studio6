name: Docker Compose CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js and Corepack
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Enable Corepack (for pnpm)
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.13.1
      
      # Установка OpenSSL для Prisma
      - name: Install OpenSSL
        run: sudo apt-get update && sudo apt-get install -y openssl

      - name: Create .env file
        run: |
          cat > .env <<EOF
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          KONG_PG_USER=${{ secrets.KONG_PG_USER }}
          KONG_PG_PASSWORD=${{ secrets.KONG_PG_PASSWORD }}
          KONG_PG_DATABASE=${{ secrets.KONG_PG_DATABASE }}
          PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }}
          PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }}
          RABBITMQ_DEFAULT_USER=${{ secrets.RABBITMQ_DEFAULT_USER }}
          RABBITMQ_DEFAULT_PASSWORD=${{ secrets.RABBITMQ_DEFAULT_PASSWORD }}
          MINIO_ROOT_USER=${{ secrets.MINIO_ROOT_USER }}
          MINIO_ROOT_PASSWORD=${{ secrets.MINIO_ROOT_PASSWORD }}
          DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@db:5432/${{ secrets.POSTGRES_DB }}?schema=public
          REDIS_URL=redis://redis:6379
          KAFKA_BROKERS=kafka:9092
          RABBITMQ_URL=amqp://${{ secrets.RABBITMQ_DEFAULT_USER }}:${{ secrets.RABBITMQ_DEFAULT_PASSWORD }}@rabbitmq:5672
          S3_ENDPOINT_URL=http://minio:9005
          S3_BUCKET_NAME=prodvor
          AWS_REGION=us-east-1
          AWS_ACCESS_KEY_ID=${{ secrets.MINIO_ROOT_USER }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.MINIO_ROOT_PASSWORD }}
          NEXT_PUBLIC_BACKEND_URL=http://kong:8000
          PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          EOF

      - name: Create logs directory
        run: mkdir -p logs

      - name: Install dependencies for linting and typechecking
        # Запускаем prisma generate здесь, чтобы убедиться, что клиент доступен для typecheck
        run: |
          pnpm install --no-frozen-lockfile
          pnpm --filter prodvor-backend prisma:generate

      - name: Lint code
        run: pnpm run lint 2>&1 | tee logs/lint-errors.log

      - name: Typecheck code
        run: pnpm run typecheck 2>&1 | tee logs/typecheck-errors.log

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build all images
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml build

      - name: Wait for Kong DB to be ready
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml up -d kong-db
          echo "Waiting for Kong PostgreSQL to be ready..."
          for i in `seq 1 30`; do
            docker compose -f docker-compose.yml -f docker-compose.ci.yml exec -T kong-db pg_isready -U "${KONG_PG_USER:-kong}" -d "${KONG_PG_DATABASE:-kong_db}" && echo "Kong DB is up!" && break
            echo "Waiting for Kong DB..."
            sleep 2
          done

      - name: Run Kong migrations (inside container)
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml run --rm kong-migrations-ci

      - name: Launch all services in background
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml up -d

      - name: Wait for App DB to be ready
        run: |
          echo "Waiting for App PostgreSQL to be ready..."
          for i in `seq 1 30`; do
            docker compose -f docker-compose.yml -f docker-compose.ci.yml exec -T db pg_isready -U "${POSTGRES_USER:-postgres}" && echo "App DB is up!" && break
            echo "Waiting for App DB..."
            sleep 2
          done
          sleep 5

      - name: Check container status before migrations
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml ps

      - name: Run Prisma migrations (inside container)
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml run --rm migrations

      - name: Re-check container statuses after migration
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml ps

      - name: Verify Kong is running
        run: |
          echo "Waiting for Kong to be available..."
          for i in `seq 1 30`; do
            curl -s -o /dev/null -w "%{http_code}" http://localhost:8000 && echo " Kong is up!" && break
            echo "Waiting for Kong..."
            sleep 2
          done
          curl -s http://localhost:8000 | grep "Kong" || (echo "Kong check failed" && exit 1)

      - name: Show logs on failure
        if: failure()
        run: |
          echo "::group::DB Logs"
          docker compose -f docker-compose.yml -f docker-compose.ci.yml logs db
          echo "::endgroup::"
          echo "::group::Kong DB Logs"
          docker compose -f docker-compose.yml -f docker-compose.ci.yml logs kong-db
          echo "::endgroup::"
          echo "::group::Kong Migrations Logs"
          docker compose -f docker-compose.yml -f docker-compose.ci.yml logs kong-migrations-ci
          echo "::endgroup::"
          echo "::group::Prisma Migrations Logs"
          docker compose -f docker-compose.yml -f docker-compose.ci.yml logs migrations
          echo "::endgroup::"
          echo "::group::Kong Logs"
          docker compose -f docker-compose.yml -f docker-compose.ci.yml logs kong
          echo "::endgroup::"
          echo "::group::Backend Logs"
          docker compose -f docker-compose.yml -f docker-compose.ci.yml logs backend
          echo "::endgroup::"

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-logs
          path: logs/

      - name: Tear down
        if: always()
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml down -v
