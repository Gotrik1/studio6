// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================
// ENUMS
// =====================================

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
}

// =====================================
// CORE MODELS
// =====================================

model User {
  id                      String            @id @default(uuid())
  email                   String            @unique
  name                    String
  passwordHash            String
  role                    String
  avatar                  String?
  status                  String?           @default("Активен")
  xp                      Int?              @default(0)
  location                String?
  mainSport               String?
  isVerified              Boolean?          @default(false)
  dateOfBirth             DateTime?
  preferredSports         Json? // array of strings
  contacts                Json? // object like { telegram, discord }

  captainOf               Team[]            @relation("CaptainTeams")
  teams                   Team[]            @relation("TeamMembers")
  createdTrainingPrograms TrainingProgram[] @relation("ProgramCreator")

  @@index([email])
}

model Team {
  id             String       @id @default(uuid())
  name           String       @unique
  slug           String       @unique
  logo           String?
  motto          String?
  description    String?
  dataAiHint     String?      @map("data_ai_hint")
  game           String
  wins           Int          @default(0)
  losses         Int          @default(0)
  draws          Int          @default(0)
  rank           Int          @default(0)
  captainId      String
  captain        User         @relation("CaptainTeams", fields: [captainId], references: [id])
  members        User[]       @relation("TeamMembers")
  tournaments    Tournament[] @relation("TournamentTeams")
  matchesAsTeam1 Match[]      @relation("Team1Matches")
  matchesAsTeam2 Match[]      @relation("Team2Matches")
  
  homePlaygroundId String?
  homePlayground   Playground? @relation("HomeTeams", fields: [homePlaygroundId], references: [id])

  @@index([slug])
  @@index([game])
}

model Tournament {
  id              String   @id @default(uuid())
  name            String
  slug            String   @unique
  game            String
  format          String // e.g., 'single_elimination', 'round_robin'
  prizePool       Float
  startDate       DateTime
  status          TournamentStatus
  bannerImage     String?
  bannerImageHint String?

  teams           Team[]   @relation("TournamentTeams")
  matches         Match[]

  @@index([slug])
}

model Match {
  id           String      @id @default(uuid())
  status       MatchStatus
  scheduledAt  DateTime
  finishedAt   DateTime?
  team1Score   Int?
  team2Score   Int?
  location     String?
  refereeName  String?

  team1Id      String
  team2Id      String
  tournamentId String?

  team1        Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team2        Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  
  @@index([status])
}

// =====================================
// NEW MODELS
// =====================================

model Playground {
  id             String    @id @default(uuid())
  name           String
  address        String    @unique
  type           String
  coverImage     String?
  coverImageHint String?
  surface        String
  features       Json?     // Array of strings
  rating         Float
  checkIns       Int       @default(0)
  status         String    @default("pending_moderation") // approved, pending_moderation
  creatorId      String
  
  homeTeams      Team[]    @relation("HomeTeams")

  @@index([type])
  @@index([address])
}

model Exercise {
  id              String             @id @default(uuid())
  name            String             @unique
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  techniqueTips   Json?
  commonMistakes  Json?
  alternatives    Json?
  
  workouts        ExerciseInWorkout[]
}

model TrainingProgram {
  id              String    @id @default(uuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  authorId        String
  coverImage      String?
  coverImageHint  String?
  isAiGenerated   Boolean   @default(false)
  
  weeklySplit     Json? // Detailed plan for each day

  creator         User      @relation("ProgramCreator", fields: [authorId], references: [id])
}

model ExerciseInWorkout {
  id            String      @id @default(uuid())
  workoutDayId  String
  exerciseId    String
  sets          String
  reps          String
  plannedWeight String?
  
  workoutDay    WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
}

model WorkoutDay {
  id                String              @id @default(uuid())
  trainingProgramId String
  dayNumber         Int
  title             String
  
  exercises         ExerciseInWorkout[]
}
