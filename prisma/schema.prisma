// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    String
  status                  String                 @default("Активен")
  xp                      Int                    @default(0)
  location                String?
  mainSport               String?
  dateOfBirth             DateTime?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  isVerified              Boolean                @default(false)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  teamsAsCaptain          Team[]                 @relation("Captain")
  teamsAsMember           Team[]                 @relation("TeamMembers")
  organizedTournaments    Tournament[]
  friends                 User[]                 @relation("Friendship")
  friendOf                User[]                 @relation("Friendship")
  sentFriendRequests      FriendRequest[]        @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]        @relation("ReceivedFriendRequests")
  trainingLogs            TrainingLog[]
  measurements            Measurement[]
  inventory               InventoryItem[]
  trainingProposalsFrom   TrainingProposal[]     @relation("ProposalsFrom")
  trainingProposalsTo     TrainingProposal[]     @relation("ProposalsTo")
  pollVotes               PollVote[]
  authoredReviews         PlaygroundReview[]
  authoredAnnouncements   TournamentAnnouncement[]
  judgedMatches           Tournament[]           @relation("TournamentJudges")
  medicalSupportFor       Tournament[]           @relation("TournamentMedicalStaff")
  organizedPromotions     Promotion[]
  reportedBy              Report[]               @relation("ReportedBy")
  reportedUser            Report[]               @relation("ReportedUser")
  resolvedReports         Report[]               @relation("ResolvedBy")
  createdPlaygrounds      Playground[]
  playgroundReports       PlaygroundReport[]
  messages                Message[]
  chats                   Chat[]
  activities              Activity[]
  coachProfile            CoachProfile?
  coaching                User[]                 @relation("CoachStudents")
  coach                   User?                  @relation("CoachStudents", fields: [coachId], references: [id])
  coachId                 String?
  TournamentSponsor       TournamentSponsor[]
}

model Team {
  id                 String              @id @default(cuid())
  name               String              @unique
  slug               String              @unique
  logo               String?
  dataAiHint         String?
  motto              String?
  game               String
  rank               Int                 @default(0)
  wins               Int                 @default(0)
  losses             Int                 @default(0)
  draws              Int                 @default(0)
  creatorId          String
  captainId          String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  homePlaygroundId   String?
  seekingSponsorship Boolean             @default(false)
  captain            User                @relation("Captain", fields: [captainId], references: [id])
  creator            User                @relation(fields: [creatorId], references: [id])
  members            User[]              @relation("TeamMembers")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]             @relation("Team1Matches")
  matchesAsTeam2     Match[]             @relation("Team2Matches")
  sponsors           Sponsor[]
  applications       TeamApplication[]
  practices          TeamPractice[]
  homePlayground     Playground?         @relation(fields: [homePlaygroundId], references: [id])
  leagues            LeagueTeam[]
}

model Match {
  id             String      @id @default(cuid())
  team1Id        String
  team2Id        String
  team1Score     Int?
  team2Score     Int?
  status         MatchStatus
  scheduledAt    DateTime
  finishedAt     DateTime?
  tournamentId   String?
  playgroundId   String?
  location       String?
  refereeName    String?
  disputeReason  String?
  disputeOpenedAt DateTime?
  resolution     String?
  team1          Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team2          Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  tournament     Tournament? @relation(fields: [tournamentId], references: [id])
  leagueId       String?
  league         League?     @relation(fields: [leagueId], references: [id])
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  game                  String
  description           String?
  status                String
  type                  String
  format                String
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  organizerId           String
  organizer             User                     @relation(fields: [organizerId], references: [id])
  teams                 Team[]
  matches               Match[]
  announcements         TournamentAnnouncement[]
  judges                User[]                   @relation("TournamentJudges")
  medicalPartners       MedicalPartner[]         @relation("TournamentMedicalStaff")
  sponsors              Sponsor[]
  applications          TeamApplication[]
}

model FriendRequest {
  id        String   @id @default(cuid())
  fromId    String
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])

  @@unique([fromId, toId])
}

model Playground {
  id             String             @id @default(cuid())
  name           String
  address        String
  type           String
  surface        String
  features       String[]
  coverImage     String?
  coverImageHint String?
  rating         Float
  checkIns       Int
  status         PlaygroundStatus   @default(PENDING_MODERATION)
  creatorId      String
  creator        User               @relation(fields: [creatorId], references: [id])
  teams          Team[]
  reviews        PlaygroundReview[]
  reports        PlaygroundReport[]
  activities     Activity[]
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playgroundId String
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
  playground   Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  author       User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model CoachProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id])
  specialization String
  description    String
  tags           String[]
  rating         Float
  price          Decimal
}

model Sponsor {
  id            String       @id @default(cuid())
  name          String
  logo          String?
  logoHint      String?
  description   String
  profileUrl    String
  interests     String[]
  teams         Team[]
  tournaments   Tournament[]
  promotions    Promotion[]
}

model Promotion {
  id            String   @id @default(cuid())
  name          String
  description   String
  prize         String
  imageDataUri  String
  imageHint     String
  endDate       DateTime
  cost          String
  organizerId   String
  organizer     User     @relation(fields: [organizerId], references: [id])
  sponsorId     String?
  sponsor       Sponsor? @relation(fields: [sponsorId], references: [id])
}

model Sport {
  id       String @id @unique
  name     String @unique
  icon     String
  category String
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  leagueId String
  teamId   String
  played   Int
  wins     Int
  draws    Int
  losses   Int
  points   Int
  league   League @relation(fields: [leagueId], references: [id])
  team     Team   @relation(fields: [teamId], references: [id])
}

model TeamApplication {
  id           String      @id @default(cuid())
  teamId       String
  userId       String
  tournamentId String?
  message      String?
  status       String      @default("PENDING")
  createdAt    DateTime    @default(now())
  team         Team        @relation(fields: [teamId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
}

model LfgLobby {
  id            String       @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  playgroundId  String?
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  creatorId     String
  creator       User         @relation(fields: [creatorId], references: [id])
  players       User[]
}

model Measurement {
  id      String   @id @default(cuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id])
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

model TrainingProposal {
  id        String   @id @default(cuid())
  fromId    String
  toId      String
  sport     String
  date      DateTime
  comment   String?
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  from      User     @relation("ProposalsFrom", fields: [fromId], references: [id])
  to        User     @relation("ProposalsTo", fields: [toId], references: [id])
  programId String?
  program   TrainingProgram? @relation(fields: [programId], references: [id])
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  options   PollOption[]
  votes     PollVote[]
}

model PollOption {
  id        String     @id @default(cuid())
  pollId    String
  text      String
  poll      Poll       @relation(fields: [pollId], references: [id])
  votes     PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  pollId       String
  pollOptionId String
  userId       String
  createdAt    DateTime   @default(now())
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([userId, pollId])
}

model Quest {
  id          String    @id @default(cuid())
  title       String
  description String
  type        QuestType
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

model InventoryItem {
  id             String   @id @default(cuid())
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournamentId String
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  sender       User       @relation(fields: [authorId], references: [id])
}

model Report {
  id             String       @id @default(cuid())
  reporterId     String
  reportedUserId String
  reason         String
  context        String
  status         ReportStatus @default(PENDING)
  resolution     String?
  resolverId     String?
  createdAt      DateTime     @default(now())
  resolvedAt     DateTime?
  reporter       User         @relation("ReportedBy", fields: [reporterId], references: [id])
  reportedUser   User         @relation("ReportedUser", fields: [reportedUserId], references: [id])
  resolver       User?        @relation("ResolvedBy", fields: [resolverId], references: [id])
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[] @relation("TournamentMedicalStaff")
}

model TeamPractice {
  id           String     @id @default(cuid())
  teamId       String
  team         Team       @relation(fields: [teamId], references: [id])
  title        String
  description  String?
  date         DateTime
  playgroundId String
  playground   Playground @relation(fields: [playgroundId], references: [id])
  createdAt    DateTime   @default(now())
}

model Chat {
  id          String    @id @default(cuid())
  name        String?
  type        ChatType // 'PRIVATE' or 'GROUP'
  participants User[]
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  text      String
  authorId  String
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  chat      Chat     @relation(fields: [chatId], references: [id])
  createdAt DateTime @default(now())
}

model Activity {
  id           String       @id @default(cuid())
  type         ActivityType
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  metadata     Json
  timestamp    DateTime     @default(now())
  playgroundId String?
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)
}

model Exercise {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   String[]
  commonMistakes  String[]
  alternatives    String[]
  loggedExercises LoggedExercise[]
}

model TrainingProgram {
  id              String             @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean            @default(false)
  weeklySplit     WorkoutDay[]
  trainingProposals TrainingProposal[]
}

model WorkoutDay {
  id              String            @id @default(cuid())
  day             Int
  title           String
  programId       String
  program         TrainingProgram   @relation(fields: [programId], references: [id], onDelete: Cascade)
  exercises       ExerciseDetail[]
}

model ExerciseDetail {
  id                      String      @id @default(cuid())
  workoutDayId            String
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model TrainingLog {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  date            DateTime
  workoutName     String
  status          String           // planned, completed, skipped
  mood            String?          // great, good, ok, bad
  notes           String?
  coachNotes      String?
  exercises       LoggedExercise[]
}

model LoggedExercise {
  id            String      @id @default(cuid())
  trainingLogId String
  trainingLog   TrainingLog @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
  exerciseId    String
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  notes         String?
  sets          LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExerciseId String
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Int?
  isCompleted      Boolean        @default(false)
}

model TournamentSponsor {
  id           String     @id @default(cuid())
  tournamentId String
  sponsorId    String
  amount       Int
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  sponsor      User       @relation(fields: [sponsorId], references: [id])

  @@unique([tournamentId, sponsorId])
}

model PlaygroundReport {
  id           String       @id @default(cuid())
  playgroundId String
  reporterId   String
  category     String
  comment      String
  severity     String?
  summary      String?
  status       ReportStatus @default(PENDING)
  createdAt    DateTime     @default(now())

  playground Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  reporter   User       @relation(fields: [reporterId], references: [id], onDelete: Cascade)
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum PlaygroundStatus {
  PENDING_MODERATION
  APPROVED
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum ChatType {
  PRIVATE
  GROUP
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}
