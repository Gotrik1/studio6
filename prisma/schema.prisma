// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String
  passwordHash    String
  role            String    @default("Игрок")
  avatar          String?
  status          String    @default("Активен")
  xp              Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  teamsAsCaptain  Team[]    @relation("CaptainToTeams")
  teamsAsMember   Team[]    @relation("TeamMembers")
  
  // New fields for rich profile
  location        String?
  mainSport       String?
  dateOfBirth     String?
  preferredSports String[]  @default([])
  telegram        String?
  discord         String?
}

model Team {
  id              String    @id @default(cuid())
  slug            String    @unique
  name            String
  game            String
  motto           String?
  logo            String?
  dataAiHint      String?
  rank            Int?
  wins            Int       @default(0)
  losses          Int       @default(0)
  draws           Int       @default(0)
  
  captainId       String
  captain         User      @relation("CaptainToTeams", fields: [captainId], references: [id])
  members         User[]    @relation("TeamMembers")

  tournaments     Tournament[]

  // Matches where this team is team1
  matchesAsTeam1 Match[] @relation("Team1Matches")

  // Matches where this team is team2
  matchesAsTeam2 Match[] @relation("Team2Matches")
  
  homePlaygroundId  String?
}

model Tournament {
  id               String   @id @default(cuid())
  slug             String   @unique
  name             String
  game             String
  format           String
  prizePool        Float
  startDate        DateTime
  status           String
  bannerImage      String?
  bannerImageHint  String?
  teams            Team[]
  matches          Match[]
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Match {
  id           String      @id @default(cuid())
  team1Id      String
  team2Id      String
  team1        Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team2        Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team1Score   Int?
  team2Score   Int?
  status       MatchStatus @default(PLANNED)
  scheduledAt  DateTime
  finishedAt   DateTime?
  tournamentId String?
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  location     String?
  refereeName  String?
}
