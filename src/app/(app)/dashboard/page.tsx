
'use client';

import { useState, useMemo, useEffect } from "react";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  CardFooter,
} from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import {
  ThumbsUp,
  MessageCircle,
  Share2,
  Image as ImageIcon,
  MoreHorizontal,
  Users,
  Trophy,
  Newspaper,
  Star,
  Coins,
  BrainCircuit,
  Loader2,
  FileQuestion,
  Trash2,
  Volume2,
  AlertCircle,
  ClipboardList,
} from "lucide-react";
import Image from "next/image";
import { useToast } from "@/hooks/use-toast";
import { PD_RATES, PD_SOURCE_DETAILS } from "@/config/gamification";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { generateContent } from "@/ai/flows/generate-content-flow";
import { useSession } from "@/lib/session-client";
import { cn } from "@/lib/utils";
import { generatePostImage } from "@/ai/flows/generate-post-image-flow";
import { Skeleton } from "@/components/ui/skeleton";
import { textToSpeech } from "@/ai/flows/tts-flow";
import { aiTeamAssistant, type AiTeamAssistantOutput } from '@/ai/flows/ai-team-assistant';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import Link from "next/link";
import { Progress } from "@/components/ui/progress";
import { dailyQuests as initialDailyQuests, weeklyQuests as initialWeeklyQuests, type Quest } from "@/lib/mock-data/quests";
import { Badge } from "@/components/ui/badge";

const initialFeedItems = [
  {
    id: 1,
    author: {
      name: "–ö–æ–º–∞–Ω–¥–∞ '–ö–∏–±–µ—Ä –û—Ä–ª—ã'",
      avatar: "https://placehold.co/40x40.png",
      avatarHint: "eagle logo",
      href: "/teams/cyber-eagles",
    },
    timestamp: "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥",
    type: "team_news",
    content: {
      text: "–ú—ã —Ä–∞–¥—ã –æ–±—ä—è–≤–∏—Ç—å –æ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –î–º–∏—Ç—Ä–∏—è 'Gadget' –ö—É–∑–Ω–µ—Ü–æ–≤–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ–º—å—é, –î–∏–º–∞! üî•",
    },
    stats: {
      likes: 125,
      comments: 18,
    },
    likedByUser: false,
  },
  {
    id: 2,
    author: {
      name: "ProDvor Tournaments",
      avatar: "https://placehold.co/40x40.png",
      avatarHint: "trophy icon",
      href: "#",
    },
    timestamp: "8 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥",
    type: "tournament_announcement",
    content: {
      text: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ 'Autumn Cyber Clash 2024' –æ—Ç–∫—Ä—ã—Ç–∞! –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ - $15,000. –ù–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å —á–µ–º–ø–∏–æ–Ω–æ–º!",
      image: "https://placehold.co/600x400.png",
      imageHint: "esports tournament poster",
    },
    stats: {
      likes: 340,
      comments: 56,
    },
    likedByUser: false,
  },
  {
    id: 3,
    author: {
      name: "Alex 'CyberSlasher' Doe",
      avatar: "https://placehold.co/40x40.png",
      avatarHint: "esports player",
      href: "/profile",
    },
    timestamp: "1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥",
    type: "player_post",
    content: {
      text: "–¢—è–∂–µ–ª–∞—è –∏–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ '–í–∏—Ö—Ä–µ–≤—ã—Ö –ì–∞–¥—é–∫', –Ω–æ –º—ã –≤—ã—Ä–≤–∞–ª–∏ –ø–æ–±–µ–¥—É! –°–ø–∞—Å–∏–±–æ –≤—Å–µ–º –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ì–æ—Ç–æ–≤–∏–º—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–∞—Ç—á—É. #GoEagles",
      image: "https://placehold.co/600x400.png",
      imageHint: "intense gaming moment",
    },
    stats: {
      likes: 512,
      comments: 89,
    },
    likedByUser: true,
  },
  {
    id: 4,
    author: {
      name: "–°–∏—Å—Ç–µ–º–∞",
      avatar: "https://placehold.co/40x40.png",
      avatarHint: "system logo",
      href: "#",
    },
    timestamp: "2 –¥–Ω—è –Ω–∞–∑–∞–¥",
    type: "system_update",
    content: {
      text: "–í—ã—à–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã! –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –º–∞—Ç—á–º–µ–π–∫–∏–Ω–≥–∞. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞–∑–¥–µ–ª–µ '–ù–æ–≤–æ—Å—Ç–∏'.",
    },
    stats: {
      likes: 78,
      comments: 4,
    },
    likedByUser: false,
  },
];

const getTypeIcon = (type: string) => {
  switch (type) {
    case 'team_news':
      return <Users className="h-4 w-4 text-primary" />;
    case 'tournament_announcement':
      return <Trophy className="h-4 w-4 text-amber-500" />;
    case 'player_post':
      return <Star className="h-4 w-4 text-accent" />;
    default:
      return <Newspaper className="h-4 w-4 text-muted-foreground" />;
  }
};

type FeedItem = (typeof initialFeedItems)[0];

export default function DashboardPage() {
  const { user } = useSession();
  const { toast } = useToast();
  const [postCount, setPostCount] = useState(0);
  const [postContent, setPostContent] = useState("");
  const [feedItems, setFeedItems] = useState<FeedItem[]>(initialFeedItems);
  const [isGenerating, setIsGenerating] = useState(false);
  const [aiTopic, setAiTopic] = useState("");
  const [isAiDialogOpen, setIsAiDialogOpen] = useState(false);

  const [postImage, setPostImage] = useState<string | null>(null);
  const [isGeneratingImage, setIsGeneratingImage] = useState(false);
  
  const [loadingAudioId, setLoadingAudioId] = useState<number | null>(null);
  const [activeAudio, setActiveAudio] = useState<{ id: number; url: string; } | null>(null);

  const [assistantResult, setAssistantResult] = useState<AiTeamAssistantOutput | null>(null);
  const [isAssistantLoading, setIsAssistantLoading] = useState(true);
  const [assistantError, setAssistantError] = useState<string | null>(null);
  
  const [dailyQuests, setDailyQuests] = useState(initialDailyQuests);
  const [weeklyQuests, setWeeklyQuests] = useState(initialWeeklyQuests);

  useEffect(() => {
    async function getAssistantSummary() {
      setIsAssistantLoading(true);
      setAssistantError(null);
      try {
        const result = await aiTeamAssistant({
            teamActivity: "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏: –ø–æ–±–µ–¥–∞ 13-9 –ø—Ä–æ—Ç–∏–≤ '–í–∏—Ö—Ä–µ–≤—ã—Ö –ì–∞–¥—é–∫', –ø–æ—Ä–∞–∂–µ–Ω–∏–µ 7-13 –æ—Ç '–ö–≤–∞–Ω—Ç–æ–≤—ã—Ö –ö–≤–∞–∑–∞—Ä–æ–≤'. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ –≤—ã—Å–æ–∫–∞—è, –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è —Ç–∞–∫—Ç–∏–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ Ascent.",
            teamGoals: "–ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å - –≤–æ–π—Ç–∏ –≤ —Ç–æ–ø-3 –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–µ 'Autumn Cyber Clash'. –í—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è —Ü–µ–ª—å - —É–ª—É—á—à–∏—Ç—å –≤–∏–Ω—Ä–µ–π—Ç –Ω–∞ –∫–∞—Ä—Ç–µ Bind.",
            relevantContent: "–ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞: https://example.com/analysis-bind-game"
        });
        setAssistantResult(result);
      } catch (e) {
        console.error("AI Assistant failed:", e);
        setAssistantError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–¥–∫—É –æ—Ç AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.");
      } finally {
        setIsAssistantLoading(false);
      }
    }
    getAssistantSummary();
  }, []);

  const handlePublish = () => {
    if (!postContent.trim() || !user) {
      toast({
          variant: "destructive",
          title: "–ü—É—Å—Ç–æ–π –ø–æ—Å—Ç",
          description: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø—É—Å—Ç–æ–π –ø–æ—Å—Ç.",
      });
      return;
    }

    const newPost: FeedItem = {
      id: Date.now(),
      author: {
        name: user.name,
        avatar: user.avatar,
        avatarHint: "user avatar",
        href: "/profile",
      },
      timestamp: "—Ç–æ–ª—å–∫–æ —á—Ç–æ",
      type: "player_post",
      content: {
        text: postContent,
        ...(postImage && { image: postImage, imageHint: "AI generated" }),
      },
      stats: {
        likes: 0,
        comments: 0,
      },
      likedByUser: false,
    };
    
    setFeedItems([newPost, ...feedItems]);
    
    const newCount = postCount + 1;
    let rate;
    let description;

    if (newCount === 1) {
      rate = PD_RATES.MEDIA_POST_TIER_1;
      description = PD_SOURCE_DETAILS.MEDIA_POST_TIER_1.description;
    } else if (newCount === 2) {
      rate = PD_RATES.MEDIA_POST_TIER_2;
      description = PD_SOURCE_DETAILS.MEDIA_POST_TIER_2.description;
    } else if (newCount === 3) {
      rate = PD_RATES.MEDIA_POST_TIER_3;
      description = PD_SOURCE_DETAILS.MEDIA_POST_TIER_3.description;
    } else {
      toast({
          title: "–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!",
          description: "–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –ø–æ—Å—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.",
      });
      setPostContent("");
      setPostImage(null);
      return;
    }

    setPostCount(newCount);
    
    toast({
        title: (
            <div className="flex items-center">
                <Coins className="mr-2 h-5 w-5 text-amber-400" />
                <span>+{rate} PD</span>
            </div>
        ),
        description: description,
    });
    setPostContent("");
    setPostImage(null);
  };

  const handleGeneratePost = async () => {
    if (!aiTopic.trim()) return;
    setIsGenerating(true);
    try {
        const result = await generateContent({
            topic: aiTopic,
            tone: 'enthusiastic',
            contentType: 'news post'
        });
        setPostContent(result.generatedText);
        setIsAiDialogOpen(false);
        setAiTopic("");
        toast({
            title: "–ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!",
            description: "–í–∞—à –ø–æ—Å—Ç –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
        });
    } catch (e) {
        console.error(e);
        toast({
            variant: "destructive",
            title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
            description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç.",
        });
    } finally {
        setIsGenerating(false);
    }
  };

  const handleGenerateImage = async () => {
    if (!postContent.trim()) {
      toast({
        variant: "destructive",
        title: "–ü—É—Å—Ç–æ–π –ø–æ—Å—Ç",
        description: "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
      });
      return;
    }
    setIsGeneratingImage(true);
    try {
      const result = await generatePostImage(postContent);
      setPostImage(result.imageDataUri);
    } catch (e) {
      console.error(e);
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
      });
    } finally {
      setIsGeneratingImage(false);
    }
  };

  const handleLike = (itemId: number) => {
    setFeedItems(prevItems =>
        prevItems.map(item => {
            if (item.id === itemId) {
                const liked = !item.likedByUser;
                const newLikes = liked ? item.stats.likes + 1 : item.stats.likes - 1;
                return {
                    ...item,
                    likedByUser: liked,
                    stats: { ...item.stats, likes: newLikes },
                };
            }
            return item;
        })
    );
  };

  const handlePlayAudio = async (itemId: number, text: string) => {
    if (loadingAudioId === itemId || activeAudio?.id === itemId) return;
    setLoadingAudioId(itemId);
    setActiveAudio(null);
    try {
        const result = await textToSpeech(text);
        setActiveAudio({ id: itemId, url: result.audioDataUri });
    } catch (error) {
        toast({
            variant: "destructive",
            title: "–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è",
            description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞."
        });
    } finally {
        setLoadingAudioId(null);
    }
  }

  const handleClaimQuest = (questId: string, type: 'daily' | 'weekly') => {
    const questList = type === 'daily' ? dailyQuests : weeklyQuests;
    const setQuestList = type === 'daily' ? setDailyQuests : setWeeklyQuests;
    const quest = questList.find(q => q.id === questId);

    if (quest && quest.currentProgress >= quest.goal && !quest.isClaimed) {
        setQuestList(prev => prev.map(q => q.id === questId ? { ...q, isClaimed: true } : q));
        toast({
            title: (
              <div className="flex items-center">
                  <Coins className="mr-2 h-5 w-5 text-amber-400" />
                  <span>–ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞!</span>
              </div>
            ),
            description: `–í—ã –ø–æ–ª—É—á–∏–ª–∏ +${quest.reward} PD –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è "${quest.title}".`,
        });
        // Here you would also update the global PD balance
    }
  };

  return (
    <div className="grid grid-cols-12 gap-6">
      <div className="col-span-12 lg:col-span-8">
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid w-full gap-2">
                <Textarea
                  placeholder="–ß—Ç–æ —É –≤–∞—Å –Ω–æ–≤–æ–≥–æ?"
                  rows={3}
                  value={postContent}
                  onChange={(e) => setPostContent(e.target.value)}
                />
                 {isGeneratingImage && <Skeleton className="mt-2 h-48 w-full rounded-lg" />}
                 {postImage && !isGeneratingImage && (
                    <div className="relative mt-2">
                        <Image src={postImage} alt="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" width={800} height={400} className="rounded-lg border object-cover aspect-video"/>
                        <Button variant="destructive" size="icon" className="absolute top-2 right-2 h-7 w-7" onClick={() => setPostImage(null)}>
                            <Trash2 className="h-4 w-4" />
                        </Button>
                    </div>
                )}
                <div className="flex items-center justify-between">
                  <div className="flex gap-2 text-muted-foreground">
                    <Button variant="ghost" size="icon" onClick={handleGenerateImage} disabled={isGeneratingImage} title="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—Å—Ç—É">
                      {isGeneratingImage ? <Loader2 className="h-5 w-5 animate-spin" /> : <ImageIcon className="h-5 w-5 text-purple-500" />}
                    </Button>
                     <Dialog open={isAiDialogOpen} onOpenChange={setIsAiDialogOpen}>
                        <DialogTrigger asChild>
                            <Button variant="ghost" size="icon" title="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞">
                                <BrainCircuit className="h-5 w-5 text-primary" />
                            </Button>
                        </DialogTrigger>
                        <DialogContent>
                            <DialogHeader>
                                <DialogTitle>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò</DialogTitle>
                                <DialogDescription>
                                    –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É, –∏ –ò–ò –Ω–∞–ø–∏—à–µ—Ç –ø–æ—Å—Ç –¥–ª—è –≤–∞—Å. –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π.
                                </DialogDescription>
                            </DialogHeader>
                            <div className="space-y-4 py-4">
                                <div className="space-y-2">
                                    <Label htmlFor="ai-topic">–¢–µ–º–∞ –ø–æ—Å—Ç–∞</Label>
                                    <Input 
                                        id="ai-topic"
                                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, '–ø–æ–±–µ–¥–∞ –ö–∏–±–µ—Ä –û—Ä–ª–æ–≤ –≤ —Ñ–∏–Ω–∞–ª–µ'"
                                        value={aiTopic}
                                        onChange={(e) => setAiTopic(e.target.value)}
                                    />
                                </div>
                                <Button onClick={handleGeneratePost} disabled={isGenerating} className="w-full">
                                    {isGenerating ? (
                                        <>
                                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                            –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...
                                        </>
                                    ) : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å'}
                                </Button>
                            </div>
                        </DialogContent>
                    </Dialog>
                  </div>
                  <Button onClick={handlePublish}>–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å</Button>
                </div>
              </div>
            </CardContent>
          </Card>

          <div className="space-y-6">
            {feedItems.length > 0 ? (
                feedItems.map((item) => (
                    <Card key={item.id}>
                        <CardHeader>
                        <div className="flex items-center justify-between">
                            <div className="flex items-center gap-3">
                            <Avatar>
                                <AvatarImage src={item.author.avatar} data-ai-hint={item.author.avatarHint} />
                                <AvatarFallback>{item.author.name.charAt(0)}</AvatarFallback>
                            </Avatar>
                            <div>
                                <p className="font-semibold">{item.author.name}</p>
                                <p className="text-xs text-muted-foreground">{item.timestamp}</p>
                            </div>
                            <div className="hidden sm:block">{getTypeIcon(item.type)}</div>
                            </div>
                            <Button variant="ghost" size="icon"><MoreHorizontal className="h-5 w-5" /></Button>
                        </div>
                        </CardHeader>
                        <CardContent className="space-y-4">
                        <p className="text-sm">{item.content.text}</p>
                        {item.content.image && (
                            <div className="overflow-hidden rounded-lg border">
                            <Image
                                src={item.content.image}
                                alt="Post image"
                                width={800}
                                height={400}
                                className="aspect-video w-full object-cover"
                                data-ai-hint={item.content.imageHint}
                            />
                            </div>
                        )}
                         {activeAudio?.id === item.id && (
                            <audio src={activeAudio.url} autoPlay controls className="w-full h-10 mt-2" />
                         )}
                        </CardContent>
                        <CardFooter className="flex justify-between border-t px-6 pt-4">
                            <div className="flex gap-4">
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  className="flex items-center gap-2"
                                  onClick={() => handleLike(item.id)}
                                >
                                    <ThumbsUp className={cn("h-4 w-4", item.likedByUser && "fill-current text-primary")} />
                                    <span>{item.stats.likes}</span>
                                </Button>
                                <Button variant="ghost" size="sm" className="flex items-center gap-2">
                                    <MessageCircle className="h-4 w-4" />
                                    <span>{item.stats.comments}</span>
                                </Button>
                                 <Button 
                                    variant="ghost" 
                                    size="sm" 
                                    className="flex items-center gap-2"
                                    onClick={() => handlePlayAudio(item.id, item.content.text)}
                                    disabled={loadingAudioId === item.id}
                                    title="–û–∑–≤—É—á–∏—Ç—å –ø–æ—Å—Ç"
                                >
                                  {loadingAudioId === item.id ? (
                                    <Loader2 className="h-4 w-4 animate-spin" />
                                  ) : (
                                    <Volume2 className="h-4 w-4" />
                                  )}
                                </Button>
                            </div>
                            <Button variant="ghost" size="sm" className="flex items-center gap-2">
                                <Share2 className="h-4 w-4" />
                                <span>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è</span>
                            </Button>
                        </CardFooter>
                    </Card>
                ))
            ) : (
                <Card className="flex h-64 flex-col items-center justify-center gap-4 border-2 border-dashed">
                    <FileQuestion className="h-12 w-12 text-muted-foreground" />
                    <div className="text-center">
                        <CardTitle>–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π</CardTitle>
                        <CardDescription className="mt-2">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!</CardDescription>
                    </div>
                </Card>
            )}
          </div>
        </div>
      </div>
      <aside className="col-span-12 lg:col-span-4">
          <div className="sticky top-4 space-y-6">
            <Card>
                <CardHeader>
                    <CardTitle className="flex items-center gap-2"><ClipboardList className="text-primary"/> –ó–∞–¥–∞–Ω–∏—è</CardTitle>
                    <CardDescription>–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å PD.</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                    <div>
                        <h4 className="font-semibold text-sm mb-2">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ</h4>
                        <div className="space-y-3">
                        {dailyQuests.map((quest) => (
                            <div key={quest.id}>
                                <div className="flex items-center gap-2 text-sm">
                                    <quest.icon className="h-4 w-4 text-muted-foreground" />
                                    <span className="flex-1 font-medium">{quest.title}</span>
                                    <Badge variant="secondary" className="flex items-center gap-1"><Coins className="h-3 w-3" />+{quest.reward} PD</Badge>
                                </div>
                                <Progress value={(quest.currentProgress / quest.goal) * 100} className="mt-1 h-2" />
                                <div className="flex justify-between items-center mt-1">
                                    <p className="text-xs text-muted-foreground">{quest.description}</p>
                                     <Button 
                                        size="xs" 
                                        variant="link"
                                        disabled={quest.isClaimed || quest.currentProgress < quest.goal}
                                        onClick={() => handleClaimQuest(quest.id, 'daily')}
                                        className="text-xs h-auto p-0"
                                    >
                                        {quest.isClaimed ? '–ü–æ–ª—É—á–µ–Ω–æ' : '–ó–∞–±—Ä–∞—Ç—å'}
                                    </Button>
                                </div>
                            </div>
                        ))}
                        </div>
                    </div>
                     <div>
                        <h4 className="font-semibold text-sm mb-2">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ</h4>
                         <div className="space-y-3">
                         {weeklyQuests.map((quest) => (
                            <div key={quest.id}>
                                <div className="flex items-center gap-2 text-sm">
                                    <quest.icon className="h-4 w-4 text-muted-foreground" />
                                    <span className="flex-1 font-medium">{quest.title}</span>
                                    <Badge variant="secondary" className="flex items-center gap-1"><Coins className="h-3 w-3" />+{quest.reward} PD</Badge>
                                </div>
                                <Progress value={(quest.currentProgress / quest.goal) * 100} className="mt-1 h-2" />
                                <div className="flex justify-between items-center mt-1">
                                    <p className="text-xs text-muted-foreground">{quest.description}</p>
                                     <Button 
                                        size="xs" 
                                        variant="link"
                                        disabled={quest.isClaimed || quest.currentProgress < quest.goal}
                                        onClick={() => handleClaimQuest(quest.id, 'weekly')}
                                        className="text-xs h-auto p-0"
                                    >
                                        {quest.isClaimed ? '–ü–æ–ª—É—á–µ–Ω–æ' : '–ó–∞–±—Ä–∞—Ç—å'}
                                    </Button>
                                </div>
                            </div>
                        ))}
                        </div>
                    </div>
                </CardContent>
            </Card>

            <Card>
                <CardHeader>
                    <CardTitle className="flex items-center gap-2"><BrainCircuit className="text-primary"/>AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã</CardTitle>
                    <CardDescription>–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã.</CardDescription>
                </CardHeader>
                <CardContent>
                    {isAssistantLoading && (
                        <div className="space-y-2">
                            <Skeleton className="h-4 w-1/3" />
                            <Skeleton className="h-4 w-full" />
                            <Skeleton className="h-4 w-4/5" />
                            <Skeleton className="h-4 w-1/2 mt-4" />
                            <Skeleton className="h-4 w-full" />
                            <Skeleton className="h-4 w-3/4" />
                        </div>
                    )}
                    {assistantError && (
                        <Alert variant="destructive">
                            <AlertCircle className="h-4 w-4" />
                            <AlertTitle>–û—à–∏–±–∫–∞</AlertTitle>
                            <AlertDescription>{assistantError}</AlertDescription>
                        </Alert>
                    )}
                    {assistantResult && (
                        <div className="space-y-4 text-sm">
                            <div>
                                <h4 className="font-semibold">–°–≤–æ–¥–∫–∞</h4>
                                <p className="text-muted-foreground">{assistantResult.summary}</p>
                            </div>
                            <div>
                                <h4 className="font-semibold">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h4>
                                <p className="text-muted-foreground">{assistantResult.suggestions}</p>
                            </div>
                        </div>
                    )}
                </CardContent>
            </Card>

             <Card>
                <CardHeader>
                    <CardTitle>–¢—Ä–µ–Ω–¥—ã –Ω–µ–¥–µ–ª–∏</CardTitle>
                    <CardDescription>–°–∞–º—ã–µ –æ–±—Å—É–∂–¥–∞–µ–º—ã–µ —Ç–µ–º—ã</CardDescription>
                </CardHeader>
                <CardContent className="space-y-3">
                    <div className="text-sm font-semibold">#AutumnClash</div>
                    <div className="text-sm font-semibold">#ValorantPro</div>
                    <div className="text-sm font-semibold">#–ö–∏–±–µ—Ä–û—Ä–ª—ã–í–ø–µ—Ä–µ–¥</div>
                </CardContent>
            </Card>

             <Card>
                <CardHeader>
                    <CardTitle>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</CardTitle>
                     <CardDescription>–í–∞–º –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                    <div className="flex items-center gap-3">
                      <Avatar className="h-10 w-10">
                        <AvatarImage src="https://placehold.co/40x40.png" data-ai-hint="snake logo" />
                        <AvatarFallback>–í–ì</AvatarFallback>
                      </Avatar>
                      <div className="flex-1">
                        <p className="text-sm font-semibold">–í–∏—Ö—Ä–µ–≤—ã–µ –ì–∞–¥—é–∫–∏</p>
                        <p className="text-xs text-muted-foreground">–ö–æ–º–∞–Ω–¥–∞</p>
                      </div>
                      <Button variant="outline" size="sm">–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è</Button>
                    </div>
                </CardContent>
            </Card>
          </div>
      </aside>
    </div>
  );
}
