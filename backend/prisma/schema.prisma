// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                @id @default(cuid())
  email                   String                @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    String                @default("Игрок")
  xp                      Int                   @default(0)
  status                  String                @default("Активен")
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  location                String?
  mainSport               String?
  dateOfBirth             DateTime?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdTeams            Team[]                @relation("TeamCreator")
  captainOfTeams          Team[]                @relation("TeamCaptain")
  memberOfTeams           Team[]                @relation("TeamMembers")
  organizedTournaments    Tournament[]
  messages                Message[]
  activities              Activity[]
  gallery                 GalleryItem[]
  careerHistory           CareerHistory[]
  challengesAsCreator     Challenge[]           @relation("ChallengeCreator")
  challengesAsOpponent    Challenge[]           @relation("ChallengeOpponent")
  playgrounds             Playground[]
  promotions              Promotion[]
  coachProfile            CoachProfile?
  coaching                User[]                @relation("CoachingRelationship")
  coachedBy               User?                 @relation("CoachingRelationship", fields: [coachedById], references: [id])
  coachedById             String?
  judgedMatches           Match[]               @relation("MatchReferee")
  measurements            Measurement[]
  trainingLogs            TrainingLog[]
  foodLogEntries          FoodLogEntry[]
  trainingProposalsSent     TrainingProposal[]    @relation("ProposalsSent")
  trainingProposalsReceived TrainingProposal[]    @relation("ProposalsReceived")
  pollVotes               PollVote[]
  inventoryItems          InventoryItem[]
  friends                 User[]                @relation("Friendship")
  friendOf                User[]                @relation("Friendship")
  friendRequestsSent      FriendRequest[]       @relation("SentRequests")
  friendRequestsReceived  FriendRequest[]       @relation("ReceivedRequests")
}

model Team {
  id                 String       @id @default(cuid())
  name               String       @unique
  slug               String       @unique
  logo               String?
  dataAiHint         String?
  game               String
  motto              String?
  description        String?
  rank               Int          @default(9999)
  wins               Int          @default(0)
  losses             Int          @default(0)
  draws              Int          @default(0)
  seekingSponsorship Boolean      @default(true)
  homePlaygroundId   String?
  creator            User         @relation("TeamCreator", fields: [creatorId], references: [id])
  creatorId          String
  captain            User         @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId          String
  members            User[]       @relation("TeamMembers")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]      @relation("Team1Matches")
  matchesAsTeam2     Match[]      @relation("Team2Matches")
  sponsors           Sponsor[]
  chat               Chat?        @relation(fields: [chatId], references: [id])
  chatId             String?      @unique
  leagues            LeagueTeam[]

  @@index([game])
}

model Match {
  id           String      @id @default(cuid())
  team1        Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id      String
  team2        Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id      String
  team1Score   Int?
  team2Score   Int?
  status       MatchStatus
  scheduledAt  DateTime
  finishedAt   DateTime?
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  league       League?     @relation(fields: [leagueId], references: [id])
  leagueId     String?
  location     String?
  referee      User?       @relation("MatchReferee", fields: [refereeId], references: [id])
  refereeId    String?
  refereeName  String?

  @@index([team1Id])
  @@index([team2Id])
  @@index([tournamentId])
}

model Tournament {
  id                    String     @id @default(cuid())
  name                  String
  slug                  String     @unique
  game                  String
  description           String?
  status                String     @default("REGISTRATION")
  type                  String     @default("team")
  format                String     @default("single_elimination")
  category              String?
  location              String?
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  organizer             User       @relation(fields: [organizerId], references: [id])
  organizerId           String
  teams                 Team[]
  matches               Match[]
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]
  messages     Message[]
  team         Team?

  @@index([type])
}

model Message {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Activity {
  id        String   @id @default(cuid())
  type      ActivityType
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  metadata  Json
}

model GalleryItem {
  id         String   @id @default(cuid())
  src        String
  alt        String
  dataAiHint String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

model CareerHistory {
  id       String @id @default(cuid())
  teamName String
  period   String
  role     String
  review   String
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  createdAt  DateTime @default(now())
}

model Challenge {
  id          String          @id @default(cuid())
  title       String
  description String
  discipline  String
  wager       Int
  creator     User            @relation("ChallengeCreator", fields: [creatorId], references: [id])
  creatorId   String
  opponent    User?           @relation("ChallengeOpponent", fields: [opponentId], references: [id])
  opponentId  String?
  status      ChallengeStatus
  result      String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Playground {
  id             String    @id @default(cuid())
  name           String
  address        String
  type           String
  coverImage     String?
  coverImageHint String?
  surface        String
  features       String[]
  rating         Float
  checkIns       Int
  status         String    @default("PENDING_MODERATION")
  creator        User      @relation(fields: [creatorId], references: [id])
  creatorId      String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  rating         Float
  price          Float
}

model Sponsor {
  id          String   @id @default(cuid())
  name        String   @unique
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  teams       Team[]
  promotions  Promotion[]
}

model Promotion {
  id             String   @id @default(cuid())
  name           String
  description    String
  prize          String
  cost           String
  imageDataUri   String
  imageHint      String
  endDate        DateTime
  organizer      User     @relation(fields: [organizerId], references: [id])
  organizerId    String
  sponsor        Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model FriendRequest {
  id String @id @default(cuid())
  from User @relation("SentRequests", fields: [fromId], references: [id])
  fromId String
  to User @relation("ReceivedRequests", fields: [toId], references: [id])
  toId String
  status String @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([fromId, toId])
}

model Notification {
  id String @id @default(cuid())
  userId String
  type String // FRIEND_REQUEST, MATCH_RESULT, NEW_MESSAGE etc.
  message String
  href String?
  isRead Boolean @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model StoreItem {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Exercise {
  id             String   @id @default(cuid())
  name           String   @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  techniqueTips  String[]
  commonMistakes String[]
  alternatives   String[]
}

model TrainingProgram {
  id             String             @id @default(cuid())
  name           String
  description    String
  goal           String
  daysPerWeek    Int
  splitType      String
  author         String
  coverImage     String
  coverImageHint String
  isAiGenerated  Boolean            @default(false)
  weeklySplit    WorkoutDay[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model WorkoutDay {
  id                String       @id @default(cuid())
  day               Int
  title             String
  trainingProgram   TrainingProgram @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  exercises         ExerciseDetail[]
}

model ExerciseDetail {
  id                      String      @id @default(cuid())
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
}

model TrainingLog {
  id         String           @id @default(cuid())
  date       DateTime
  workoutName String
  status     String
  mood       String?
  notes      String?
  coachNotes String?
  user       User             @relation(fields: [userId], references: [id])
  userId     String
  exercises  LoggedExercise[]
}

model LoggedExercise {
  id            String       @id @default(cuid())
  trainingLog   TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId String
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  notes         String?
  sets          LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean        @default(false)
}

model Sport {
    id String @id
    name String @unique
    icon String
    category String
}

model League {
    id        String       @id @default(cuid())
    name      String
    description String
    game      String
    image     String?
    imageHint String?
    teams     LeagueTeam[]
    matches   Match[]
}

model LeagueTeam {
    id       String @id @default(cuid())
    league   League @relation(fields: [leagueId], references: [id])
    leagueId String
    team     Team   @relation(fields: [teamId], references: [id])
    teamId   String @unique
    played   Int    @default(0)
    wins     Int    @default(0)
    losses   Int    @default(0)
    draws    Int    @default(0)
    points   Int    @default(0)
}

model FaqItem {
    id String @id @default(cuid())
    question String
    answer String
    category String
}

model LfgLobby {
  id             String       @id @default(cuid())
  type           LfgLobbyType
  sport          String
  location       String
  playgroundId   String?
  startTime      DateTime
  endTime        DateTime
  playersNeeded  Int
  comment        String
  creator        User         @relation(fields: [creatorId], references: [id])
  creatorId      String
  players        User[]
  createdAt      DateTime     @default(now())
}

model Measurement {
  id      String    @id @default(cuid())
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
  user    User      @relation(fields: [userId], references: [id])
  userId  String

  @@index([userId])
}

model TrainingProposal {
  id        String   @id @default(cuid())
  from      User     @relation("ProposalsSent", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ProposalsReceived", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  comment   String?
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())

  @@index([fromId])
  @@index([toId])
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  options   PollOption[]
  votes     PollVote[]
}

model PollOption {
  id        String     @id @default(cuid())
  text      String
  poll      Poll       @relation(fields: [pollId], references: [id])
  pollId    String
  votes     PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime   @default(now())

  @@unique([userId, pollId])
}

model Quest {
    id          String    @id @default(cuid())
    type        QuestType
    title       String
    description String
    reward      Int
    goal        Int
    href        String
    createdAt   DateTime  @default(now())
}

model FoodItem {
    id String @id @default(cuid())
    name String @unique
    category String
    image String?
    imageHint String?
    calories Float
    protein Float
    fat Float
    carbs Float
    description String?
}

model FoodLogEntry {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    foodItem FoodItem @relation(fields: [foodItemId], references: [id])
    foodItemId String
    grams Int
    meal String
    createdAt DateTime @default(now())
    @@index([userId])
}

model InventoryItem {
  id             String   @id @default(cuid())
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ActivityType {
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
}

enum ChatType {
  DIRECT
  GROUP
}

enum QuestType {
    DAILY
    WEEKLY
    SPECIAL
}

enum LfgLobbyType {
    GAME
    TRAINING
}
