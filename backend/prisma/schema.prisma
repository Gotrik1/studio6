// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  ADMIN // Администратор
  MODERATOR // Модератор
  JUDGE // Судья
  ORGANIZER // Организатор
  MANAGER // Менеджер
  COACH // Тренер
  CAPTAIN // Капитан
  PLAYER // Игрок
  FAN // Болельщик
  SPONSOR_REP // Представитель спонсора
}

enum UserStatus {
  ACTIVE
  BANNED
  PENDING_VERIFICATION
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

enum TournamentType {
  TEAM
  INDIVIDUAL
}

enum TournamentFormat {
  SINGLE_ELIMINATION
  ROUND_ROBIN
  GROUPS
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum ReportSeverity {
  LOW
  MEDIUM
  HIGH
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

// Models
model User {
  id                  String   @id @default(cuid())
  name                String
  email               String   @unique
  passwordHash        String
  avatar              String?
  role                Role     @default(PLAYER)
  status              UserStatus @default(ACTIVE)
  xp                  Int      @default(0)
  location            String?
  mainSport           String?
  isVerified          Boolean  @default(false)
  dateOfBirth         DateTime?
  preferredSports     String[]
  telegram            String?  @unique
  discord             String?  @unique
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  teamsAsMember             Team[]                 @relation("TeamMembers")
  teamsAsCaptain            Team[]                 @relation("TeamCaptain")
  teamsAsCreator            Team[]                 @relation("TeamCreator")
  organizedTournaments      Tournament[]
  judgedMatches             Match[]                @relation("MatchJudges")
  createdChallenges         Challenge[]            @relation("ChallengeCreator")
  acceptedChallenges        Challenge[]            @relation("ChallengeOpponent")
  friends                   User[]                 @relation("Friends")
  friendOf                  User[]                 @relation("Friends")
  sentFriendRequests        FriendRequest[]        @relation("SentFriendRequests")
  receivedFriendRequests    FriendRequest[]        @relation("ReceivedFriendRequests")
  reportsSent               Report[]               @relation("ReportsSent")
  reportsReceived           Report[]               @relation("ReportsReceived")
  reportsResolved           Report[]               @relation("ReportsResolved")
  createdPlaygrounds        Playground[]
  createdPlaygroundReviews  PlaygroundReview[]
  createdPlaygroundReports  PlaygroundReport[]
  resolvedPlaygroundReports PlaygroundReport[]     @relation("PlaygroundReportsResolved")
  activities                Activity[]
  messages                  Message[]
  coaching                  User[]                 @relation("Coaches")
  coach                     User?                  @relation("Coaches", fields: [coachId], references: [id])
  coachId                   String?
  sponsorships              Sponsorship[]
  organizedPromotions       Promotion[]
  createdLfgLobbies         LfgLobby[]
  joinedLfgLobbies          LfgLobby[]             @relation("LfgLobbyPlayers")
  measurements              Measurement[]
  trainingProposalsSent     TrainingProposal[]     @relation("TrainingProposalsFrom")
  trainingProposalsReceived TrainingProposal[]     @relation("TrainingProposalsTo")
  trainingLogs              TrainingLog[]
  inventory                 InventoryItem[]
  chats                     Chat[]
}

model Team {
  id                   String   @id @default(cuid())
  name                 String
  slug                 String   @unique
  game                 String
  motto                String?
  logo                 String?
  dataAiHint           String?
  rank                 Int      @default(9999)
  wins                 Int      @default(0)
  losses               Int      @default(0)
  draws                Int      @default(0)
  seekingSponsorship   Boolean  @default(false)
  description          String?
  goals                String?
  homePlaygroundId     String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  creator              User     @relation("TeamCreator", fields: [creatorId], references: [id])
  creatorId            String
  captain              User     @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId            String
  members              User[]   @relation("TeamMembers")
  tournaments          Tournament[] @relation("TournamentTeams")
  sponsors             Sponsor[] @relation("TeamSponsors")
  matchesAsTeam1       Match[]  @relation("Team1Matches")
  matchesAsTeam2       Match[]  @relation("Team2Matches")
  chat                 Chat?
  applications         TeamApplication[]
  practices            TeamPractice[]
}

model Match {
  id                   String      @id @default(cuid())
  team1                Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id              String
  team2                Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id              String
  team1Score           Int?
  team2Score           Int?
  status               MatchStatus @default(PLANNED)
  tournamentId         String?
  tournament           Tournament? @relation(fields: [tournamentId], references: [id])
  leagueId             String?
  league               League?     @relation(fields: [leagueId], references: [id])
  events               Json[]
  scheduledAt          DateTime
  startedAt            DateTime?
  finishedAt           DateTime?
  location             String?
  playgroundId         String?
  playground           Playground? @relation(fields: [playgroundId], references: [id])
  refereeName          String?
  judges               User[]      @relation("MatchJudges")
  disputeReason        String?
  disputeOpenedAt      DateTime?
  resolution           String?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
}

model Tournament {
  id                      String      @id @default(cuid())
  name                    String
  slug                    String      @unique
  description             String?
  status                  TournamentStatus @default(REGISTRATION)
  type                    TournamentType   @default(TEAM)
  format                  TournamentFormat @default(SINGLE_ELIMINATION)
  game                    String
  category                String
  location                String
  participantCount        Int
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt

  organizer               User        @relation(fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]      @relation("TournamentTeams")
  matches                 Match[]
  announcements           TournamentAnnouncement[]
  sponsors                Sponsor[]                @relation("TournamentSponsors")
  judges                  User[]                   @relation("TournamentJudges")
  medicalPartners         MedicalPartner[]         @relation("TournamentMedicalStaff")
  media                   TournamentMedia[]
  applications            TeamApplication[]
}

model Playground {
  id                  String   @id @default(cuid())
  name                String
  address             String
  type                String
  coverImage          String?
  coverImageHint      String?
  surface             String
  features            String[] @default([])
  rating              Float    @default(0)
  checkIns            Int      @default(0)
  status              String   @default("PENDING_MODERATION")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  creator             User     @relation(fields: [creatorId], references: [id])
  creatorId           String
  reviews             PlaygroundReview[]
  reports             PlaygroundReport[]
  matches             Match[]
  practices           TeamPractice[]
  lobbies             LfgLobby[]
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String?
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String         @id @default(cuid())
  playground   Playground     @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User           @relation(fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     ReportSeverity
  status       ReportStatus   @default(PENDING)
  resolution   String?
  resolver     User?          @relation("PlaygroundReportsResolved", fields: [resolverId], references: [id])
  resolverId   String?
  resolvedAt   DateTime?
  createdAt    DateTime       @default(now())
}

model LfgLobby {
  id            String       @id @default(cuid())
  creator       User         @relation(fields: [creatorId], references: [id])
  creatorId     String
  type          String // GAME or TRAINING
  sport         String
  location      String
  playground    Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId  String?
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  players       User[]       @relation("LfgLobbyPlayers")
  comment       String
  status        LfgLobbyStatus @default(OPEN)
  createdAt     DateTime     @default(now())
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime @default(now())
}

model Chat {
  id           String    @id @default(cuid())
  name         String? // For group chats
  type         String    @default("PRIVATE") // PRIVATE or GROUP
  messages     Message[]
  participants User[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Activity {
  id           String       @id @default(cuid())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  type         ActivityType
  metadata     Json
  playgroundId String?
  playground   Playground?  @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now()) @map("timestamp")
}

model Challenge {
  id           String          @id @default(cuid())
  creator      User            @relation("ChallengeCreator", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("ChallengeOpponent", fields: [opponentId], references: [id])
  opponentId   String?
  title        String
  description  String
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  wager        Int
  status       ChallengeStatus @default(OPEN)
  result       String?
  createdAt    DateTime        @default(now())
}

model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("ReportsSent", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  reportedUserId String
  reason         String
  context        String
  status         ReportStatus @default(PENDING)
  resolution     String?
  resolver       User?        @relation("ReportsResolved", fields: [resolverId], references: [id])
  resolverId     String?
  resolvedAt     DateTime?
  createdAt      DateTime     @default(now())
}

model Measurement {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  weight    Float
  bodyFat   Float?
  chest     Float?
  waist     Float?
  hips      Float?
  biceps    Float?
  thigh     Float?
  createdAt DateTime @default(now())
}

model TrainingProposal {
  id        String                 @id @default(cuid())
  from      User                   @relation("TrainingProposalsFrom", fields: [fromId], references: [id])
  fromId    String
  to        User                   @relation("TrainingProposalsTo", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  program   TrainingProgram?       @relation(fields: [programId], references: [id])
  programId String?
  comment   String?
  status    TrainingProposalStatus @default(PENDING)
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  createdAt    DateTime              @default(now())
}

model Sponsor {
  id          String       @id @default(cuid())
  name        String
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]     @default([])
  teams       Team[]       @relation("TeamSponsors")
  tournaments Tournament[] @relation("TournamentSponsors")
  promotions  Promotion[]
  createdAt   DateTime     @default(now())
}

model Sponsorship {
  id          String   @id @default(cuid())
  sponsor     Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId   String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  amount      Float
  startDate   DateTime
  endDate     DateTime
  description String
}

model Promotion {
  id            String   @id @default(cuid())
  name          String
  description   String
  prize         String
  cost          String
  imageDataUri  String
  imageHint     String
  endDate       DateTime
  organizer     User     @relation(fields: [organizerId], references: [id])
  organizerId   String
  sponsor       Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId     String?
  createdAt     DateTime @default(now())
}

model Sport {
  id       String      @id @unique
  name     String
  icon     String
  category String
  challenges Challenge[]
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  createdAt    DateTime   @default(now())
}

model TrainingProgram {
  id              String             @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean            @default(false)
  weeklySplit     WorkoutDay[]
  proposals       TrainingProposal[]
  createdAt       DateTime           @default(now())
}

model WorkoutDay {
  id                String             @id @default(cuid())
  trainingProgram   TrainingProgram    @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model TrainingLog {
  id           String           @id @default(cuid())
  user         User             @relation(fields: [userId], references: [id])
  userId       String
  date         DateTime
  workoutName  String
  status       String
  mood         String?
  notes        String?
  coachNotes   String?
  exercises    LoggedExercise[]
}

model LoggedExercise {
  id            String        @id @default(cuid())
  trainingLog   TrainingLog   @relation(fields: [trainingLogId], references: [id])
  trainingLogId String
  exercise      Exercise      @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  notes         String?
  sets          LoggedSet[]
}

model LoggedSet {
  id                 String         @id @default(cuid())
  loggedExercise     LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId   String
  plannedReps        String?
  plannedWeight      String?
  loggedReps         Int?
  loggedWeight       Int?
  rpe                Int?
  isCompleted        Boolean        @default(false)
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String
  createdAt  DateTime @default(now())
}

model FaqItem {
  id        String   @id @default(cuid())
  question  String
  answer    String
  category  String
  createdAt DateTime @default(now())
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
}

model TournamentMedia {
  id          String     @id @default(cuid())
  tournament  Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type        String // IMAGE, VIDEO, AUDIO
  src         String
  description String?
  hint        String?
  createdAt   DateTime   @default(now())
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[] @relation("TournamentMedicalStaff")
  createdAt      DateTime     @default(now())
}

model Poll {
  id        String     @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  isActive  Boolean    @default(true)
  votes     PollVote[]
  createdAt DateTime   @default(now())
}

model PollOption {
  id        String     @id @default(cuid())
  poll      Poll       @relation(fields: [pollId], references: [id])
  pollId    String
  text      String
  votes     PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String

  createdAt DateTime @default(now())
  @@unique([userId, pollId])
}

model Quest {
  id          String @id @default(cuid())
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  type        String // DAILY, WEEKLY, SPECIAL
  createdAt   DateTime @default(now())
}

model Exercise {
  id               String           @id @default(cuid())
  name             String
  description      String
  category         String
  equipment        String
  image            String?
  imageHint        String?
  videoUrl         String?
  techniqueTips    String[]
  commonMistakes   String[]
  alternatives     String[]
  loggedExercises  LoggedExercise[]
}

model UserCareerHistory {
    id        String @id @default(cuid())
    userId    String
    user      User   @relation(fields: [userId], references: [id])
    teamName  String
    period    String
    role      String
    review    String
}

model GalleryItem {
    id          String @id @default(cuid())
    userId      String
    user        User   @relation(fields: [userId], references: [id])
    src         String
    alt         String
    dataAiHint  String
}
