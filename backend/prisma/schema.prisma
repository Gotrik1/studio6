// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================================================================
// Enums
// ==============================================================================
enum UserRole {
  ADMINISTRATOR @map("Администратор")
  MODERATOR     @map("Модератор")
  CAPTAIN       @map("Капитан")
  PLAYER        @map("Игрок")
  COACH         @map("Тренер")
  JUDGE         @map("Судья")
  MANAGER       @map("Менеджер")
  ORGANIZER     @map("Организатор")
  SPONSOR       @map("Спонсор")
  FAN           @map("Болельщик")
}

enum UserStatus {
  ACTIVE    @map("Активен")
  BANNED    @map("Забанен")
  INACTIVE  @map("Неактивен")
}


// ==============================================================================
// User and Profile related models
// ==============================================================================
model User {
  id                   String                 @id @default(cuid())
  email                String                 @unique
  name                 String
  passwordHash         String
  avatar               String?
  role                 UserRole               @default(PLAYER)
  status               UserStatus             @default(ACTIVE)
  xp                   Int                    @default(0)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  dateOfBirth          DateTime?
  location             String?
  mainSport            String?
  isVerified           Boolean                @default(false)
  preferredSports      String[]
  telegram             String?
  discord              String?
  teamsAsMember        Team[]                 @relation("TeamMembers")
  captainOfTeams       Team[]                 @relation("TeamCaptains")
  createdTeams         Team[]                 @relation("CreatedTeams")
  organizedTournaments Tournament[]           @relation("OrganizedTournaments")
  judgedTournaments    Tournament[]           @relation("JudgedTournaments")
  refereedMatches      Match[]                @relation("RefereeMatches")
  sentFriendRequests   FriendRequest[]        @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[]      @relation("ReceivedFriendRequests")
  friends              User[]                 @relation("Friends")
  friendOf             User[]                 @relation("Friends")
  createdChallenges    Challenge[]            @relation("CreatedChallenges")
  acceptedChallenges   Challenge[]            @relation("AcceptedChallenges")
  createdPlaygrounds   Playground[]
  careerHistory        CareerHistory[]
  coachProfile         CoachProfile?
  reportsSent          Report[]               @relation("ReportsSent")
  reportsReceived      Report[]               @relation("ReportsReceived")
  sentPlaygroundReports PlaygroundReport[]    @relation("ReportsSent")
  sponsorships         Sponsorship[]
  sponsorshipOffers    SponsorshipOffer[]
  measurements         Measurement[]
  trainingLogs         TrainingLog[]
  trainingProposalsSent TrainingProposal[]    @relation("ProposalsSent")
  trainingProposalsReceived TrainingProposal[]  @relation("ProposalsReceived")
  pollVotes            PollVote[]
  organizedPromotions  Promotion[]
  createdLobbies       LfgLobby[]               @relation("CreatedLobbies")
  joinedLobbies        LfgLobby[]               @relation("JoinedLobbies")
  chats                Chat[]                   @relation("UserChats")
  messages             Message[]
  userAchievements     UserAchievement[]
  teamApplications     TeamApplication[]
  activities           Activity[]
  inventory            InventoryItem[]
  trainingPrograms     UserTrainingProgram[]
  sentAnnouncements    TournamentAnnouncement[]
  notifications        Notification[]
  matchEvents          MatchEvent[]
}

model CareerHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model CoachProfile {
  id             String    @id @default(cuid())
  user           User      @relation(fields: [userId], references: [id])
  userId         String    @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
}


// ==============================================================================
// Team and Match related models
// ==============================================================================
model Team {
  id                 String             @id @default(cuid())
  name               String
  motto              String?
  logo               String?
  dataAiHint         String?
  game               String
  rank               Int                @default(1)
  wins               Int                @default(0)
  losses             Int                @default(0)
  draws              Int                @default(0)
  creator            User               @relation("CreatedTeams", fields: [creatorId], references: [id])
  creatorId          String
  captain            User               @relation("TeamCaptains", fields: [captainId], references: [id])
  captainId          String
  members            User[]             @relation("TeamMembers")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]            @relation("Team1Matches")
  matchesAsTeam2     Match[]            @relation("Team2Matches")
  slug               String             @unique
  seekingSponsorship Boolean            @default(false)
  pitch              String?
  chat               Chat?
  practices          TeamPractice[]
  sponsorships       Sponsorship[]      @relation("SponsoredTeams")
  sponsorshipOffers  SponsorshipOffer[]
  applications       TeamApplication[]
  leagueTeams        LeagueTeam[]
  matchEvents        MatchEvent[]
  homePlayground     Playground?        @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?
}

model TeamPractice {
  id           String      @id @default(cuid())
  team         Team        @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground  @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  game                    String
  description             String?
  bannerImage             String?
  bannerImageHint         String?
  slug                    String                   @unique
  organizer               User                     @relation("OrganizedTournaments", fields: [organizerId], references: [id])
  organizerId             String
  status                  TournamentStatus         @default(REGISTRATION)
  type                    TournamentType           @default(TEAM)
  format                  TournamentFormat         @default(SINGLE_ELIMINATION)
  participantCount        Int
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  prizePool               String?
  rules                   String?
  category                String?
  location                String?
  teams                   Team[]
  matches                 Match[]
  judges                  User[]                   @relation("JudgedTournaments")
  sponsors                Sponsor[]                @relation("SponsoredTournaments")
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  applications            TeamApplication[]
  media                   TournamentMedia[]
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
}

enum TournamentType {
  TEAM
  INDIVIDUAL
}

enum TournamentFormat {
  SINGLE_ELIMINATION
  ROUND_ROBIN
  GROUPS
}

model TournamentMedia {
    id String @id @default(cuid())
    tournament Tournament @relation(fields: [tournamentId], references: [id])
    tournamentId String
    type MediaType
    src String
    description String?
    hint String?
    createdAt DateTime @default(now())
}

enum MediaType {
    IMAGE
    VIDEO
    AUDIO
}


model Match {
  id              String      @id @default(cuid())
  team1           Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus @default(PLANNED)
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournament      Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  league          League?     @relation(fields: [leagueId], references: [id])
  leagueId        String?
  referee         User?       @relation("RefereeMatches", fields: [refereeId], references: [id])
  refereeId       String?
  playgroundId    String?
  location        String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  round           Int?
  events          MatchEvent[]
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model MatchEvent {
  id        String         @id @default(cuid())
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  team      Team           @relation(fields: [teamId], references: [id])
  teamId    String
  player    User           @relation(fields: [playerId], references: [id])
  playerId  String
  type      MatchEventType
  timestamp DateTime
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  SHOT
  SHOT_ON_TARGET
  CORNER
  FOUL
  OTHER
}

// ==============================================================================
// Playground models
// ==============================================================================
model Playground {
  id          String               @id @default(cuid())
  name        String
  address     String
  type        String
  coverImage  String?
  coverImageHint String?
  surface     String
  features    String[]
  rating      Float
  checkIns    Int                  @default(0)
  status      PlaygroundStatus     @default(PENDING_MODERATION)
  creator     User                 @relation(fields: [creatorId], references: [id])
  creatorId   String
  reviews     PlaygroundReview[]
  reports     PlaygroundReport[]
  residentTeams Team[]
  activities    Activity[]
  practices   TeamPractice[]
  lobbies     LfgLobby[]
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String       @id @default(cuid())
  playground   Playground   @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User         @relation("ReportsSent", fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus
  createdAt    DateTime     @default(now())
}

// ==============================================================================
// Sponsorship and Promotions
// ==============================================================================
model Sponsor {
  id                String       @id @default(cuid())
  name              String       @unique
  logo              String?
  logoHint          String?
  description       String
  profileUrl        String       @unique
  interests         String[]
  tournaments       Tournament[] @relation("SponsoredTournaments")
  teams             Team[]       @relation("SponsoredTeams")
  promotions        Promotion[]
  sponsorships      Sponsorship[]
  sponsorshipOffers SponsorshipOffer[]
}

model Sponsorship {
  id        String   @id @default(cuid())
  team      Team     @relation("SponsoredTeams", fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId String
  amount    Float
  signedAt  DateTime
}

model Promotion {
  id            String    @id @default(cuid())
  name          String
  description   String
  prize         String
  cost          String
  imageDataUri  String
  imageHint     String
  organizer     User      @relation(fields: [organizerId], references: [id])
  organizerId   String
  sponsor       Sponsor?  @relation(fields: [sponsorId], references: [id])
  sponsorId     String?
  endDate       DateTime
  createdAt     DateTime  @default(now())
}

// ==============================================================================
// Application & Communication models
// ==============================================================================
model TeamApplication {
  id           String                  @id @default(cuid())
  team         Team                    @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                    @relation(fields: [userId], references: [id])
  userId       String
  message      String?
  status       TeamApplicationStatus   @default(PENDING)
  tournament   Tournament?             @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt

  @@unique([teamId, userId, tournamentId])
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}


model Chat {
  id           String      @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]      @relation("UserChats")
  messages     Message[]
  team         Team?       @relation(fields: [teamId], references: [id])
  teamId       String?     @unique
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

enum ChatType {
  PRIVATE
  GROUP
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime @default(now())
}

model Notification {
  id             String                  @id @default(cuid())
  user           User                    @relation(fields: [userId], references: [id])
  userId         String
  type           NotificationType
  message        String
  href           String?
  isRead         Boolean                 @default(false)
  createdAt      DateTime                @default(now())
  announcement   TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
  announcementId String?
  matchId        String?
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  TOURNAMENT_START
  ANNOUNCEMENT
}


// ==============================================================================
// Gamification and Activities
// ==============================================================================
model Achievement {
  id          String            @id @default(cuid())
  name        String            @unique
  description String
  icon        String
  users       UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([userId, achievementId])
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  creator      User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  opponentId   String?
  status       ChallengeStatus @default(OPEN)
  result       String?
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Sport {
  id         String      @id @unique
  name       String      @unique
  icon       String
  category   String
  challenges Challenge[]
}


model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("ReportsSent", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  reportedUserId String
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  resolver       User?        @relation("ResolvedReports", fields: [resolverId], references: [id])
  resolverId     String?
  resolution     String?
  createdAt      DateTime     @default(now())
  resolvedAt     DateTime?
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model LfgLobby {
  id           String         @id @default(cuid())
  type         LfgLobbyType
  sport        String
  location     String
  comment      String
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  status       LfgLobbyStatus @default(OPEN)
  // Relations
  creator      User         @relation("CreatedLobbies", fields: [creatorId], references: [id])
  creatorId    String
  players      User[]       @relation("JoinedLobbies")
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  createdAt    DateTime     @default(now())
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

// ==============================================================================
// Training & Nutrition
// ==============================================================================
model TrainingProgram {
  id             String                @id @default(cuid())
  name           String
  description    String
  goal           String
  daysPerWeek    Int
  splitType      String
  author         String
  coverImage     String
  coverImageHint String
  isAiGenerated  Boolean               @default(false)
  weeklySplit    WorkoutDay[]
  users          UserTrainingProgram[]
  trainingProposals TrainingProposal[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  day               Int
  title             String
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
  trainingProgramId String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
  workoutDayId            String
}


model UserTrainingProgram {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    program TrainingProgram @relation(fields: [programId], references: [id])
    programId String
    assignedAt DateTime @default(now())
    isActive Boolean @default(true)
    
    @@unique([userId, programId])
}


model Exercise {
  id             String            @id @default(cuid())
  name           String            @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  loggedExercises LoggedExercise[]
}

model TrainingLog {
  id          String           @id @default(cuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  workoutName String?
  status      TrainingLogStatus @default(PLANNED)
  mood        Mood?
  notes       String?
  coachNotes  String?
  exercises   LoggedExercise[]
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}


model LoggedExercise {
  id                      String        @id @default(cuid())
  trainingLog             TrainingLog   @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
  trainingLogId           String
  exercise                Exercise      @relation(fields: [exerciseId], references: [id])
  exerciseId              String
  notes                   String?
  isSupersetWithPrevious  Boolean?
  sets                    LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean        @default(false)
}

model Measurement {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  weight    Float
  bodyFat   Float?
  chest     Float?
  waist     Float?
  hips      Float?
  biceps    Float?
  thigh     Float?
  createdAt DateTime @default(now())
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String         @unique
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String // e.g. "Breakfast"
  createdAt  DateTime @default(now())
}


// ==============================================================================
// Administrative models
// ==============================================================================
model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  votes     PollVote[]
  author    User?        @relation(fields: [authorId], references: [id])
  authorId  String?
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
}

model PollOption {
  id    String     @id @default(cuid())
  text  String
  poll  Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String
  votes PollVote[]
}

model PollVote {
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  poll       Poll       @relation(fields: [pollId], references: [id])
  pollId     String
  pollOption PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String

  @@id([userId, pollId])
}


model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}


model TournamentAnnouncement {
    id String @id @default(cuid())
    tournament Tournament @relation(fields: [tournamentId], references: [id])
    tournamentId String
    sender User @relation(fields: [senderId], references: [id])
    senderId String
    subject String
    message String
    sentTo Int
    createdAt DateTime @default(now())
    notifications Notification[]
}

model Activity {
    id String @id @default(cuid())
    type ActivityType
    user User @relation(fields: [userId], references: [id])
    userId String
    metadata Json
    playground Playground? @relation(fields: [playgroundId], references: [id])
    playgroundId String?
    createdAt DateTime @default(now())
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}


model TrainingProposal {
    id String @id @default(cuid())
    from User @relation("ProposalsSent", fields: [fromId], references: [id])
    fromId String
    to User @relation("ProposalsReceived", fields: [toId], references: [id])
    toId String
    sport String
    date DateTime
    comment String?
    status TrainingProposalStatus @default(PENDING)
    program TrainingProgram? @relation(fields: [programId], references: [id])
    programId String?
    createdAt DateTime @default(now())
}

enum TrainingProposalStatus {
    PENDING
    ACCEPTED
    DECLINED
}

model SponsorshipOffer {
  id          String                   @id @default(cuid())
  team        Team                     @relation(fields: [teamId], references: [id])
  teamId      String
  sponsor     Sponsor                  @relation(fields: [sponsorId], references: [id])
  sponsorId   String
  offerText   String
  status      SponsorshipOfferStatus   @default(PENDING)
  user        User?                    @relation(fields: [userId], references: [id])
  userId      String?
  createdAt   DateTime                 @default(now())
}

enum SponsorshipOfferStatus {
    PENDING
    ACCEPTED
    DECLINED
}


model MedicalPartner {
    id String @id @default(cuid())
    name String
    specialization String
    contact String
    avatar String?
    avatarHint String?
    tournaments Tournament[]
}


model StoreItem {
    id String @id @default(cuid())
    name String
    description String
    price Float
    image String?
    imageHint String?
    category String
    isRealMoney Boolean @default(false)
}

model InventoryItem {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    name String
    category String
    type String
    purchaseDate DateTime
    lifespanMonths Int
    image String?
    imageHint String?
    createdAt DateTime @default(now())
}
