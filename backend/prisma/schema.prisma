// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                @id @default(cuid())
  email                   String                @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    String                @default("Игрок")
  status                  String                @default("Активен")
  xp                      Int                   @default(0)
  location                String?
  mainSport               String?
  isVerified              Boolean               @default(false)
  dateOfBirth             DateTime?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  teamsAsCaptain          Team[]                @relation("TeamCaptain")
  teamsAsCreator          Team[]                @relation("TeamCreator")
  teamsAsMember           Team[]                @relation("TeamMembers")
  organizedTournaments    Tournament[]
  activities              Activity[]
  friends                 User[]                @relation("Friendship")
  friendOf                User[]                @relation("Friendship")
  sentFriendRequests      FriendRequest[]       @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]       @relation("ReceivedFriendRequests")
  organizedPromotions     Promotion[]
  gallery                 GalleryItem[]
  careerHistory           CareerHistoryItem[]
  coachProfile            CoachProfile?
  coaching                User[]                @relation("CoachStudents")
  coach                   User?                 @relation("CoachStudents", fields: [coachId], references: [id])
  coachId                 String?
  judgedMatches           Match[]               @relation("JudgedMatches")
  trainingLogs            TrainingLog[]
  measurements            Measurement[]
  inventory               InventoryItem[]
  nutritionLog            FoodLogEntry[]
  sentTrainingProposals   TrainingProposal[]    @relation("SentTrainingProposals")
  receivedTrainingProposals TrainingProposal[]  @relation("ReceivedTrainingProposals")
  pollVotes               PollVote[]
  lfgCreated              LfgLobby[]            @relation("LfgCreator")
  lfgJoined               LfgLobby[]            @relation("LfgPlayers")
  playgroundsCreated      Playground[]
}

model Team {
  id                   String        @id @default(cuid())
  name                 String        @unique
  slug                 String        @unique
  game                 String
  motto                String?
  description          String?
  logo                 String?
  dataAiHint           String?
  creatorId            String
  captainId            String
  wins                 Int           @default(0)
  losses               Int           @default(0)
  draws                Int           @default(0)
  rank                 Int           @default(0)
  homePlaygroundId     String?
  seekingSponsorship   Boolean       @default(false)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  creator              User          @relation("TeamCreator", fields: [creatorId], references: [id])
  captain              User          @relation("TeamCaptain", fields: [captainId], references: [id])
  members              User[]        @relation("TeamMembers")
  tournaments          Tournament[]
  matchesAsTeam1       Match[]       @relation("Team1Matches")
  matchesAsTeam2       Match[]       @relation("Team2Matches")
  sponsors             Sponsor[]
  leagues              LeagueTeam[]
}

model Match {
  id                  String            @id @default(cuid())
  team1Id             String
  team2Id             String
  team1Score          Int?
  team2Score          Int?
  scheduledAt         DateTime
  finishedAt          DateTime?
  location            String?
  refereeName         String?
  status              MatchStatus       @default(PLANNED)
  disputeReason       String?
  disputeOpenedAt     DateTime?
  resolution          String?

  team1               Team              @relation("Team1Matches", fields: [team1Id], references: [id])
  team2               Team              @relation("Team2Matches", fields: [team2Id], references: [id])
  tournamentId        String?
  tournament          Tournament?       @relation(fields: [tournamentId], references: [id])
  leagueId            String?
  league              League?           @relation(fields: [leagueId], references: [id])
  
  refereeId           String?
  referee             User?             @relation("JudgedMatches", fields: [refereeId], references: [id])

  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model Tournament {
  id                      String        @id @default(cuid())
  name                    String
  slug                    String        @unique
  game                    String
  format                  String
  prizePool               String?
  tournamentStartDate     DateTime
  description             String?
  rules                   String?
  type                    String
  category                String
  location                String
  participantCount        Int
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  organizerId             String
  status                  TournamentStatus @default(REGISTRATION)
  bannerImage             String?
  bannerImageHint         String?

  organizer               User          @relation(fields: [organizerId], references: [id])
  teams                   Team[]
  matches                 Match[]

  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
}

model Activity {
  id          String      @id @default(cuid())
  type        ActivityType
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  metadata    Json
  timestamp   DateTime    @default(now())
}

model FriendRequest {
  id        String    @id @default(cuid())
  fromId    String
  toId      String
  status    String    @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  from      User      @relation("SentFriendRequests", fields: [fromId], references: [id])
  to        User      @relation("ReceivedFriendRequests", fields: [toId], references: [id])

  @@unique([fromId, toId])
}

model GalleryItem {
  id          String @id @default(cuid())
  userId      String
  src         String
  alt         String
  dataAiHint  String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model CareerHistoryItem {
  id          String @id @default(cuid())
  userId      String
  teamName    String
  period      String
  role        String
  review      String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model CoachProfile {
  id              String      @id @default(cuid())
  userId          String      @unique
  specialization  String
  description     String
  tags            String[]
  rating          Float       @default(0)
  price           Decimal     @default(0)
  user            User        @relation(fields: [userId], references: [id])
}

model Sponsor {
  id              String      @id @default(cuid())
  name            String
  logo            String?
  logoHint        String?
  description     String
  profileUrl      String
  interests       String[]
  teams           Team[]
  promotions      Promotion[]
}

model Promotion {
    id              String      @id @default(cuid())
    name            String
    description     String
    prize           String
    cost            String
    imageDataUri    String
    imageHint       String
    organizerId     String
    sponsorId       String?
    endDate         DateTime
    createdAt       DateTime    @default(now())

    organizer       User        @relation(fields: [organizerId], references: [id])
    sponsor         Sponsor?    @relation(fields: [sponsorId], references: [id])
}

model Challenge {
  id            String          @id @default(cuid())
  title         String
  description   String
  discipline    String
  wager         Int
  creatorId     String
  opponentId    String?
  status        ChallengeStatus
  result        String?
  createdAt     DateTime        @default(now())

  creator       User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  opponent      User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
}

model Chat {
  id              String    @id @default(cuid())
  name            String?
  type            ChatType
  participants    User[]
  messages        Message[]
  createdAt       DateTime  @default(now())
}

model Message {
  id        String   @id @default(cuid())
  text      String
  authorId  String
  chatId    String
  createdAt DateTime @default(now())

  author    User     @relation(fields: [authorId], references: [id])
  chat      Chat     @relation(fields: [chatId], references: [id])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  type        String // FRIEND_REQUEST, MATCH_RESULT, etc.
  message     String
  isRead      Boolean  @default(false)
  href        String?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
}

model StoreItem {
    id              String      @id @default(cuid())
    name            String
    description     String
    price           Float
    image           String?
    imageHint       String?
    category        String
    isRealMoney     Boolean     @default(false)
}

model Exercise {
    id                  String              @id @default(cuid())
    name                String              @unique
    description         String
    category            String
    equipment           String
    image               String?
    imageHint           String?
    techniqueTips       String[]
    commonMistakes      String[]
    alternatives        String[]
    
    loggedExercises     LoggedExercise[]
}

model TrainingProgram {
    id                  String              @id @default(cuid())
    name                String
    description         String
    goal                String
    daysPerWeek         Int
    splitType           String
    author              String
    coverImage          String?
    coverImageHint      String?
    isAiGenerated       Boolean             @default(false)
    
    weeklySplit         WorkoutDay[]
}

model WorkoutDay {
    id                  String              @id @default(cuid())
    day                 Int
    title               String
    trainingProgramId   String
    
    program             TrainingProgram     @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
    exercises           ExerciseDetail[]
}

model ExerciseDetail {
    id                      String      @id @default(cuid())
    name                    String
    sets                    String
    reps                    String
    plannedWeight           String?
    isSupersetWithPrevious  Boolean?
    technique               String?
    workoutDayId            String

    workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
}

model TrainingLog {
  id              String            @id @default(cuid())
  userId          String
  date            DateTime
  workoutName     String
  status          String
  mood            String?
  notes           String?
  coachNotes      String?

  user            User              @relation(fields: [userId], references: [id])
  exercises       LoggedExercise[]
}

model LoggedExercise {
    id              String        @id @default(cuid())
    trainingLogId   String
    exerciseId      String
    notes           String?
    
    trainingLog     TrainingLog   @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
    exercise        Exercise      @relation(fields: [exerciseId], references: [id])
    sets            LoggedSet[]
}

model LoggedSet {
    id                  String          @id @default(cuid())
    loggedExerciseId    String
    plannedReps         String?
    plannedWeight       String?
    loggedReps          Int?
    loggedWeight        Float?
    rpe                 Int?
    isCompleted         Boolean         @default(false)

    loggedExercise      LoggedExercise  @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
}

model League {
    id              String          @id @default(cuid())
    name            String
    description     String
    game            String
    image           String?
    imageHint       String?
    teams           LeagueTeam[]
    matches         Match[]
}

model LeagueTeam {
    id          String  @id @default(cuid())
    leagueId    String
    teamId      String
    played      Int
    wins        Int
    losses      Int
    draws       Int
    points      Int

    league      League  @relation(fields: [leagueId], references: [id])
    team        Team    @relation(fields: [teamId], references: [id])
}

model Sport {
    id          String @id
    name        String @unique
    icon        String
    category    String
}

model Playground {
    id                  String      @id @default(cuid())
    name                String
    address             String
    type                String
    coverImage          String?
    coverImageHint      String?
    surface             String
    features            String[]
    rating              Float
    checkIns            Int
    status              PlaygroundStatus
    creatorId           String
    
    creator             User        @relation(fields: [creatorId], references: [id])
    lfgLobbies          LfgLobby[]
}

model LfgLobby {
    id              String          @id @default(cuid())
    type            LfgLobbyType
    sport           String
    location        String
    playgroundId    String?
    startTime       DateTime
    endTime         DateTime
    playersNeeded   Int
    comment         String
    creatorId       String
    
    playground      Playground?     @relation(fields: [playgroundId], references: [id])
    creator         User            @relation("LfgCreator", fields: [creatorId], references: [id])
    players         User[]          @relation("LfgPlayers")
}

model Measurement {
    id          String      @id @default(cuid())
    date        DateTime
    weight      Float
    bodyFat     Float?
    chest       Float?
    waist       Float?
    hips        Float?
    biceps      Float?
    thigh       Float?
    
    userId      String
    user        User        @relation(fields: [userId], references: [id])
}

model FoodItem {
    id          String      @id @default(cuid())
    name        String      @unique
    category    String
    image       String?
    imageHint   String?
    calories    Int
    protein     Int
    fat         Int
    carbs       Int
    description String?
    
    logEntries  FoodLogEntry[]
}

model FoodLogEntry {
    id          String      @id @default(cuid())
    userId      String
    foodItemId  String
    grams       Int
    meal        String // Завтрак, Обед, Ужин, Перекус
    createdAt   DateTime    @default(now())

    user        User        @relation(fields: [userId], references: [id])
    foodItem    FoodItem    @relation(fields: [foodItemId], references: [id])
}

model InventoryItem {
    id              String      @id @default(cuid())
    userId          String
    name            String
    category        String
    type            String
    purchaseDate    DateTime
    lifespanMonths  Int
    image           String?
    imageHint       String?
    createdAt       DateTime    @default(now())

    user            User        @relation(fields: [userId], references: [id])
}

model TrainingProposal {
    id          String      @id @default(cuid())
    fromId      String
    toId        String
    sport       String
    date        DateTime
    comment     String?
    status      String      @default("PENDING") // PENDING, ACCEPTED, DECLINED
    createdAt   DateTime    @default(now())
    
    from        User        @relation("SentTrainingProposals", fields: [fromId], references: [id])
    to          User        @relation("ReceivedTrainingProposals", fields: [toId], references: [id])
}

model Poll {
    id          String      @id @default(cuid())
    title       String
    question    String
    isActive    Boolean     @default(true)
    createdAt   DateTime    @default(now())
    
    options     PollOption[]
    votes       PollVote[]
}

model PollOption {
    id          String      @id @default(cuid())
    pollId      String
    text        String
    
    poll        Poll        @relation(fields: [pollId], references: [id])
    votes       PollVote[]
}

model PollVote {
    id              String      @id @default(cuid())
    userId          String
    pollId          String
    pollOptionId    String
    createdAt       DateTime    @default(now())
    
    user            User        @relation(fields: [userId], references: [id])
    poll            Poll        @relation(fields: [pollId], references: [id])
    pollOption      PollOption  @relation(fields: [pollOptionId], references: [id])
    
    @@unique([userId, pollId])
}

model Quest {
    id          String      @id @default(cuid())
    type        QuestType   // DAILY, WEEKLY, SPECIAL
    title       String
    description String
    reward      Int
    goal        Int         // e.g. 5 wins
    href        String      // link to complete the quest
    createdAt   DateTime    @default(now())
}

enum FaqCategory {
    GENERAL
    TEAMS
    TOURNAMENTS
}

model FaqItem {
    id          String      @id @default(cuid())
    category    FaqCategory
    question    String
    answer      String
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
}

enum ActivityType {
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
}

enum ChatType {
  DIRECT
  GROUP
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum PlaygroundStatus {
  PENDING_MODERATION
  APPROVED
  REJECTED
}

enum QuestType {
    DAILY
    WEEKLY
    SPECIAL
}
