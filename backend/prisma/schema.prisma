// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================================================================
// Enums
// ==============================================================================

enum UserRole {
  ADMIN       @map("Администратор")
  MODERATOR   @map("Модератор")
  JUDGE       @map("Судья")
  COACH       @map("Тренер")
  MANAGER     @map("Менеджер")
  ORGANIZER   @map("Организатор")
  PLAYER      @map("Игрок")
  CAPTAIN     @map("Капитан")
  SPONSOR     @map("Спонсор")
  FAN         @map("Болельщик")
}

enum UserStatus {
  ACTIVE @map("Активен")
  BANNED @map("Забанен")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
}

enum TournamentType {
  team
  individual
}

enum TournamentFormat {
  single_elimination
  round_robin
  groups
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum PlaygroundStatus {
  PENDING_MODERATION
  APPROVED
}

enum ChatType {
  DIRECT
  GROUP
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

enum TrainingLogStatus {
  COMPLETED
  PLANNED
  SKIPPED
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  TEAM_INVITE
  OTHER
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

// ==============================================================================
// Models
// ==============================================================================

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    UserRole               @default(PLAYER)
  status                  UserStatus             @default(ACTIVE)
  xp                      Int                    @default(0)
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  isVerified              Boolean                @default(false)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  friends                 User[]                 @relation("UserFriends")
  friendOf                User[]                 @relation("UserFriends")
  sentFriendRequests      FriendRequest[]        @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]        @relation("ReceivedFriendRequests")
  reportsSent             Report[]               @relation("ReportsSent")
  reportsReceived         Report[]               @relation("ReportsReceived")
  reportsResolved         Report[]               @relation("ReportsResolved")
  careerHistory           CareerHistory[]
  coachProfile            CoachProfile?
  sponsorships            Sponsorship[]
  sponsorshipOffers       SponsorshipOffer[]
  measurements            Measurement[]
  trainingProposalsSent   TrainingProposal[]     @relation("ProposalsSent")
  trainingProposalsRcvd   TrainingProposal[]     @relation("ProposalsReceived")
  pollsVoted              PollVote[]
  createdPlaygrounds      Playground[]
  playgroundReviews       PlaygroundReview[]
  playgroundReports       PlaygroundReport[]     @relation("PlaygroundReportsSent")
  organizedTournaments    Tournament[]           @relation("OrganizedTournaments")
  judgedTournaments       Tournament[]           @relation("JudgedTournaments")
  refereedMatches         Match[]                @relation("RefereeMatches")
  trainingLogs            TrainingLog[]
  notifications           Notification[]
  sentAnnouncements       TournamentAnnouncement[]
  teamsAsCaptain          Team[]                 @relation("TeamCaptains")
  teamsAsMember           Team[]                 @relation("TeamMembers")
  teamApplications        TeamApplication[]
  activities              Activity[]
  inventory               InventoryItem[]
  foodLog                 FoodLogEntry[]
  coaching                User[]                 @relation("CoachStudents")
  coach                   User?                  @relation("CoachStudents", fields: [coachId], references: [id])
  coachId                 String?
  chats                   Chat[]                 @relation("UserChats")
  messages                Message[]
  achievements            UserAchievement[]
  userTrainingPrograms    UserTrainingProgram[]
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@unique([fromId, toId])
}

model Team {
  id                 String             @id @default(cuid())
  name               String
  slug               String             @unique
  motto              String?
  logo               String?
  dataAiHint         String?
  game               String
  rank               Int                @default(1)
  wins               Int                @default(0)
  losses             Int                @default(0)
  draws              Int                @default(0)
  seekingSponsorship Boolean            @default(false)
  pitch              String?
  creator            User               @relation(fields: [creatorId], references: [id])
  creatorId          String
  captain            User               @relation("TeamCaptains", fields: [captainId], references: [id])
  captainId          String
  members            User[]             @relation("TeamMembers")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]            @relation("Team1Matches")
  matchesAsTeam2     Match[]            @relation("Team2Matches")
  chat               Chat?
  practices          TeamPractice[]
  leagueTeams        LeagueTeam[]
  homePlayground     Playground?        @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?
  matchEvents        MatchEvent[]
  sponsorships       Sponsorship[]      @relation("SponsoredTeams")
  sponsorshipOffers  SponsorshipOffer[]
  applications       TeamApplication[]
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String?
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int    @default(0)
  wins     Int    @default(0)
  draws    Int    @default(0)
  losses   Int    @default(0)
  points   Int    @default(0)

  @@unique([leagueId, teamId])
}


model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  description           String?
  game                  String
  type                  TournamentType
  format                TournamentFormat
  category              String
  location              String
  participantCount      Int
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  status                TournamentStatus
  organizer             User                     @relation("OrganizedTournaments", fields: [organizerId], references: [id])
  organizerId           String
  matches               Match[]
  judges                User[]                   @relation("JudgedTournaments")
  sponsors              Sponsor[]                @relation("SponsoredTournaments")
  medicalPartners       MedicalPartner[]
  teams                 Team[]
  applications          TeamApplication[]
  announcements         TournamentAnnouncement[]
  media                 TournamentMedia[]
}

model TournamentMedia {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type         MediaType
  src          String
  description  String?
  hint         String?
  createdAt    DateTime   @default(now())
}

model Match {
  id              String        @id @default(cuid())
  team1           Team          @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team          @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  scheduledAt     DateTime
  finishedAt      DateTime?
  status          MatchStatus
  tournamentId    String?
  tournament      Tournament?   @relation(fields: [tournamentId], references: [id])
  leagueId        String?
  league          League?       @relation(fields: [leagueId], references: [id])
  referee         User?         @relation("RefereeMatches", fields: [refereeId], references: [id])
  refereeId       String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  playgroundId    String?
  playground      Playground?   @relation(fields: [playgroundId], references: [id])
  location        String?
  events          MatchEvent[]
  notifications   Notification[]
  round           Int?
}

model MatchEvent {
  id        String         @id @default(cuid())
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  timestamp DateTime
  type      MatchEventType
  team      Team           @relation(fields: [teamId], references: [id])
  teamId    String
  player    User           @relation(fields: [playerId], references: [id])
  playerId  String
  metadata  Json?
}

model MedicalPartner {
  id            String       @id @default(cuid())
  name          String
  specialization String
  contact       String
  avatar        String?
  avatarHint    String?
  tournaments   Tournament[]
}

model Sponsor {
  id            String         @id @default(cuid())
  name          String         @unique
  logo          String?
  logoHint      String?
  description   String
  profileUrl    String
  interests     String[]
  tournaments   Tournament[]   @relation("SponsoredTournaments")
  teams         Team[]         @relation("SponsoredTeams")
  promotions    Promotion[]
  sponsorships  Sponsorship[]
}

model Playground {
  id               String               @id @default(cuid())
  name             String
  address          String
  type             String
  coverImage       String?
  coverImageHint   String?
  surface          String
  features         String[]
  rating           Float
  checkIns         Int
  status           PlaygroundStatus     @default(PENDING_MODERATION)
  creator          User                 @relation(fields: [creatorId], references: [id])
  creatorId        String
  residentTeams    Team[]
  reviews          PlaygroundReview[]
  reports          PlaygroundReport[]
  matches          Match[]
  practices        TeamPractice[]
  activities       Activity[]
  LfgLobby         LfgLobby[]
}

model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("ReportsSent", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  reportedUserId String
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  resolution     String?
  resolver       User?        @relation("ReportsResolved", fields: [resolverId], references: [id])
  resolverId     String?
  createdAt      DateTime     @default(now())
  resolvedAt     DateTime?
}

model TeamApplication {
  id           String                  @id @default(cuid())
  team         Team                    @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                    @relation(fields: [userId], references: [id])
  userId       String
  message      String?
  tournament   Tournament?             @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  status       TeamApplicationStatus   @default(PENDING)
  createdAt    DateTime                @default(now())
}

model Sponsorship {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId String
  amount    Decimal
  signedAt  DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]    @relation("UserChats")
  messages     Message[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime @default(now())
}

model LoggedExercise {
  id                     String      @id @default(cuid())
  trainingLog            TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId          String
  exercise               Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId             String
  notes                  String?
  isSupersetWithPrevious Boolean?    @default(false)
  sets                   LoggedSet[]
}

model Exercise {
  id              String           @id @default(cuid())
  name            String
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json
  commonMistakes  Json
  alternatives    Json
  loggedExercises LoggedExercise[]
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  status       ChallengeStatus @default(OPEN)
  wager        Int
  result       String?
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  creator      User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  opponentId   String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model UserAchievement {
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  createdAt     DateTime    @default(now())

  @@id([userId, achievementId])
}

model Achievement {
  id          String            @id @default(cuid())
  name        String            @unique
  description String
  icon        String
  users       UserAchievement[]
}

model UserTrainingProgram {
  user       User            @relation(fields: [userId], references: [id])
  userId     String
  program    TrainingProgram @relation(fields: [programId], references: [id])
  programId  String
  assignedAt DateTime        @default(now())
  isActive   Boolean         @default(true)

  @@id([userId, programId])
}

model TrainingLog {
  id          String           @id @default(cuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  workoutName String?
  status      TrainingLogStatus
  exercises   LoggedExercise[]
  mood        Mood?
  notes       String?
  coachNotes  String?
  createdAt   DateTime         @default(now())
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Int? // Rating of Perceived Exertion
  isCompleted      Boolean        @default(false)
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  author    User?        @relation(fields: [authorId], references: [id])
  authorId  String?
  votes     PollVote[]
}

model PollOption {
  id        String     @id @default(cuid())
  text      String
  poll      Poll       @relation(fields: [pollId], references: [id])
  pollId    String
  votes     PollVote[]
}

model PollVote {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@id([userId, pollId])
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

model Notification {
  id             String                  @id @default(cuid())
  user           User                    @relation(fields: [userId], references: [id])
  userId         String
  type           NotificationType
  message        String
  href           String?
  isRead         Boolean                 @default(false)
  createdAt      DateTime                @default(now())
  matchId        String?
  match          Match?                  @relation(fields: [matchId], references: [id])
  announcementId String?
  announcement   TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
}

model TournamentAnnouncement {
  id          String         @id @default(cuid())
  tournament  Tournament     @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender      User           @relation(fields: [senderId], references: [id])
  senderId    String
  subject     String
  message     String
  sentTo      Int
  createdAt   DateTime       @default(now())
  notifications Notification[]
}

model Activity {
  id           String      @id @default(cuid())
  type         ActivityType
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime    @default(now())
  metadata     Json
  playground   Playground? @relation(fields: [playgroundId], references: [id])
  playgroundId String?
}

model TrainingProgram {
  id             String                @id @default(cuid())
  name           String
  description    String
  goal           String // e.g., 'Набор массы'
  daysPerWeek    Int
  splitType      String // e.g., 'Split', 'Full-body'
  author         String
  coverImage     String?
  coverImageHint String?
  isAiGenerated  Boolean               @default(false)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  assignedTo     UserTrainingProgram[]
  proposals      TrainingProposal[]
  weeklySplit    WorkoutDay[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                     String   @id @default(cuid())
  workoutDay             WorkoutDay @relation(fields: [workoutDayId], references: [id])
  workoutDayId           String
  name                   String
  sets                   String
  reps                   String
  plannedWeight          String?
  isSupersetWithPrevious Boolean? @default(false)
  technique              String?
}

model CareerHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model SponsorshipOffer {
  id           String             @id @default(cuid())
  team         Team               @relation(fields: [teamId], references: [id])
  teamId       String
  sponsor      Sponsor            @relation(fields: [sponsorId], references: [id])
  sponsorId    String
  offerText    String
  status       FriendRequestStatus @default(PENDING) // Reusing enum for simplicity
  sentBy       User               @relation(fields: [sentById], references: [id])
  sentById     String
  createdAt    DateTime           @default(now())
}

model Measurement {
    id        String    @id @default(cuid())
    user      User      @relation(fields: [userId], references: [id])
    userId    String
    date      DateTime
    weight    Float
    bodyFat   Float?
    chest     Float?
    waist     Float?
    hips      Float?
    biceps    Float?
    thigh     Float?
    createdAt DateTime  @default(now())
}

model PollVote {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@id([userId, pollId])
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String           @id @default(cuid())
  playground   Playground       @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User             @relation("PlaygroundReportsSent", fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus     @default(PENDING)
  createdAt    DateTime         @default(now())
}

model Promotion {
    id String @id @default(cuid())
    name String
    description String
    prize String
    cost String
    imageDataUri String
    imageHint String
    endDate DateTime
    organizer User @relation(fields: [organizerId], references: [id])
    organizerId String
    sponsor Sponsor? @relation(fields: [sponsorId], references: [id])
    sponsorId String?
    createdAt DateTime @default(now())
}

model InventoryItem {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    name String
    category String
    type String
    purchaseDate DateTime
    lifespanMonths Int
    image String?
    imageHint String?
    createdAt DateTime @default(now())
}

model FoodItem {
    id String @id @default(cuid())
    name String @unique
    category String
    image String?
    imageHint String?
    calories Float
    protein Float
    fat Float
    carbs Float
    description String?
    logEntries FoodLogEntry[]
}

model FoodLogEntry {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    foodItem FoodItem @relation(fields: [foodItemId], references: [id])
    foodItemId String
    grams Int
    meal String
    createdAt DateTime @default(now())
}

model TrainingProposal {
  id        String                 @id @default(cuid())
  from      User                   @relation("ProposalsSent", fields: [fromId], references: [id])
  fromId    String
  to        User                   @relation("ProposalsReceived", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  comment   String?
  status    TrainingProposalStatus @default(PENDING)
  program   TrainingProgram?       @relation(fields: [programId], references: [id])
  programId String?
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
}
