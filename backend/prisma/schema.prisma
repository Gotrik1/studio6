// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================================================================
// Enums
// ==============================================================================

enum Role {
  Игрок
  Капитан
  Тренер
  Организатор
  Судья
  Менеджер
  Болельщик
  Модератор
  Администратор
}

enum UserStatus {
  Активен
  Забанен
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  SHOT
  SHOT_ON_TARGET
  CORNER
  FOUL
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

enum ChatType {
  DIRECT
  GROUP
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum PlaygroundStatus {
  PENDING_MODERATION
  APPROVED
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

// ==============================================================================
// Models
// ==============================================================================

model User {
  id                        String                   @id @default(cuid())
  email                     String                   @unique
  name                      String
  passwordHash              String
  role                      Role                     @default(Игрок)
  status                    UserStatus               @default(Активен)
  xp                        Int                      @default(0)
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  dateOfBirth               DateTime?
  location                  String?
  mainSport                 String?
  preferredSports           String[]
  telegram                  String?
  discord                   String?
  isVerified                Boolean                  @default(false)
  avatar                    String?
  bannerImage               String?
  friends                   User[]                   @relation("UserFriends")
  friendOf                  User[]                   @relation("UserFriends")
  sentFriendRequests        FriendRequest[]          @relation("SentFriendRequests")
  receivedFriendRequests    FriendRequest[]          @relation("ReceivedFriendRequests")
  teamsAsCaptain            Team[]                   @relation("CaptainTeams")
  teamsAsMember             Team[]                   @relation("TeamMembers")
  teamsAsCreator            Team[]                   @relation("CreatorTeams")
  organizedTournaments      Tournament[]             @relation("OrganizedTournaments")
  judgedMatches             Match[]                  @relation("JudgedMatches")
  judgedTournaments         Tournament[]             @relation("JudgedTournaments")
  createdChallenges         Challenge[]              @relation("ChallengesCreated")
  takenChallenges           Challenge[]              @relation("ChallengesTaken")
  authoredPolls             Poll[]                   @relation("PollsAuthored")
  pollVotes                 PollVote[]
  refereeMatches            Match[]                  @relation("RefereeMatches")
  createdLfgLobbies         LfgLobby[]               @relation("CreatedLobbies")
  joinedLfgLobbies          LfgLobby[]               @relation("LobbiesJoined")
  createdPlaygrounds        Playground[]             @relation("CreatedPlaygrounds")
  authoredReviews           PlaygroundReview[]
  filedPlaygroundReports    PlaygroundReport[]
  authoredTeamApplications  TeamApplication[]
  sentTrainingProposals     TrainingProposal[]       @relation("SentTrainingProposals")
  receivedTrainingProposals TrainingProposal[]       @relation("ReceivedTrainingProposals")
  organizedPromotions       Promotion[]
  authoredMessages          Message[]
  userAchievements          UserAchievement[]
  chats                     Chat[]
  careerHistory             CareerHistory[]
  trainingLogs              TrainingLog[]
  assignedTrainingPrograms  UserTrainingProgram[]
  coachProfile              CoachProfile?
  coaching                  User[]                   @relation("CoachStudents")
  coach                     User?                    @relation("CoachStudents", fields: [coachId], references: [id])
  coachId                   String?
  reportsMade               Report[]                 @relation("ReportsMade")
  reportsAgainst            Report[]                 @relation("ReportsAgainst")
  resolverOfReports         Report[]                 @relation("ReportsResolved")
  sponsorships              Sponsorship[]
  sponsorshipOffers         SponsorshipOffer[]
  inventoryItems            InventoryItem[]
  foodLogEntries            FoodLogEntry[]
  measurements              Measurement[]
  sentAnnouncements         TournamentAnnouncement[]
  notifications             Notification[]
  matchEvents               MatchEvent[]
  activities                Activity[]
}

model Team {
  id                   String                @id @default(cuid())
  name                 String
  motto                String?
  logo                 String?
  dataAiHint           String?
  game                 String
  rank                 Int                   @default(1)
  wins                 Int                   @default(0)
  losses               Int                   @default(0)
  draws                Int                   @default(0)
  captain              User                  @relation("CaptainTeams", fields: [captainId], references: [id])
  captainId            String
  members              User[]                @relation("TeamMembers")
  tournaments          Tournament[]
  matchesAsTeam1       Match[]               @relation("Team1Matches")
  matchesAsTeam2       Match[]               @relation("Team2Matches")
  creator              User                  @relation("CreatorTeams", fields: [creatorId], references: [id])
  creatorId            String
  slug                 String                @unique
  homePlayground       Playground?           @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId     String?
  chat                 Chat?
  sponsorships         Sponsorship[]
  sponsorshipOffers    SponsorshipOffer[]
  teamApplications     TeamApplication[]
  leagueTeams          LeagueTeam[]
  teamPractices        TeamPractice[]
  matchEvents          MatchEvent[]
  seekingSponsorship   Boolean               @default(false)
  pitch                String?               @db.Text
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  game                    String
  description             String?
  status                  String                   @default("PLANNED")
  type                    String
  format                  String
  prizePool               String?
  teams                   Team[]
  matches                 Match[]
  organizer               User                     @relation("OrganizedTournaments", fields: [organizerId], references: [id])
  organizerId             String
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  participantCount        Int
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  slug                    String                   @unique
  location                String?
  category                String?
  judges                  User[]                   @relation("JudgedTournaments")
  sponsors                Sponsor[]
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  media                   TournamentMedia[]
  applications            TeamApplication[]
  league                  League?                  @relation(fields: [leagueId], references: [id])
  leagueId                String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
}

model TournamentMedia {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId String
  type         MediaType
  src          String
  description  String?
  hint         String?
  createdAt    DateTime   @default(now())
}

model Match {
  id                 String        @id @default(cuid())
  team1              Team          @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id            String
  team2              Team          @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id            String
  team1Score         Int?
  team2Score         Int?
  status             MatchStatus
  scheduledAt        DateTime
  finishedAt         DateTime?
  tournament         Tournament?   @relation(fields: [tournamentId], references: [id])
  tournamentId       String?
  events             MatchEvent[]
  round              Int?
  referee            User?         @relation("RefereeMatches", fields: [refereeId], references: [id])
  refereeId          String?
  refereeName        String? // Denormalized for convenience
  disputeReason      String?
  disputeOpenedAt    DateTime?
  resolution         String?
  playgroundId       String?
  location           String?
  chat               Chat?
  league             League?       @relation(fields: [leagueId], references: [id])
  leagueId           String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  notifications      Notification[]
  judges             User[]        @relation("JudgedMatches")
}

model MatchEvent {
  id        String         @id @default(cuid())
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  type      MatchEventType
  timestamp DateTime       @default(now())
  player    User?          @relation(fields: [playerId], references: [id])
  playerId  String?
  team      Team?          @relation(fields: [teamId], references: [id])
  teamId    String?
  metadata  Json?
}

model CoachProfile {
  id             String  @id @default(cuid())
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String  @unique
  specialization String
  description    String  @db.Text
  tags           String[]
  experience     String
  rating         Float   @default(0)
  price          Decimal @default(0)
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@unique([fromId, toId])
}

model TeamPractice {
  id           String      @id @default(cuid())
  team         Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground  @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  playgroundId String
  createdAt    DateTime    @default(now())
}

model Playground {
  id                String             @id @default(cuid())
  name              String
  address           String
  type              String
  coverImage        String?
  coverImageHint    String?
  surface           String
  features          String[]
  rating            Float              @default(0)
  status            PlaygroundStatus   @default(PENDING_MODERATION)
  checkIns          Int                @default(0)
  creator           User               @relation("CreatedPlaygrounds", fields: [creatorId], references: [id])
  creatorId         String
  reviews           PlaygroundReview[]
  reports           PlaygroundReport[]
  activities        Activity[]
  teamPractices     TeamPractice[]
  homeForTeams      Team[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  LfgLobby          LfgLobby[]
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String         @id @default(cuid())
  playground   Playground     @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  playgroundId String
  reporter     User           @relation(fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus   @default(PENDING)
  createdAt    DateTime       @default(now())
}

model LfgLobby {
  id           String         @id @default(cuid())
  type         LfgLobbyType
  sport        String
  location     String
  playground   Playground?    @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  comment      String
  status       LfgLobbyStatus @default(OPEN)
  creator      User           @relation("CreatedLobbies", fields: [creatorId], references: [id])
  creatorId    String
  players      User[]         @relation("LobbiesJoined")
  createdAt    DateTime       @default(now())
}

model Promotion {
  id            String    @id @default(cuid())
  name          String
  description   String    @db.Text
  prize         String
  cost          String
  imageDataUri  String    @db.Text
  imageHint     String?
  organizer     User      @relation(fields: [organizerId], references: [id])
  organizerId   String
  sponsor       Sponsor?  @relation(fields: [sponsorId], references: [id])
  sponsorId     String?
  endDate       DateTime
  createdAt     DateTime  @default(now())
}

model Sponsor {
  id                String             @id @default(cuid())
  name              String             @unique
  logo              String?
  logoHint          String?
  description       String
  profileUrl        String
  interests         String[]
  promotions        Promotion[]
  teams             Team[]
  sponsorships      Sponsorship[]
  sponsorshipOffers SponsorshipOffer[]
}

model SponsorshipOffer {
  id         String   @id @default(cuid())
  team       Team     @relation(fields: [teamId], references: [id])
  teamId     String
  sponsor    Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId  String
  offerText  String
  status     String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt  DateTime @default(now())
}

model LeagueTeam {
  leagueId String
  teamId   String
  league   League @relation(fields: [leagueId], references: [id])
  team     Team   @relation(fields: [teamId], references: [id])
  played   Int
  wins     Int
  draws    Int
  losses   Int
  points   Int

  @@id([leagueId, teamId])
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model UserTrainingProgram {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  program   TrainingProgram @relation(fields: [programId], references: [id])
  programId String
  assignedAt DateTime @default(now())
  isActive   Boolean  @default(true)

  @@unique([userId, programId])
}

model Chat {
  id           String      @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]
  messages     Message[]
  team         Team?       @relation(fields: [teamId], references: [id])
  teamId       String?     @unique
  match        Match?      @relation(fields: [matchId], references: [id])
  matchId      String?     @unique
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}

model UserAchievement {
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id])
  achievement Achievement @relation(fields: [achievementId], references: [id])

  @@id([userId, achievementId])
}

model Achievement {
  id          String            @id @default(cuid())
  name        String            @unique
  description String
  icon        String
  users       UserAchievement[]
}

model Notification {
  id             String          @id @default(cuid())
  user           User            @relation(fields: [userId], references: [id])
  userId         String
  type           String
  message        String
  href           String?
  isRead         Boolean         @default(false)
  createdAt      DateTime        @default(now())
  match          Match?          @relation(fields: [matchId], references: [id])
  matchId        String?
  announcement   TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
  announcementId String?
}

model CareerHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model Report {
  id               String       @id @default(cuid())
  reporter         User         @relation("ReportsMade", fields: [reporterId], references: [id])
  reporterId       String
  reportedUser     User         @relation("ReportsAgainst", fields: [reportedUserId], references: [id])
  reportedUserId   String
  category         String
  description      String?
  status           ReportStatus @default(PENDING)
  resolver         User?        @relation("ReportsResolved", fields: [resolverId], references: [id])
  resolverId       String?
  resolution       String?
  createdAt        DateTime     @default(now())
  resolvedAt       DateTime?
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  createdAt    DateTime              @default(now())
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  status       ChallengeStatus @default(OPEN)
  creator      User            @relation("ChallengesCreated", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("ChallengesTaken", fields: [opponentId], references: [id])
  opponentId   String?
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  result       String?
  createdAt    DateTime        @default(now())
}

model Sport {
  id        String      @id @unique
  name      String      @unique
  icon      String
  category  String
  Challenge Challenge[]
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}

model Sponsorship {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId String
  amount    Decimal
  signedAt  DateTime @default(now())
}

model TrainingProgram {
  id            String                  @id @default(cuid())
  name          String
  description   String
  goal          String // "Набор массы", "Снижение веса", "Рельеф", "Сила"
  daysPerWeek   Int
  splitType     String // "Full-body", "Split", "Upper/Lower"
  author        String
  isAiGenerated Boolean                 @default(false)
  coverImage    String?
  coverImageHint String?
  weeklySplit   WorkoutDay[]
  assignments   UserTrainingProgram[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
  trainingProgramId String
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model TrainingLog {
  id         String            @id @default(cuid())
  user       User              @relation(fields: [userId], references: [id])
  userId     String
  date       DateTime
  workoutName String?
  status     TrainingLogStatus @default(PLANNED)
  mood       Mood?
  notes      String?
  coachNotes String?
  exercises  LoggedExercise[]
}

model LoggedExercise {
  id                   String        @id @default(cuid())
  trainingLog          TrainingLog   @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
  trainingLogId        String
  exercise             Exercise      @relation(fields: [exerciseId], references: [id])
  exerciseId           String
  isSupersetWithPrevious Boolean?
  notes                String?
  sets                 LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Int?
  isCompleted      Boolean        @default(false)
}

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  logged         LoggedExercise[]
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model StoreItem {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean  @default(false)
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model FoodItem {
  id          String        @id @default(cuid())
  name        String        @unique
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String
  createdAt  DateTime @default(now())
}

model Measurement {
  id      String   @id @default(cuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

model TrainingProposal {
  id        String                 @id @default(cuid())
  from      User                   @relation("SentTrainingProposals", fields: [fromId], references: [id])
  fromId    String
  to        User                   @relation("ReceivedTrainingProposals", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  comment   String?
  status    TrainingProposalStatus @default(PENDING)
  program   TrainingProgram?       @relation(fields: [programId], references: [id])
  programId String?
  createdAt DateTime               @default(now())
}

model Quest {
  id          String    @id @default(cuid())
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  type        QuestType
  createdAt   DateTime  @default(now())
}

model Poll {
  id        String     @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  votes     PollVote[]
  author    User?      @relation("PollsAuthored", fields: [authorId], references: [id])
  authorId  String?
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
}

model PollOption {
  id     String     @id @default(cuid())
  poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String
  text   String
  votes  PollVote[]
}

model PollVote {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@id([userId, pollId])
}

model TournamentAnnouncement {
  id           String      @id @default(cuid())
  tournament   Tournament  @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User        @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime    @default(now())
  notifications Notification[]
}

model Activity {
  id           String      @id @default(cuid())
  type         ActivityType
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  playground   Playground? @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  metadata     Json
  createdAt    DateTime    @default(now())
}
