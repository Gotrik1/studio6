// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String        @id @default(cuid())
  email                   String        @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    String        @default("Игрок")
  status                  String        @default("Активен")
  xp                      Int           @default(0)
  location                String?
  mainSport               String?
  preferredSports         String[]
  dateOfBirth             DateTime?
  telegram                String?
  discord                 String?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  teamsAsCaptain          Team[]        @relation("Captain")
  teamsAsCreator          Team[]        @relation("Creator")
  teamsAsMember           Team[]        @relation("Members")
  organizedTournaments    Tournament[]
  organizedPromotions     Promotion[]
  gallery                 GalleryItem[]
  careerHistory           CareerHistoryItem[]
  activities              Activity[]
  notifications           Notification[]
  createdChallenges       Challenge[]   @relation("CreatorChallenges")
  acceptedChallenges      Challenge[]   @relation("OpponentChallenges")
  friends                 User[]        @relation("Friends")
  friendOf                User[]        @relation("Friends")
  sentFriendRequests      FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[] @relation("ReceivedFriendRequests")
  createdPlaygrounds      Playground[]
  coachProfile            CoachProfile?
  coaching                User[]        @relation("CoachStudents")
  coach                   User?         @relation("CoachStudents", fields: [coachId], references: [id])
  coachId                 String?
  judgedMatches           Match[]       @relation("RefereeMatches")
  createdLfgLobbies LfgLobby[] @relation("CreatedLobbies")
  lfgLobbies        LfgLobby[] @relation("LobbyPlayers")

  @@index([coachId])
}

model Team {
  id                 String  @id @default(cuid())
  name               String  @unique
  slug               String  @unique
  game               String
  motto              String?
  description        String?
  logo               String?
  dataAiHint         String?
  homePlaygroundId   String?
  seekingSponsorship Boolean @default(true)
  wins               Int     @default(0)
  losses             Int     @default(0)
  draws              Int     @default(0)
  rank               Int     @default(100)

  creator   User   @relation("Creator", fields: [creatorId], references: [id])
  creatorId String

  captain   User   @relation("Captain", fields: [captainId], references: [id])
  captainId String

  members     User[]       @relation("Members")
  tournaments Tournament[]
  sponsors    Sponsor[]

  matchesAsTeam1 Match[] @relation("Team1Matches")
  matchesAsTeam2 Match[] @relation("Team2Matches")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([creatorId])
  @@index([captainId])
}

model Match {
  id           String      @id @default(cuid())
  team1        Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id      String
  team2        Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id      String
  team1Score   Int?
  team2Score   Int?
  status       MatchStatus
  scheduledAt  DateTime
  finishedAt   DateTime?
  location     String?
  refereeName  String?
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  league       League?     @relation(fields: [leagueId], references: [id])
  leagueId     String?
  referee      User?       @relation("RefereeMatches", fields: [refereeId], references: [id])
  refereeId    String?

  @@index([team1Id])
  @@index([team2Id])
  @@index([tournamentId])
  @@index([leagueId])
  @@index([refereeId])
}

model Tournament {
  id                    String    @id @default(cuid())
  name                  String
  slug                  String    @unique
  game                  String
  description           String?
  type                  String    @default("team") // 'team' or 'individual'
  format                String    @default("single_elimination") // 'single_elimination', 'round_robin', 'groups'
  status                String    @default("REGISTRATION") // 'REGISTRATION', 'ONGOING', 'FINISHED'
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  organizer             User      @relation(fields: [organizerId], references: [id])
  organizerId           String
  teams                 Team[]
  matches               Match[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizerId])
}

model GalleryItem {
  id         String   @id @default(cuid())
  src        String
  alt        String
  dataAiHint String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())

  @@index([userId])
}

model CareerHistoryItem {
  id       String @id @default(cuid())
  teamName String
  period   String
  role     String
  review   String
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  createdAt  DateTime @default(now())

  @@index([userId])
}

enum ActivityType {
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
}

model Activity {
  id        String       @id @default(cuid())
  type      ActivityType
  timestamp DateTime     @default(now())
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  metadata  Json

  @@index([userId])
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  type      String
  isRead    Boolean  @default(false)
  href      String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@index([userId])
}

model FriendRequest {
  id     String @id @default(cuid())
  from   User   @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId String
  to     User   @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId   String
  status String @default("PENDING") // PENDING, ACCEPTED, DECLINED

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fromId, toId])
  @@index([fromId])
  @@index([toId])
}

model Challenge {
  id          String          @id @default(cuid())
  title       String
  description String
  discipline  String
  wager       Int
  creator     User            @relation("CreatorChallenges", fields: [creatorId], references: [id])
  creatorId   String
  opponent    User?           @relation("OpponentChallenges", fields: [opponentId], references: [id])
  opponentId  String?
  status      ChallengeStatus
  result      String?
  createdAt   DateTime        @default(now())

  @@index([creatorId])
  @@index([opponentId])
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Playground {
  id             String    @id @default(cuid())
  name           String
  address        String
  type           String
  surface        String
  features       String[]
  coverImage     String?
  coverImageHint String?
  rating         Float
  checkIns       Int
  status         PlaygroundStatus @default(PENDING_MODERATION)
  creator        User      @relation(fields: [creatorId], references: [id])
  creatorId      String

  @@index([creatorId])
}

enum PlaygroundStatus {
    APPROVED
    PENDING_MODERATION
    REJECTED
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  rating         Float
  price          Decimal
}

model Sponsor {
  id          String   @id @default(cuid())
  name        String   @unique
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  teams       Team[]
  promotions  Promotion[]
}

model Promotion {
  id           String    @id @default(cuid())
  name         String
  description  String
  prize        String
  cost         String
  imageDataUri String
  imageHint    String
  endDate      DateTime
  organizer    User      @relation(fields: [organizerId], references: [id])
  organizerId  String
  sponsor      Sponsor?  @relation(fields: [sponsorId], references: [id])
  sponsorId    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizerId])
  @@index([sponsorId])
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int
  wins     Int
  losses   Int
  draws    Int
  points   Int

  @@index([leagueId])
  @@index([teamId])
}

model Sport {
  id       String @id
  name     String @unique
  icon     String
  category String
}

model StoreItem {
  id          String @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)
}

model Exercise {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  techniqueTips   String[]
  commonMistakes  String[]
  alternatives    String[]
  loggedExercises LoggedExercise[]
}

model TrainingProgram {
  id              String       @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean      @default(false)
  weeklySplit     WorkoutDay[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  day               Int
  title             String
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  exercises         ExerciseDetail[]

  @@index([trainingProgramId])
}

model ExerciseDetail {
  id                      String      @id @default(cuid())
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
  workoutDay              WorkoutDay? @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String?

  @@index([workoutDayId])
}

model FaqItem {
    id String @id @default(cuid())
    question String
    answer String
    category String
}

model Message {
  id String @id @default(cuid())
  text String
  chatId String
  author User @relation(fields: [authorId], references: [id])
  authorId String
  createdAt DateTime @default(now())

  @@index([authorId])
}

model TrainingLog {
  id          String           @id @default(cuid())
  date        DateTime
  workoutName String
  status      String
  mood        String?
  notes       String?
  coachNotes  String?
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  exercises   LoggedExercise[]

  @@index([userId])
}

model LoggedExercise {
  id            String      @id @default(cuid())
  trainingLog   TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId String
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  notes         String?
  sets          LoggedSet[]

  @@index([trainingLogId])
  @@index([exerciseId])
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String
  plannedWeight    String
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean        @default(false)

  @@index([loggedExerciseId])
}

model LfgLobby {
  id            String       @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  playgroundId  String?
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  creator   User   @relation("CreatedLobbies", fields: [creatorId], references: [id])
  creatorId String

  players User[] @relation("LobbyPlayers")

  @@index([creatorId])
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}
