// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                    @id @default(cuid())
  name                    String
  email                   String                    @unique
  passwordHash            String
  avatar                  String?
  role                    Role                      @default(PLAYER)
  status                  UserStatus                @default(ACTIVE)
  xp                      Int                       @default(0)
  location                String?
  mainSport               String?
  isVerified              Boolean                   @default(false)
  dateOfBirth             DateTime?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  teamsAsMember           Team[]                    @relation("TeamMembers")
  teamsAsCaptain          Team[]                    @relation("TeamCaptain")
  organizedTournaments    Tournament[]              @relation("TournamentOrganizer")
  createdChallenges       Challenge[]               @relation("ChallengeCreator")
  acceptedChallenges      Challenge[]               @relation("ChallengeOpponent")
  friends                 User[]                    @relation("Friends")
  friendOf                User[]                    @relation("Friends")
  sentFriendRequests      FriendRequest[]           @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]           @relation("ReceivedFriendRequests")
  createdLfgLobbies       LfgLobby[]
  lfgLobbies              LfgLobby[]
  playgrounds             Playground[]
  playgroundReviews       PlaygroundReview[]
  reportsMade             Report[]                  @relation("ReportsMade")
  reportsAgainst          Report[]                  @relation("ReportsAgainst")
  resolvedReports         Report[]                  @relation("ReportsResolved")
  trainingLogs            TrainingLog[]
  measurements            Measurement[]
  sentTrainingProposals   TrainingProposal[]        @relation("SentTrainingProposals")
  receivedTrainingProposals TrainingProposal[]      @relation("ReceivedTrainingProposals")
  inventory               InventoryItem[]
  foodLog                 FoodLogEntry[]
  organizedPromotions     Promotion[]
  pollVotes               PollVote[]
  judgedMatches           Match[]                   @relation("JudgedMatches")
  coachProfile            CoachProfile?
  coaching                User[]                    @relation("CoachStudent")
  coach                   User?                     @relation("CoachStudent", fields: [coachId], references: [id])
  coachId                 String?
  chats                   Chat[]
  messages                Message[]
  resolvedPlaygroundReports PlaygroundReport[]      @relation("PlaygroundReportsResolved")
  reportedPlaygroundIssues  PlaygroundReport[]      @relation("PlaygroundReportsMade")
  careerHistory           CareerHistory[]
  gallery                 GalleryItem[]
  tournamentApplications  TeamApplication[]
  teamSponsorships        TeamSponsorship[]
  tournamentJudges        Tournament[]              @relation("TournamentJudges")
  tournamentMedical       MedicalPartner[]          @relation("TournamentMedicalStaff")
  teamApplications        TeamApplication[]         @relation("TeamCaptainApplications")
}

model CoachProfile {
  id             String @id @default(cuid())
  user           User   @relation(fields: [userId], references: [id])
  userId         String @unique
  specialization String
  description    String
  tags           String[]
  rating         Float  @default(5.0)
  price          Decimal @default(0)
}

model CareerHistory {
  id       String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  teamName String
  period   String
  role     String
  review   String
  createdAt DateTime @default(now())
}

model GalleryItem {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  src        String
  alt        String
  dataAiHint String
  createdAt  DateTime @default(now())
}

model Team {
  id                 String             @id @default(cuid())
  name               String
  slug               String             @unique
  game               String
  motto              String?
  logo               String?
  dataAiHint         String?
  rank               Int                @default(1)
  wins               Int                @default(0)
  losses             Int                @default(0)
  draws              Int                @default(0)
  seekingSponsorship Boolean            @default(false)
  description        String?
  goals              String?
  homePlaygroundId   String?
  creator            User               @relation("TeamCreator", fields: [creatorId], references: [id])
  creatorId          String
  captain            User               @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId          String
  members            User[]             @relation("TeamMembers")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]            @relation("Team1Matches")
  matchesAsTeam2     Match[]            @relation("Team2Matches")
  sponsors           TeamSponsorship[]
  chat               Chat?
  teamPractices      TeamPractice[]
  applications       TeamApplication[]  @relation("TeamApplications")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  createdAt    DateTime   @default(now())
}


model TeamSponsorship {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId String
  amount    Decimal
  startDate DateTime @default(now())
  endDate   DateTime?
}

model Sponsor {
  id          String            @id @default(cuid())
  name        String
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  teams       TeamSponsorship[]
  promotions  Promotion[]
  tournaments Tournament[]      @relation("TournamentSponsors")
}

model Match {
  id              String      @id @default(cuid())
  team1           Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  tournament      Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  league          League?     @relation(fields: [leagueId], references: [id])
  leagueId        String?
  events          MatchEvent[]
  scheduledAt     DateTime    @default(now())
  startedAt       DateTime?
  finishedAt      DateTime?
  playgroundId    String?
  location        String?
  refereeName     String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  judges          User[]      @relation("JudgedMatches")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MatchEvent {
  id      String   @id @default(cuid())
  match   Match    @relation(fields: [matchId], references: [id])
  matchId String
  time    String
  event   String
  player  String
  team    String
}

model Tournament {
  id                    String                    @id @default(cuid())
  name                  String
  slug                  String                    @unique
  description           String?
  status                TournamentStatus
  game                  String
  type                  TournamentType
  format                TournamentFormat
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  organizer             User                      @relation("TournamentOrganizer", fields: [organizerId], references: [id])
  organizerId           String
  teams                 Team[]
  matches               Match[]
  announcements         TournamentAnnouncement[]
  sponsors              Sponsor[]                 @relation("TournamentSponsors")
  judges                User[]                    @relation("TournamentJudges")
  medicalPartners       MedicalPartner[]          @relation("TournamentMedicalStaff")
  media                 TournamentMedia[]
  applications          TeamApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
}

model MedicalPartner {
  id           String       @id @default(cuid())
  name         String
  specialization String
  contact      String
  avatar       String?
  avatarHint   String?
  tournaments  Tournament[] @relation("TournamentMedicalStaff")
}

model TournamentMedia {
  id          String   @id @default(cuid())
  tournament  Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type        String // IMAGE, VIDEO, AUDIO
  src         String
  description String?
  hint        String?
  createdAt   DateTime @default(now())
}

model TeamApplication {
  id           String                 @id @default(cuid())
  team         Team                   @relation("TeamApplications", fields: [teamId], references: [id])
  teamId       String
  user         User                   @relation(fields: [userId], references: [id])
  userId       String
  message      String?
  tournament   Tournament?            @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  captain      User?                  @relation("TeamCaptainApplications", fields: [captainId], references: [id])
  captainId    String?
  status       TeamApplicationStatus  @default(PENDING)
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  creator      User            @relation("ChallengeCreator", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("ChallengeOpponent", fields: [opponentId], references: [id])
  opponentId   String?
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  wager        Int             @default(0)
  status       ChallengeStatus @default(OPEN)
  result       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LfgLobby {
  id           String       @id @default(cuid())
  creator      User         @relation(fields: [creatorId], references: [id])
  creatorId    String
  type         LfgLobbyType
  sport        String
  location     String
  playgroundId String?
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  comment      String
  status       LfgLobbyStatus @default(OPEN)
  players      User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Playground {
  id           String             @id @default(cuid())
  name         String
  address      String
  type         String
  surface      String
  features     String[]
  coverImage   String?
  coverImageHint String?
  rating       Float
  checkIns     Int
  status       PlaygroundStatus   @default(PENDING_MODERATION)
  creator      User               @relation(fields: [creatorId], references: [id])
  creatorId    String
  reviews      PlaygroundReview[]
  reports      PlaygroundReport[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String         @id @default(cuid())
  playground   Playground     @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  playgroundId String
  reporter     User           @relation("PlaygroundReportsMade", fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  status       ReportStatus   @default(PENDING)
  severity     ReportSeverity
  summary      String
  resolver     User?          @relation("PlaygroundReportsResolved", fields: [resolverId], references: [id])
  resolverId   String?
  resolution   String?
  resolvedAt   DateTime?
  createdAt    DateTime       @default(now())
}

model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("ReportsMade", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportsAgainst", fields: [reportedUserId], references: [id])
  reportedUserId String
  reason         String
  context        String
  status         ReportStatus @default(PENDING)
  resolver       User?        @relation("ReportsResolved", fields: [resolverId], references: [id])
  resolverId     String?
  resolution     String?
  resolvedAt     DateTime?
  createdAt      DateTime     @default(now())
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]
  messages     Message[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime @default(now())
}

model Activity {
  id           String       @id @default(cuid())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  type         ActivityType
  metadata     Json
  playgroundId String?
  playground   Playground?  @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())

  @@index([userId])
}

model TrainingProgram {
  id              String               @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean              @default(false)
  weeklySplit     WorkoutDay[]
  trainingProposals TrainingProposal[]
}

model WorkoutDay {
  id              String           @id @default(cuid())
  trainingProgram TrainingProgram? @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String?
  day             Int
  title           String
  exercises       ExerciseDetail[]
}

model ExerciseDetail {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay? @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String?
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  String[]
  commonMistakes String[]
  alternatives   String[]
  loggedExercises LoggedExercise[]
}

model TrainingLog {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  workoutName String
  status    String // completed, planned, skipped
  mood      String? // great, good, ok, bad
  notes     String?
  coachNotes String?
  exercises LoggedExercise[]
}

model LoggedExercise {
  id            String      @id @default(cuid())
  trainingLog   TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId String
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  notes         String?
  sets          LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean        @default(false)
}

model Measurement {
  id      String   @id @default(cuid())
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  date    DateTime @default(now())

  weight  Float // kg
  bodyFat Float? // %
  chest   Float? // cm
  waist   Float? // cm
  hips    Float? // cm
  biceps  Float? // cm
  thigh   Float? // cm

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}


model TrainingProposal {
  id        String           @id @default(cuid())
  from      User             @relation("SentTrainingProposals", fields: [fromId], references: [id])
  fromId    String
  to        User             @relation("ReceivedTrainingProposals", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  program   TrainingProgram? @relation(fields: [programId], references: [id])
  programId String?
  comment   String?
  status    String           @default("PENDING") // PENDING, ACCEPTED, DECLINED

  createdAt DateTime @default(now())
}

model InventoryItem {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    name String
    category String
    type String
    purchaseDate DateTime
    lifespanMonths Int
    image String?
    imageHint String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model StoreItem {
    id String @id @default(cuid())
    name String
    description String
    price Float
    image String?
    imageHint String?
    category String
    isRealMoney Boolean @default(false)
}

model FoodItem {
    id String @id @default(cuid())
    name String @unique
    category String
    image String?
    imageHint String?
    calories Float
    protein Float
    fat Float
    carbs Float
    description String?
    logEntries FoodLogEntry[]
}

model FoodLogEntry {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    foodItem FoodItem @relation(fields: [foodItemId], references: [id])
    foodItemId String
    grams Float
    meal String
    createdAt DateTime @default(now())
}

model Promotion {
    id String @id @default(cuid())
    name String
    description String
    prize String
    cost String
    imageDataUri String
    imageHint String
    sponsor Sponsor? @relation(fields: [sponsorId], references: [id])
    sponsorId String?
    organizer User @relation(fields: [organizerId], references: [id])
    organizerId String
    endDate DateTime
    createdAt DateTime @default(now())
}

model League {
    id String @id @default(cuid())
    name String
    description String
    game String
    image String
    imageHint String
    teams LeagueTeam[]
    matches Match[]
    createdAt DateTime @default(now())
}

model LeagueTeam {
    id String @id @default(cuid())
    league League @relation(fields: [leagueId], references: [id])
    leagueId String
    team Team @relation(fields: [teamId], references: [id])
    teamId String
    played Int
    wins Int
    losses Int
    draws Int
    points Int
}

model Sport {
  id       String      @id
  name     String
  icon     String
  category String
  challenges Challenge[]
}

model FaqItem {
    id String @id @default(cuid())
    category String
    question String
    answer String
    createdAt DateTime @default(now())
}

model Quest {
    id String @id @default(cuid())
    title String
    description String
    reward Int
    goal Int
    href String
    type QuestType
    createdAt DateTime @default(now())
}

model Poll {
    id String @id @default(cuid())
    title String
    question String
    isActive Boolean @default(true)
    options PollOption[]
    votes PollVote[]
    createdAt DateTime @default(now())
}

model PollOption {
    id String @id @default(cuid())
    text String
    poll Poll @relation(fields: [pollId], references: [id])
    pollId String
    votes PollVote[]
}

model PollVote {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    poll Poll @relation(fields: [pollId], references: [id])
    pollId String
    pollOption PollOption @relation(fields: [pollOptionId], references: [id])
    pollOptionId String
    
    @@unique([userId, pollId])
}

enum Role {
  PLAYER
  CAPTAIN
  ADMIN
  MODERATOR
  JUDGE
  MANAGER
  ORGANIZER
  SPONSOR
  FAN
  COACH
}

enum UserStatus {
  ACTIVE
  BANNED
  PENDING
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
}

enum TournamentType {
  TEAM
  INDIVIDUAL
}

enum TournamentFormat {
  SINGLE_ELIMINATION
  ROUND_ROBIN
  GROUPS
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
  REJECTED
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum ReportSeverity {
  LOW
  MEDIUM
  HIGH
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum LfgLobbyStatus {
    OPEN
    FULL
    IN_PROGRESS
    FINISHED
    CANCELLED
}

enum LfgLobbyType {
    GAME
    TRAINING
}

enum FriendRequestStatus {
    PENDING
    ACCEPTED
    DECLINED
}

enum ChatType {
    PRIVATE
    GROUP
}

enum ActivityType {
    STATUS_POSTED
    MATCH_PLAYED
    TEAM_JOINED
    TOURNAMENT_REGISTERED
    ACHIEVEMENT_UNLOCKED
    PLAYGROUND_CHECK_IN
}

enum QuestType {
    DAILY
    WEEKLY
    SPECIAL
}

enum TeamApplicationStatus {
    PENDING
    APPROVED
    DECLINED
}
