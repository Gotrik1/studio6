datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   String       @id @default(cuid())
  name                 String
  email                String       @unique
  emailVerified        DateTime?    @map("email_verified")
  passwordHash         String       @map("password_hash")
  avatar               String?
  role                 String
  status               String
  xp                   Int          @default(0)
  dateOfBirth          DateTime?    @map("date_of_birth")
  location             String?
  mainSport            String?      @map("main_sport")
  preferredSports      String[]
  telegram             String?
  discord              String?
  createdAt            DateTime     @default(now()) @map("created_at")
  updatedAt            DateTime     @updatedAt @map("updated_at")
  teams                Team[]       @relation("TeamMembers")
  captainOfTeams       Team[]       @relation("Captain")
  organizedTournaments Tournament[] @relation("OrganizedTournaments")
  createdPlaygrounds   Playground[]
  createdChallenges    Challenge[]  @relation("ChallengeCreator")
  opponentInChallenges Challenge[]  @relation("ChallengeOpponent")
  activities           Activity[]
}

model Team {
  id               String       @id @default(cuid())
  name             String
  slug             String       @unique
  game             String
  motto            String?
  logo             String?
  dataAiHint       String?      @map("data_ai_hint")
  rank             Int          @default(0)
  wins             Int          @default(0)
  losses           Int          @default(0)
  draws            Int          @default(0)
  captainId        String       @map("captain_id")
  captain          User         @relation("Captain", fields: [captainId], references: [id])
  members          User[]       @relation("TeamMembers")
  tournaments      Tournament[] @relation("TournamentTeams")
  homePlaygroundId String?      @map("home_playground_id")
  homePlayground   Playground?  @relation(fields: [homePlaygroundId], references: [id])
  matchesAsTeam1   Match[]      @relation("Team1Matches")
  matchesAsTeam2   Match[]      @relation("Team2Matches")
}

model Tournament {
  id                    String    @id @default(cuid())
  name                  String
  slug                  String    @unique
  game                  String
  status                String
  format                String
  prizePool             String?   @map("prize_pool")
  tournamentStartDate   DateTime  @map("tournament_start_date")
  description           String?
  rules                 String?
  bannerImage           String?   @map("banner_image")
  bannerImageHint       String?   @map("banner_image_hint")
  type                  String
  category              String
  location              String
  participantCount      Int       @map("participant_count")
  registrationStartDate DateTime  @map("registration_start_date")
  registrationEndDate   DateTime  @map("registration_end_date")
  organizerId           String    @map("organizer_id")
  organizer             User      @relation("OrganizedTournaments", fields: [organizerId], references: [id])
  teams                 Team[]    @relation("TournamentTeams")
  matches               Match[]
}

model Match {
  id           String      @id @default(cuid())
  team1Id      String      @map("team1_id")
  team2Id      String      @map("team2_id")
  team1        Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team2        Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team1Score   Int?        @map("team1_score")
  team2Score   Int?        @map("team2_score")
  status       MatchStatus
  scheduledAt  DateTime    @map("scheduled_at")
  finishedAt   DateTime?   @map("finished_at")
  location     String?
  refereeName  String?     @map("referee_name")
  tournamentId String?     @map("tournament_id")
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Playground {
  id             String   @id @default(cuid())
  name           String
  address        String
  type           String
  coverImage     String?  @map("cover_image")
  coverImageHint String?  @map("cover_image_hint")
  surface        String
  features       String[]
  rating         Float    @default(0)
  checkIns       Int      @default(0)
  status         String // APPROVED, PENDING_MODERATION
  creatorId      String   @map("creator_id")
  creator        User     @relation(fields: [creatorId], references: [id])
  homeForTeams   Team[]
}

model Challenge {
  id          String          @id @default(cuid())
  title       String
  description String
  discipline  String
  wager       Int
  creatorId   String          @map("creator_id")
  opponentId  String?         @map("opponent_id")
  creator     User            @relation("ChallengeCreator", fields: [creatorId], references: [id])
  opponent    User?           @relation("ChallengeOpponent", fields: [opponentId], references: [id])
  status      ChallengeStatus
  result      String?
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Activity {
  id        String       @id @default(cuid())
  type      ActivityType
  userId    String       @map("user_id")
  user      User         @relation(fields: [userId], references: [id])
  timestamp DateTime     @default(now())
  metadata  Json
}

enum ActivityType {
  MATCH_PLAYED
  ACHIEVEMENT_UNLOCKED
  TRAINING_COMPLETED
  TEAM_JOINED
}
