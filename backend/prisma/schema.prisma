// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ENUMS

enum Role {
  Игрок
  Капитан
  Тренер
  Организатор
  Судья
  Менеджер
  Администратор
  Модератор
  Болельщик
  Спонсор
}

enum UserStatus {
  Активен
  Забанен
  Неподтвержден
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  TEAM_INVITE
  SYSTEM
}

enum ChatType {
  PRIVATE
  GROUP
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}


// MODELS

model User {
  id                        String                     @id @default(cuid())
  email                     String                     @unique
  name                      String
  passwordHash              String
  avatar                    String?
  role                      Role
  status                    UserStatus                 @default(Активен)
  xp                        Int                        @default(0)
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  dateOfBirth               DateTime?
  location                  String?
  mainSport                 String?
  isVerified                Boolean                    @default(false)
  preferredSports           String[]
  telegram                  String?
  discord                   String?
  // Relations
  teamsAsCaptain            Team[]                     @relation("TeamCaptain")
  createdTeams              Team[]                     @relation("TeamCreator")
  teamsAsMember             Team[]                     @relation("TeamMembers")
  organizedTournaments      Tournament[]               @relation("TournamentOrganizer")
  judgedMatches             Match[]                    @relation("RefereeMatches")
  judgedTournaments         Tournament[]               @relation("TournamentJudges")
  createdPlaygrounds        Playground[]
  playgroundReviews         PlaygroundReview[]
  sentFriendRequests        FriendRequest[]            @relation("SentFriendRequests")
  receivedFriendRequests    FriendRequest[]            @relation("ReceivedFriendRequests")
  friends                   User[]                     @relation("Friends")
  friendOf                  User[]                     @relation("Friends")
  notifications             Notification[]
  createdChallenges         Challenge[]                @relation("CreatedChallenges")
  acceptedChallenges        Challenge[]                @relation("AcceptedChallenges")
  applications              TeamApplication[]
  organizedPromotions       Promotion[]
  reportsSent               Report[]                   @relation("ReportsSent")
  reportsReceived           Report[]                   @relation("ReportsReceived")
  reportsResolved           Report[]                   @relation("ReportsResolved")
  careerHistory             CareerHistory[]
  createdLobbies            LfgLobby[]                 @relation("LobbyCreator")
  joinedLobbies             LfgLobby[]                 @relation("LobbyPlayers")
  activities                Activity[]
  trainingLogs              TrainingLog[]
  assignedPrograms          UserTrainingProgram[]
  measurements              Measurement[]
  foodLogEntries            FoodLogEntry[]
  inventory                 InventoryItem[]
  sentTrainingProposals     TrainingProposal[]         @relation("SentTrainingProposals")
  receivedTrainingProposals TrainingProposal[]         @relation("ReceivedTrainingProposals")
  pollVotes                 PollVote[]
  authoredPolls             Poll[]
  authoredMessages          Message[]
  chats                     Chat[]
  announcementsSent         TournamentAnnouncement[]
  coachProfile              CoachProfile?
  matchEvents               MatchEvent[]
}

model Team {
  id                 String               @id @default(cuid())
  name               String               @unique
  slug               String               @unique
  game               String
  motto              String?
  description        String?
  logo               String?
  dataAiHint         String?
  pitch              String?
  seekingSponsorship Boolean              @default(false)
  wins               Int                  @default(0)
  losses             Int                  @default(0)
  draws              Int                  @default(0)
  rank               Int                  @default(1)
  creatorId          String
  captainId          String
  homePlaygroundId   String?
  creator            User                 @relation("TeamCreator", fields: [creatorId], references: [id])
  captain            User                 @relation("TeamCaptain", fields: [captainId], references: [id])
  members            User[]               @relation("TeamMembers")
  homePlayground     Playground?          @relation(fields: [homePlaygroundId], references: [id])
  tournaments        Tournament[]
  matchesAsTeam1     Match[]              @relation("Team1Matches")
  matchesAsTeam2     Match[]              @relation("Team2Matches")
  matchEvents        MatchEvent[]
  applications       TeamApplication[]
  sponsorships       Sponsorship[]
  sponsorshipOffers  SponsorshipOffer[]
  practices          TeamPractice[]
  chat               Chat?
  leagueTeams        LeagueTeam[]
}

model Tournament {
  id                      String                     @id @default(cuid())
  name                    String
  slug                    String                     @unique
  description             String?
  game                    String
  type                    String
  format                  String
  status                  String
  category                String
  location                String
  participantCount        Int
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  organizerId             String
  organizer               User                       @relation("TournamentOrganizer", fields: [organizerId], references: [id])
  teams                   Team[]
  matches                 Match[]
  judges                  User[]                     @relation("TournamentJudges")
  sponsors                Sponsor[]
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  media                   TournamentMedia[]
}

model Match {
  id                String       @id @default(cuid())
  team1Id           String
  team2Id           String
  team1Score        Int?
  team2Score        Int?
  status            MatchStatus
  scheduledAt       DateTime
  finishedAt        DateTime?
  tournamentId      String?
  playgroundId      String?
  location          String?
  refereeId         String?
  round             Int?
  disputeReason     String?
  disputeOpenedAt   DateTime?
  resolution        String?
  team1             Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team2             Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  tournament        Tournament?  @relation(fields: [tournamentId], references: [id])
  playground        Playground?  @relation(fields: [playgroundId], references: [id])
  referee           User?        @relation("RefereeMatches", fields: [refereeId], references: [id])
  events            MatchEvent[]
  notifications     Notification[]
  league            League?      @relation(fields: [leagueId], references: [id])
  leagueId          String?
}

model MatchEvent {
  id        String         @id @default(cuid())
  matchId   String
  teamId    String?
  playerId  String?
  type      MatchEventType
  timestamp DateTime       @default(now())
  metadata  Json?
  match     Match          @relation(fields: [matchId], references: [id])
  team      Team?          @relation(fields: [teamId], references: [id])
  player    User?          @relation(fields: [playerId], references: [id])
}

model TeamApplication {
  id           String                @id @default(cuid())
  teamId       String
  userId       String
  tournamentId String?
  status       TeamApplicationStatus @default(PENDING)
  message      String?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  team         Team                  @relation(fields: [teamId], references: [id])
  user         User                  @relation(fields: [userId], references: [id])
}

model Activity {
  id           String       @id @default(cuid())
  type         ActivityType
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  metadata     Json
  createdAt    DateTime     @default(now())
  playgroundId String?
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
}

model Playground {
  id               String                @id @default(cuid())
  name             String
  address          String
  type             String
  surface          String
  features         String[]
  coverImage       String?
  coverImageHint   String?
  rating           Float
  checkIns         Int                   @default(0)
  status           String
  creatorId        String
  creator          User                  @relation(fields: [creatorId], references: [id])
  matches          Match[]
  checkInsActivity Activity[]
  reviews          PlaygroundReview[]
  reports          PlaygroundReport[]
  homeForTeams     Team[]
  lfgLobbies       LfgLobby[]
  practices        TeamPractice[]
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playgroundId String
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  author       User       @relation(fields: [authorId], references: [id])
}

model PlaygroundReport {
  id           String       @id @default(cuid())
  playgroundId String
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus
  createdAt    DateTime     @default(now())
  playground   Playground   @relation(fields: [playgroundId], references: [id])
  reporter     User         @relation(fields: [reporterId], references: [id])
}

model LfgLobby {
  id            String         @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  playgroundId  String?
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  status        LfgLobbyStatus @default(OPEN)
  creatorId     String
  creator       User           @relation("LobbyCreator", fields: [creatorId], references: [id])
  players       User[]         @relation("LobbyPlayers")
  playground    Playground?    @relation(fields: [playgroundId], references: [id])
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  disciplineId String
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  wager        Int
  status       ChallengeStatus
  result       String?
  creatorId    String
  opponentId   String?
  creator      User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  opponent     User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model Sport {
  id         String      @id
  name       String      @unique
  icon       String
  category   String
  challenges Challenge[]
}

model TeamPractice {
  id           String     @id @default(cuid())
  teamId       String
  playgroundId String
  title        String
  description  String?
  date         DateTime
  team         Team       @relation(fields: [teamId], references: [id])
  playground   Playground @relation(fields: [playgroundId], references: [id])
}

model Promotion {
  id           String   @id @default(cuid())
  name         String
  description  String
  prize        String
  cost         String
  imageDataUri String
  imageHint    String
  endDate      DateTime
  organizerId  String
  sponsorId    String?
  organizer    User     @relation(fields: [organizerId], references: [id])
  sponsor      Sponsor? @relation(fields: [sponsorId], references: [id])
}

model Sponsor {
  id                String             @id @default(cuid())
  name              String
  logo              String?
  logoHint          String?
  description       String
  profileUrl        String
  interests         String[]
  tournaments       Tournament[]
  promotions        Promotion[]
  sponsorships      Sponsorship[]
  sponsorshipOffers SponsorshipOffer[]
}

model Sponsorship {
  id        String   @id @default(cuid())
  teamId    String
  sponsorId String
  amount    Float
  signedAt  DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id])
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  leagueId String
  teamId   String
  played   Int
  wins     Int
  draws    Int
  losses   Int
  points   Int
  league   League @relation(fields: [leagueId], references: [id])
  team     Team   @relation(fields: [teamId], references: [id])
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}

model TrainingProposal {
  id        String          @id @default(cuid())
  fromId    String
  toId      String
  sport     String
  date      DateTime
  programId String?
  comment   String?
  status    String          @default("PENDING")
  from      User            @relation("SentTrainingProposals", fields: [fromId], references: [id])
  to        User            @relation("ReceivedTrainingProposals", fields: [toId], references: [id])
  program   TrainingProgram? @relation(fields: [programId], references: [id])
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Measurement {
  id      String    @id @default(cuid())
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
  user    User      @relation(fields: [userId], references: [id])
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model TournamentAnnouncement {
  id            String         @id @default(cuid())
  tournamentId  String
  senderId      String
  subject       String
  message       String
  sentTo        Int
  createdAt     DateTime       @default(now())
  tournament    Tournament     @relation(fields: [tournamentId], references: [id])
  sender        User           @relation(fields: [senderId], references: [id])
  notifications Notification[]
}

model Report {
  id             String       @id @default(cuid())
  reporterId     String
  reportedUserId String
  resolverId     String?
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  resolution     String?
  createdAt      DateTime     @default(now())
  resolvedAt     DateTime?
  reporter       User         @relation("ReportsSent", fields: [reporterId], references: [id])
  reportedUser   User         @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  resolver       User?        @relation("ReportsResolved", fields: [resolverId], references: [id])
}

model CareerHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model Achievement {
  id          String            @id @default(cuid())
  name        String            @unique
  description String
  icon        String
  users       UserAchievement[]
}

model UserAchievement {
  userId        String
  achievementId String
  assignedAt    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id])
  achievement   Achievement @relation(fields: [achievementId], references: [id])

  @@id([userId, achievementId])
}

model Quest {
  id          String      @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime    @default(now())
  users       UserQuest[]
}

model UserQuest {
  userId      String    @id @default(cuid())
  questId     String
  progress    Int       @default(0)
  completedAt DateTime?
  user        User      @relation(fields: [userId], references: [id])
  quest       Quest     @relation(fields: [questId], references: [id])
}

model InventoryItem {
  id             String   @id @default(cuid())
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  userId     String
  foodItemId String
  grams      Int
  meal       String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  isActive  Boolean      @default(true)
  authorId  String?
  createdAt DateTime     @default(now())
  options   PollOption[]
  votes     PollVote[]
  author    User?        @relation(fields: [authorId], references: [id])
}

model PollOption {
  id      String     @id @default(cuid())
  pollId  String
  text    String
  poll    Poll       @relation(fields: [pollId], references: [id])
  votes   PollVote[]
}

model PollVote {
  userId       String
  pollId       String
  pollOptionId String
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id])
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])

  @@id([userId, pollId])
}

model Chat {
  id           String      @id @default(cuid())
  name         String?
  type         ChatType
  createdAt    DateTime    @default(now())
  teamId       String?     @unique
  team         Team?       @relation(fields: [teamId], references: [id])
  participants User[]
  messages     Message[]
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  authorId  String
  content   String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])
}

model Notification {
  id             String                  @id @default(cuid())
  userId         String
  type           NotificationType
  message        String
  href           String?
  isRead         Boolean                 @default(false)
  createdAt      DateTime                @default(now())
  matchId        String?
  announcementId String?
  user           User                    @relation(fields: [userId], references: [id])
  match          Match?                  @relation(fields: [matchId], references: [id])
  announcement   TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
}

model TournamentMedia {
  id           String     @id @default(cuid())
  tournamentId String
  type         MediaType
  src          String
  description  String?
  hint         String?
  createdAt    DateTime   @default(now())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
}

model FriendRequest {
  id        String              @id @default(cuid())
  fromId    String
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
}

model SponsorshipOffer {
  id        String   @id @default(cuid())
  teamId    String
  sponsorId String
  offerText String
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id])
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
}

model CoachProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id])
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
}

model TrainingProgram {
  id                String                @id @default(cuid())
  name              String
  description       String?
  goal              String
  daysPerWeek       Int
  splitType         String
  author            String
  coverImage        String?
  coverImageHint    String?
  isAiGenerated     Boolean               @default(false)
  weeklySplit       WorkoutDay[]
  userAssignments   UserTrainingProgram[]
  trainingProposals TrainingProposal[]
}

model UserTrainingProgram {
  userId     String
  programId  String
  assignedAt DateTime        @default(now())
  isActive   Boolean         @default(true)
  user       User            @relation(fields: [userId], references: [id])
  program    TrainingProgram @relation(fields: [programId], references: [id])

  @@id([userId, programId])
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgramId String
  day               Int
  title             String
  program           TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                     String    @id @default(cuid())
  workoutDayId           String
  name                   String
  sets                   String
  reps                   String
  plannedWeight          String?
  isSupersetWithPrevious Boolean?
  technique              String?
  workoutDay             WorkoutDay @relation(fields: [workoutDayId], references: [id])
}

model TrainingLog {
  id        String            @id @default(cuid())
  userId    String
  date      DateTime
  workoutName String?
  status    TrainingLogStatus @default(PLANNED)
  mood      Mood?
  notes     String?
  coachNotes String?
  user      User              @relation(fields: [userId], references: [id])
  exercises LoggedExercise[]
}

model LoggedExercise {
  id                     String      @id @default(cuid())
  trainingLogId          String
  exerciseId             String
  notes                  String?
  isSupersetWithPrevious Boolean?
  trainingLog            TrainingLog @relation(fields: [trainingLogId], references: [id])
  exercise               Exercise    @relation(fields: [exerciseId], references: [id])
  sets                   LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Int?
  isCompleted      Boolean        @default(false)
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
}

model Exercise {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json
  commonMistakes  Json
  alternatives    Json
  loggedExercises LoggedExercise[]
}
