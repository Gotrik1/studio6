// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================================================================
// Enums
// ==============================================================================

enum UserRole {
  ADMINISTRATOR @map("Администратор")
  MODERATOR     @map("Модератор")
  CAPTAIN       @map("Капитан")
  PLAYER        @map("Игрок")
  COACH         @map("Тренер")
  JUDGE         @map("Судья")
  MANAGER       @map("Менеджер")
  ORGANIZER     @map("Организатор")
  SPONSOR       @map("Спонсор")
  FAN           @map("Болельщик")
}

enum UserStatus {
  ACTIVE    @map("Активен")
  BANNED    @map("Забанен")
  INACTIVE  @map("Неактивен")
}

// ==============================================================================
// User Model & Related
// ==============================================================================

model User {
  id                        String                      @id @default(cuid())
  name                      String
  email                     String                      @unique
  passwordHash              String
  avatar                    String?
  role                      UserRole                    @default(PLAYER)
  status                    UserStatus                  @default(ACTIVE)
  xp                        Int                         @default(0)
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  isVerified                Boolean                     @default(false)
  location                  String?
  dateOfBirth               DateTime?
  mainSport                 String?
  preferredSports           String[]
  telegram                  String?
  discord                   String?
  createdTeams              Team[]                      @relation("TeamCreator")
  captainOfTeams            Team[]                      @relation("TeamCaptain")
  teamsAsMember             Team[]                      @relation("TeamMembers")
  organizedTournaments      Tournament[]                @relation("TournamentOrganizer")
  createdPlaygrounds        Playground[]
  judgedMatches             Match[]                     @relation("JudgedMatches")
  createdPromotions         Promotion[]
  careerHistory             CareerHistory[]
  sponsorships              Sponsorship[]               @relation("UserSponsorships")
  sponsorshipOffers         SponsorshipOffer[]
  createdChallenges         Challenge[]                 @relation("CreatedChallenges")
  acceptedChallenges        Challenge[]                 @relation("AcceptedChallenges")
  createdLfgLobbies         LfgLobby[]                  @relation("LobbyCreator")
  lfgLobbies                LfgLobby[]                  @relation("LobbyPlayers")
  measurements              Measurement[]
  trainingProposalsSent     TrainingProposal[]          @relation("ProposalsSent")
  trainingProposalsReceived TrainingProposal[]          @relation("ProposalsReceived")
  trainingPrograms          UserTrainingProgram[]
  trainingLogs              TrainingLog[]
  foodLog                   FoodLogEntry[]
  reportsSent               Report[]                    @relation("ReportsSent")
  reportsReceived           Report[]                    @relation("ReportsReceived")
  reportsResolved           Report[]                    @relation("ReportsResolved")
  inventory                 InventoryItem[]
  chatParticipants          Chat[]                      @relation("UserChats")
  messages                  Message[]
  notifications             Notification[]
  achievements              UserAchievement[]
  pollVotes                 PollVote[]
  sentAnnouncements         TournamentAnnouncement[]
  playgroundReports         PlaygroundReport[]
  playgroundReviews         PlaygroundReview[]
  coachProfile              CoachProfile?
  matchEvents               MatchEvent[]
}

model CareerHistory {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  teamName    String
  role        String
  period      String
  review      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@unique([fromId, toId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

// ==============================================================================
// Team Model
// ==============================================================================

model Team {
  id                 String             @id @default(cuid())
  name               String
  slug               String             @unique
  motto              String?
  logo               String?
  dataAiHint         String?
  game               String
  rank               Int                @default(1)
  wins               Int                @default(0)
  losses             Int                @default(0)
  draws              Int                @default(0)
  seekingSponsorship Boolean            @default(false)
  pitch              String?
  creator            User               @relation("TeamCreator", fields: [creatorId], references: [id])
  creatorId          String
  captain            User               @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId          String
  members            User[]             @relation("TeamMembers")
  tournaments        Tournament[]
  team1Matches       Match[]            @relation("Team1Matches")
  team2Matches       Match[]            @relation("Team2Matches")
  matchEvents        MatchEvent[]
  applications       TeamApplication[]
  practices          TeamPractice[]
  sponsorships       Sponsorship[]
  sponsorshipOffers  SponsorshipOffer[]
  homePlayground     Playground?        @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?
  chat               Chat?
  leagues            LeagueTeam[]
  sponsoredBy        Sponsor[]          @relation("SponsoredTeams")
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

// ==============================================================================
// Tournament & Match Models
// ==============================================================================

model Tournament {
  id                      String                     @id @default(cuid())
  name                    String
  slug                    String                     @unique
  game                    String
  description             String?
  type                    String // "team" or "individual"
  format                  String // "single_elimination", "round_robin", "groups"
  category                String
  location                String
  participantCount        Int
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  status                  TournamentStatus           @default(REGISTRATION)
  organizer               User                       @relation("TournamentOrganizer", fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
  judges                  User[]                     @relation("JudgedTournaments")
  sponsors                Sponsor[]                  @relation("SponsoredTournaments")
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  applications            TeamApplication[]
  media                   TournamentMedia[]
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

model Match {
  id              String       @id @default(cuid())
  team1           Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  round           Int?
  tournament      Tournament?  @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  league          League?      @relation(fields: [leagueId], references: [id])
  leagueId        String?
  referee         User?        @relation("RefereeMatches", fields: [refereeId], references: [id])
  refereeId       String?
  events          MatchEvent[]
  playground      Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId    String?
  location        String?
  judges          User[]       @relation("JudgedMatches")
}

model MatchEvent {
  id        String         @id @default(cuid())
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  team      Team           @relation(fields: [teamId], references: [id])
  teamId    String
  player    User           @relation(fields: [playerId], references: [id])
  playerId  String
  type      MatchEventType
  timestamp DateTime       @default(now())
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  SHOT
  SHOT_ON_TARGET
  CORNER
  FOUL
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

// ==============================================================================
// Misc Models
// ==============================================================================

model Notification {
  id             String                  @id @default(cuid())
  user           User                    @relation(fields: [userId], references: [id])
  userId         String
  type           NotificationType
  message        String
  href           String?
  isRead         Boolean                 @default(false)
  createdAt      DateTime                @default(now())
  matchId        String?
  announcementId String?
  announcement   TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  TEAM_INVITE
  TOURNAMENT_START
}

model Sponsor {
  id                String             @id @default(cuid())
  name              String             @unique
  logo              String?
  logoHint          String?
  description       String
  profileUrl        String             @unique
  interests         String[]
  tournaments       Tournament[]       @relation("SponsoredTournaments")
  teams             Team[]             @relation("SponsoredTeams")
  promotions        Promotion[]
  sponsorships      Sponsorship[]
  sponsorshipOffers SponsorshipOffer[]
}

model Playground {
  id                String               @id @default(cuid())
  name              String
  address           String
  type              String
  coverImage        String?
  coverImageHint    String?
  surface           String
  features          String[]
  rating            Float
  checkIns          Int                  @default(0)
  status            PlaygroundStatus     @default(PENDING_MODERATION)
  creator           User                 @relation(fields: [creatorId], references: [id])
  creatorId         String
  matches           Match[]
  practices         TeamPractice[]
  reports           PlaygroundReport[]
  reviews           PlaygroundReview[]
  checkInActivities Activity[]
  LfgLobby          LfgLobby[]
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
  REJECTED
}

model PlaygroundReport {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User       @relation(fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String     @default("low")
  summary      String     @default("New report")
  status       ReportStatus @default(PENDING)
  createdAt    DateTime   @default(now())
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  creator      User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  opponentId   String?
  status       ChallengeStatus
  result       String?
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Sport {
  id        String      @id
  name      String
  icon      String
  category  String
  Challenge Challenge[]
}

model LfgLobby {
  id           String         @id @default(cuid())
  creator      User           @relation("LobbyCreator", fields: [creatorId], references: [id])
  creatorId    String
  players      User[]         @relation("LobbyPlayers")
  type         LfgLobbyType
  sport        String
  location     String
  playground   Playground?    @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  comment      String
  status       LfgLobbyStatus @default(OPEN)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]    @relation("UserChats")
  messages     Message[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum ChatType {
  DIRECT
  GROUP
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime @default(now())
}

model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("ReportsSent", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  reportedUserId String
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  resolver       User?        @relation("ReportsResolved", fields: [resolverId], references: [id])
  resolverId     String?
  resolution     String?
  createdAt      DateTime     @default(now())
  resolvedAt     DateTime?
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model Promotion {
  id           String   @id @default(cuid())
  name         String
  description  String
  prize        String
  sponsor      Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId    String?
  organizer    User     @relation(fields: [organizerId], references: [id])
  organizerId  String
  imageDataUri String
  imageHint    String
  endDate      DateTime
  cost         String
  createdAt    DateTime @default(now())
}

model Sponsorship {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId String
  amount    Float
  signedAt  DateTime @default(now())
  user      User     @relation("UserSponsorships", fields: [userId], references: [id])
  userId    String
}

model SponsorshipOffer {
  id        String                @id @default(cuid())
  team      Team                  @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor               @relation(fields: [sponsorId], references: [id])
  sponsorId String
  offerText String
  status    TeamApplicationStatus @default(PENDING)
  user      User                  @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  status       TeamApplicationStatus @default(PENDING)
  message      String?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  @@unique([teamId, userId, tournamentId])
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model UserAchievement {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([userId, achievementId])
}

model Achievement {
  id               String            @id @default(cuid())
  name             String            @unique
  description      String
  icon             String
  userAchievements UserAchievement[]
}

model UserTrainingProgram {
  id         String          @id @default(cuid())
  user       User            @relation(fields: [userId], references: [id])
  userId     String
  program    TrainingProgram @relation(fields: [programId], references: [id])
  programId  String
  assignedAt DateTime        @default(now())
  isActive   Boolean         @default(true)

  @@unique([userId, programId])
}

model TrainingProgram {
  id             String                @id @default(cuid())
  name           String
  description    String
  goal           String
  daysPerWeek    Int
  splitType      String
  author         String
  coverImage     String
  coverImageHint String
  isAiGenerated  Boolean               @default(false)
  weeklySplit    WorkoutDay[]
  assignedTo     UserTrainingProgram[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                     String    @id @default(cuid())
  workoutDay             WorkoutDay @relation(fields: [workoutDayId], references: [id])
  workoutDayId           String
  name                   String
  sets                   String
  reps                   String
  plannedWeight          String?
  isSupersetWithPrevious Boolean?  @default(false)
  technique              String?
}

model TrainingLog {
  id          String           @id @default(cuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  workoutName String?
  status      TrainingLogStatus
  exercises   LoggedExercise[]
  mood        Mood?
  notes       String?
  coachNotes  String?
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

model LoggedExercise {
  id                     String      @id @default(cuid())
  trainingLog            TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId          String
  exercise               Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId             String
  sets                   LoggedSet[]
  notes                  String?
  isSupersetWithPrevious Boolean?    @default(false)
}

model LoggedSet {
  id                 String         @id @default(cuid())
  loggedExercise     LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId   String
  plannedReps        String?
  plannedWeight      String?
  loggedReps         Int?
  loggedWeight       Float?
  rpe                Int?
  isCompleted        Boolean        @default(false)
}

model Exercise {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json
  commonMistakes  Json
  alternatives    Json
  loggedExercises LoggedExercise[]
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id     String @id @default(cuid())
  league League @relation(fields: [leagueId], references: [id])
  leagueId String
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String
  played Int    @default(0)
  wins   Int    @default(0)
  draws  Int    @default(0)
  losses Int    @default(0)
  points Int    @default(0)
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  votes     PollVote[]
  author    User?        @relation(fields: [authorId], references: [id])
  authorId  String?
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
}

model PollOption {
  id     String     @id @default(cuid())
  text   String
  poll   Poll       @relation(fields: [pollId], references: [id])
  pollId String
  votes  PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@unique([userId, pollId])
}


model TournamentMedia {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type         String
  src          String
  description  String?
  hint         String?
  createdAt    DateTime   @default(now())
}

model TournamentAnnouncement {
  id            String         @id @default(cuid())
  tournament    Tournament     @relation(fields: [tournamentId], references: [id])
  tournamentId  String
  sender        User           @relation(fields: [senderId], references: [id])
  senderId      String
  subject       String
  message       String
  sentTo        Int
  createdAt     DateTime       @default(now())
  notifications Notification[]
}

model Activity {
  id           String      @id @default(cuid())
  type         ActivityType
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  playground   Playground? @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  metadata     Json
  createdAt    DateTime    @default(now())
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}


model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String         @unique
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String
  createdAt  DateTime @default(now())
}

model Measurement {
  id      String   @id @default(cuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

model TrainingProposal {
  id        String                 @id @default(cuid())
  from      User                   @relation("ProposalsSent", fields: [fromId], references: [id])
  fromId    String
  to        User                   @relation("ProposalsReceived", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  comment   String?
  status    TrainingProposalStatus @default(PENDING)
  program   TrainingProgram?       @relation(fields: [programId], references: [id])
  programId String?
  createdAt DateTime               @default(now())
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}
