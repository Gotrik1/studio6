// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================================
//          User & Auth
// ==================================

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  name                    String
  passwordHash            String
  avatar                  String?
  bannerImage             String?
  bannerImageHint         String?
  dateOfBirth             DateTime?
  location                String?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  isVerified              Boolean                  @default(false)
  role                    String                   @default("Игрок")
  status                  String                   @default("Активен")
  xp                      Int                      @default(0)
  mainSport               String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  teamsAsCaptain          Team[]                   @relation("TeamCaptain")
  teamsAsMember           Team[]                   @relation("TeamMembers")
  createdTeams            Team[]                   @relation("TeamCreator")
  organizedTournaments    Tournament[]
  organizedPromotions     Promotion[]
  careerHistory           CareerHistory[]
  createdPlaygrounds      Playground[]
  reviews                 PlaygroundReview[]
  checkIns                Activity[]
  authoredMessages        Message[]
  friendRequestsSent      FriendRequest[]          @relation("SentFriendRequests")
  friendRequestsReceived  FriendRequest[]          @relation("ReceivedFriendRequests")
  friends                 User[]                   @relation("Friends")
  friendOf                User[]                   @relation("Friends")
  reportsSent             Report[]                 @relation("ReportsSent")
  reportsReceived         Report[]                 @relation("ReportsReceived")
  reportsResolved         Report[]                 @relation("ReportsResolved")
  judgedMatches           Match[]
  coachProfile            CoachProfile?
  coaching                User[]                   @relation("CoachedBy")
  coachedBy               User?                    @relation("CoachedBy", fields: [coachId], references: [id])
  coachId                 String?
  trainingLogs            TrainingLog[]
  assignedTrainingProgram UserTrainingProgram[]
  inventory               InventoryItem[]
  foodLog                 FoodLogEntry[]
  measurements            Measurement[]
  sentTrainingProposals   TrainingProposal[]       @relation("SentTrainingProposals")
  receivedTrainingProposals TrainingProposal[]       @relation("ReceivedTrainingProposals")
  pollsAuthored             Poll[]
  pollVotes               PollVote[]
  sentAnnouncements       TournamentAnnouncement[]
  achievements            UserAchievement[]
  chats                   Chat[]                   @relation("ChatParticipants")
  sponsorshipOffers       SponsorshipOffer[]
  sponsorships            Sponsorship[]
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float    @default(0)
  price          Decimal  @default(0)
}

model CareerHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  teamName  String
  period    String // e.g., "2023-2024"
  role      String
  review    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@unique([fromId, toId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

// ==================================
//          Teams
// ==================================

model Team {
  id                 String              @id @default(cuid())
  name               String              @unique
  slug               String              @unique
  motto              String?
  description        String?
  logo               String?
  dataAiHint         String?
  bannerImage        String?
  bannerImageHint    String?
  game               String
  rank               Int                 @default(0)
  wins               Int                 @default(0)
  losses             Int                 @default(0)
  draws              Int                 @default(0)
  seekingSponsorship Boolean             @default(false)
  pitch              String?
  creator            User                @relation("TeamCreator", fields: [creatorId], references: [id])
  creatorId          String
  captain            User                @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId          String
  members            User[]              @relation("TeamMembers")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]             @relation("Team1Matches")
  matchesAsTeam2     Match[]             @relation("Team2Matches")
  events             MatchEvent[]
  homePlayground     Playground?         @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?
  practices          TeamPractice[]
  applications       TeamApplication[]
  chat               Chat?
  sponsorships       Sponsorship[]
  sponsorshipOffers  SponsorshipOffer[]
  sponsors           Sponsor[]           @relation("SponsoredTeams")
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

// ==================================
//          Tournaments
// ==================================

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  game                  String
  description           String?
  organizer             User                     @relation(fields: [organizerId], references: [id])
  organizerId           String
  status                TournamentStatus
  type                  TournamentType
  format                TournamentFormat
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  teams                 Team[]
  matches               Match[]
  media                 TournamentMedia[]
  judges                User[]
  medicalPartners       MedicalPartner[]
  sponsors              Sponsor[]                @relation("SponsoredTournaments")
  announcements         TournamentAnnouncement[]
  applications          TeamApplication[]
}

model TournamentMedia {
  id          String      @id @default(cuid())
  tournament  Tournament  @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type        MediaType
  src         String
  description String?
  hint        String?
  createdAt   DateTime    @default(now())
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

enum TournamentType {
  team
  individual
}

enum TournamentFormat {
  single_elimination
  round_robin
  groups
}

// ==================================
//          Matches
// ==================================

model Match {
  id              String       @id @default(cuid())
  team1           Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournament      Tournament?  @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  league          League?      @relation(fields: [leagueId], references: [id])
  leagueId        String?
  round           Int?
  events          MatchEvent[]
  playgroundId    String?
  location        String?
  referee         User?        @relation(fields: [refereeId], references: [id])
  refereeId       String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  notifications   Notification[]
}

model MatchEvent {
  id        String         @id @default(cuid())
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  team      Team?          @relation(fields: [teamId], references: [id])
  teamId    String?
  player    User?          @relation(fields: [playerId], references: [id])
  playerId  String?
  type      MatchEventType
  timestamp DateTime       @default(now())
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

// ==================================
//      Sponsorship & Promotions
// ==================================

model Sponsor {
  id          String       @id @default(cuid())
  name        String       @unique
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  tournaments Tournament[] @relation("SponsoredTournaments")
  teams       Team[]       @relation("SponsoredTeams")
  promotions  Promotion[]
}

model Sponsorship {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   User     @relation(fields: [sponsorId], references: [id])
  sponsorId String
  amount    Decimal
  signedAt  DateTime @default(now())
}

model SponsorshipOffer {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   User     @relation(fields: [sponsorId], references: [id])
  sponsorId String
  offerText String
  status    String // PENDING, ACCEPTED, DECLINED
}

model Promotion {
  id            String   @id @default(cuid())
  name          String
  description   String
  prize         String
  cost          String
  imageDataUri  String
  imageHint     String
  endDate       DateTime
  organizer     User     @relation(fields: [organizerId], references: [id])
  organizerId   String
  sponsor       Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId     String?
}

// ==================================
//      Playgrounds & Community
// ==================================

model Playground {
  id             String               @id @default(cuid())
  name           String
  address        String
  type           String
  coverImage     String?
  coverImageHint String?
  surface        String
  features       String[]
  rating         Float                @default(0)
  checkIns       Int                  @default(0)
  status         PlaygroundStatus
  creator        User                 @relation(fields: [creatorId], references: [id])
  creatorId      String
  teams          Team[]
  practices      TeamPractice[]
  reviews        PlaygroundReview[]
  reports        PlaygroundReport[]
  checkInActivities Activity[]
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String       @id @default(cuid())
  playground   Playground   @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User         @relation(fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus
  createdAt    DateTime     @default(now())
}


// ==================================
//      Social & Communications
// ==================================

model Chat {
  id           String      @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]      @relation("ChatParticipants")
  messages     Message[]
  team         Team?       @relation(fields: [teamId], references: [id])
  teamId       String?     @unique
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

enum ChatType {
  PRIVATE
  GROUP
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("ReportsSent", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  reportedUserId String
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  resolver       User?        @relation("ReportsResolved", fields: [resolverId], references: [id])
  resolverId     String?
  resolvedAt     DateTime?
  createdAt      DateTime     @default(now())
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

// ==================================
//      Gamification & Achievements
// ==================================
model Achievement {
  id            String            @id @default(cuid())
  name          String            @unique
  description   String
  icon          String
  users         UserAchievement[]
}

model UserAchievement {
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@id([userId, achievementId])
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  creator      User            @relation(fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation(fields: [opponentId], references: [id])
  opponentId   String?
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  status       ChallengeStatus
  result       String?
  createdAt    DateTime        @default(now())
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// ==================================
//      Training & Health
// ==================================

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  logs           LoggedExercise[]
}

model TrainingProgram {
  id              String                @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String?
  coverImageHint  String?
  isAiGenerated   Boolean               @default(false)
  weeklySplit     WorkoutDay[]
  assignedToUsers UserTrainingProgram[]
}

model UserTrainingProgram {
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  program   TrainingProgram @relation(fields: [programId], references: [id])
  programId String
  assignedAt DateTime @default(now())
  isActive   Boolean  @default(true)

  @@id([userId, programId])
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model TrainingLog {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  workoutName String?
  status    TrainingLogStatus
  exercises LoggedExercise[]
  mood      Mood?
  notes     String?
  coachNotes String?
}

model LoggedExercise {
  id            String       @id @default(cuid())
  trainingLog   TrainingLog  @relation(fields: [trainingLogId], references: [id])
  trainingLogId String
  exercise      Exercise     @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  notes         String?
  isSupersetWithPrevious Boolean?
  sets          LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Int?
  isCompleted      Boolean        @default(false)
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

model Measurement {
  id      String   @id @default(cuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

model TrainingProposal {
  id        String                   @id @default(cuid())
  from      User                     @relation("SentTrainingProposals", fields: [fromId], references: [id])
  fromId    String
  to        User                     @relation("ReceivedTrainingProposals", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  program   TrainingProgram?         @relation(fields: [programId], references: [id])
  programId String?
  comment   String?
  status    TrainingProposalStatus @default(PENDING)
  createdAt DateTime                 @default(now())
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String         @unique
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String
  createdAt  DateTime @default(now())
}

// ==================================
//      System & Miscellaneous
// ==================================

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  votes     PollVote[]
  author    User?        @relation(fields: [authorId], references: [id])
  authorId  String?
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
}

model PollOption {
  id     String     @id @default(cuid())
  text   String
  poll   Poll       @relation(fields: [pollId], references: [id])
  pollId String
  votes  PollVote[]
}

model PollVote {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@id([userId, pollId])
}

model Notification {
  id             String                  @id @default(cuid())
  user           User                    @relation(fields: [userId], references: [id])
  userId         String
  type           NotificationType
  message        String
  href           String?
  isRead         Boolean                 @default(false)
  createdAt      DateTime                @default(now())
  match          Match?                  @relation(fields: [matchId], references: [id])
  matchId        String?
  announcement   TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
  announcementId String?
}

model TournamentAnnouncement {
  id           String         @id @default(cuid())
  tournament   Tournament     @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User           @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime       @default(now())
  notifications Notification[]
}


enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  TEAM_INVITE
  OTHER
}

model Sport {
  id         String      @id @unique
  name       String      @unique
  icon       String
  category   String
  challenges Challenge[]
}

model TeamApplication {
  id           String                  @id @default(cuid())
  team         Team                    @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                    @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?             @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  status       TeamApplicationStatus @default(PENDING)
  message      String?
  createdAt    DateTime                @default(now())
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

model StoreItem {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean  @default(false)
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model MedicalPartner {
  id              String       @id @default(cuid())
  name            String
  specialization  String
  contact         String
  avatar          String?
  avatarHint      String?
  tournaments     Tournament[]
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  league    League   @relation(fields: [leagueId], references: [id])
  leagueId  String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  played    Int
  wins      Int
  draws     Int
  losses    Int
  points    Int
  createdAt DateTime @default(now())

  @@id([leagueId, teamId])
}

model Activity {
  id           String      @id @default(cuid())
  type         ActivityType
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  playground   Playground? @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  metadata     Json
  createdAt    DateTime    @default(now())
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}
