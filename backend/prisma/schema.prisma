// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String            @id @default(cuid())
  email                  String            @unique
  name                   String
  avatar                 String?
  role                   String
  status                 String
  xp                     Int               @default(0)
  dateOfBirth            DateTime?
  location               String?
  mainSport              String?
  preferredSports        String[]
  telegram               String?
  discord                String?
  teamsAsCaptain         Team[]            @relation("CaptainToTeam")
  teamsAsCreator         Team[]            @relation("CreatorToTeam")
  teamsAsMember          Team[]            @relation("TeamMembers")
  activities             Activity[]
  gallery                GalleryItem[]
  careerHistory          CareerHistoryItem[]
  friends                User[]            @relation("Friends")
  friendOf               User[]            @relation("Friends")
  sentFriendRequests     FriendRequest[]   @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[]   @relation("ReceivedFriendRequests")
  notifications          Notification[]
  messages               Message[]
  playgrounds            Playground[]
  challengesCreator      Challenge[]       @relation("CreatorChallenges")
  challengesOpponent     Challenge[]       @relation("OpponentChallenges")
  organizedTournaments   Tournament[]
  coachProfile           CoachProfile?
}

model Team {
  id                 String   @id @default(cuid())
  slug               String   @unique
  name               String
  game               String
  motto              String?
  logo               String?
  dataAiHint         String?
  rank               Int      @default(99)
  wins               Int      @default(0)
  losses             Int      @default(0)
  draws              Int      @default(0)
  seekingSponsorship Boolean  @default(false)
  captainId          String
  captain            User     @relation("CaptainToTeam", fields: [captainId], references: [id])
  creatorId          String
  creator            User     @relation("CreatorToTeam", fields: [creatorId], references: [id])
  members            User[]   @relation("TeamMembers")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]  @relation("Team1Matches")
  matchesAsTeam2     Match[]  @relation("Team2Matches")
  homePlaygroundId   String?
  homePlayground     Playground? @relation(fields: [homePlaygroundId], references: [id])
  sponsors           Sponsor[]
}

model Tournament {
  id                    String    @id @default(cuid())
  slug                  String    @unique
  name                  String
  game                  String
  description           String?
  format                String // 'single_elimination', 'round_robin', 'groups'
  type                  String // 'team', 'individual'
  category              String
  location              String
  participantCount      Int
  prizePool             String?
  rules                 String?
  status                String // 'REGISTRATION', 'ONGOING', 'FINISHED'
  bannerImage           String?
  bannerImageHint       String?
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  organizerId           String
  organizer             User      @relation(fields: [organizerId], references: [id])
  teams                 Team[]
  matches               Match[]
}

model Match {
  id           String      @id @default(cuid())
  team1Id      String
  team2Id      String
  team1Score   Int?
  team2Score   Int?
  status       MatchStatus @default(PLANNED)
  scheduledAt  DateTime
  finishedAt   DateTime?
  location     String?
  refereeName  String?
  team1        Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team2        Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  tournamentId String?
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Activity {
  id        String       @id @default(cuid())
  type      ActivityType
  timestamp DateTime     @default(now())
  metadata  Json
  userId    String
  user      User         @relation(fields: [userId], references: [id])
}

enum ActivityType {
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
}

model GalleryItem {
  id         String   @id @default(cuid())
  src        String
  alt        String
  dataAiHint String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}

model CareerHistoryItem {
  id        String   @id @default(cuid())
  teamName  String
  period    String
  role      String
  review    String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model FriendRequest {
  id        String   @id @default(cuid())
  fromId    String
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  createdAt DateTime @default(now())
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  type      NotificationType
  message   String
  href      String?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  @@index([userId])
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
}

model Message {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  chatId    String // e.g., 'team-1' or 'user1-user2'
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])

  @@index([chatId])
}

model Playground {
  id             String   @id @default(cuid())
  name           String
  address        String
  type           String
  surface        String
  features       String[]
  coverImage     String?
  coverImageHint String?
  rating         Float
  checkIns       Int
  status         String // APPROVED, PENDING_MODERATION
  creatorId      String
  creator        User     @relation(fields: [creatorId], references: [id])
  homeForTeams   Team[]
}

model Challenge {
  id          String          @id @default(cuid())
  title       String
  description String
  discipline  String
  wager       Int
  status      ChallengeStatus @default(OPEN)
  result      String?
  creatorId   String
  creator     User            @relation("CreatorChallenges", fields: [creatorId], references: [id])
  opponentId  String?
  opponent    User?           @relation("OpponentChallenges", fields: [opponentId], references: [id])
  createdAt   DateTime        @default(now())
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model CoachProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id])
  specialization String
  description    String
  tags           String[]
  rating         Float
  price          String
}

model Sponsor {
  id          String   @id @default(cuid())
  name        String   @unique
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  teams       Team[]
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)
}

model Exercise {
    id             String   @id @default(cuid())
    name           String   @unique
    description    String
    category       String
    equipment      String
    image          String?
    imageHint      String?
    techniqueTips  String[]
    commonMistakes String[]
    alternatives   String[]
}
