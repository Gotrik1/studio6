// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                          String                        @id @default(cuid())
  email                       String                        @unique
  name                        String
  passwordHash                String
  avatar                      String?
  role                        String
  xp                          Int                           @default(0)
  status                      String                        @default("Активен")
  dateOfBirth                 DateTime?
  location                    String?
  mainSport                   String?
  preferredSports             String[]
  telegram                    String?
  discord                     String?
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  teamsAsMember               Team[]                        @relation("TeamMembers")
  teamsAsCaptain              Team[]                        @relation("TeamCaptain")
  teamsAsCreator              Team[]                        @relation("TeamCreator")
  organizedTournaments        Tournament[]
  reportsAsReporter           Report[]                      @relation("ReportedBy")
  reportsAsReported           Report[]                      @relation("ReportedUser")
  reportsAsResolver           Report[]                      @relation("ResolvedBy")
  careerHistory               CareerHistory[]
  coaching                    User[]                        @relation("CoachStudent")
  coach                       User?                         @relation("CoachStudent", fields: [coachId], references: [id])
  coachId                     String?
  judgedMatches               Match[]                       @relation("JudgedBy")
  activities                  Activity[]
  playgrounds                 Playground[]
  playgroundReviews           PlaygroundReview[]
  playgroundReports           PlaygroundReport[]
  friendRequestsSent          FriendRequest[]               @relation("SentFriendRequests")
  friendRequestsReceived      FriendRequest[]               @relation("ReceivedFriendRequests")
  friends                     User[]                        @relation("Friends")
  friendsOf                   User[]                        @relation("Friends")
  sentMessages                Message[]
  chats                       Chat[]
  lfgLobbiesCreated           LfgLobby[]
  lfgLobbiesJoined            LfgLobby[]                    @relation("LfgPlayers")
  challengesAsCreator         Challenge[]                   @relation("ChallengeCreator")
  challengesAsOpponent        Challenge[]                   @relation("ChallengeOpponent")
  trainingLogs                TrainingLog[]
  measurements                Measurement[]
  inventory                   InventoryItem[]
  polls                       Poll[]
  votes                       PollVote[]
  trainingProposalsSent       TrainingProposal[]            @relation("SentTrainingProposals")
  trainingProposalsReceived   TrainingProposal[]            @relation("ReceivedTrainingProposals")
  announcementsSent           TournamentAnnouncement[]
  sponsoredPromotions         Promotion[]
  storeTransactions           StoreTransaction[]
  teamApplications            TeamApplication[]
  tournamentJudgeAssignments  Tournament[]                  @relation("TournamentJudges")
  medicalPartnerAssignments   Tournament[]                  @relation("TournamentMedicalStaff")
  tournamentSponsorPlacements Tournament[]                  @relation("TournamentSponsors")
  coachProfile                CoachProfile?
  trainingPrograms            TrainingProgram[]
}

model Team {
  id                   String              @id @default(cuid())
  name                 String
  slug                 String              @unique
  logo                 String?
  dataAiHint           String?
  motto                String?
  game                 String
  rank                 Int                 @default(0)
  wins                 Int                 @default(0)
  losses               Int                 @default(0)
  draws                Int                 @default(0)
  description          String?
  seekingSponsorship   Boolean             @default(false)
  captain              User                @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId            String
  creator              User                @relation("TeamCreator", fields: [creatorId], references: [id])
  creatorId            String
  members              User[]              @relation("TeamMembers")
  tournaments          Tournament[]
  matchesAsTeam1       Match[]             @relation("Team1Matches")
  matchesAsTeam2       Match[]             @relation("Team2Matches")
  homePlayground       Playground?         @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId     String?
  applications         TeamApplication[]
  sponsors             Sponsor[]           @relation("TeamSponsors")
  careerHistory        CareerHistory[]
  leagues              LeagueTeam[]
  chat                 Chat?
  practices            TeamPractice[]
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  description           String?
  game                  String
  status                String
  type                  String
  format                String
  category              String
  location              String
  participantCount      Int
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  organizer             User                     @relation(fields: [organizerId], references: [id])
  organizerId           String
  teams                 Team[]
  matches               Match[]
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  applications          TeamApplication[]
  judges                User[]                   @relation("TournamentJudges")
  sponsors              Sponsor[]                @relation("TournamentSponsors")
  medicalPartners       MedicalPartner[]         @relation("TournamentMedicalStaff")
  announcements         TournamentAnnouncement[]
  media                 TournamentMedia[]
}

model Match {
  id              String      @id @default(cuid())
  team1           Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournament      Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  referee         User?       @relation("JudgedBy", fields: [refereeId], references: [id])
  refereeId       String?
  refereeName     String? // Denormalized for easy display
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  playgroundId    String?
  playground      Playground? @relation(fields: [playgroundId], references: [id])
  location        String?
  league          League?     @relation(fields: [leagueId], references: [id])
  leagueId        String?
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  createdAt    DateTime              @default(now())
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

model CareerHistory {
  id       String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  team     Team     @relation(fields: [teamId], references: [id])
  teamId   String
  role     String
  startDate DateTime
  endDate  DateTime?
  review   String?
  createdAt DateTime @default(now())
}

model Sponsor {
  id          String       @id @default(cuid())
  name        String
  logo        String?
  logoHint    String?
  description String?
  profileUrl  String?
  interests   String[]
  teams       Team[]       @relation("TeamSponsors")
  tournaments Tournament[] @relation("TournamentSponsors")
  promotions  Promotion[]
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[] @relation("TournamentMedicalStaff")
}

model Promotion {
  id            String    @id @default(cuid())
  name          String
  description   String
  prize         String
  cost          String
  imageDataUri  String
  imageHint     String
  endDate       DateTime
  sponsor       Sponsor?  @relation(fields: [sponsorId], references: [id])
  sponsorId     String?
  organizer     User      @relation(fields: [organizerId], references: [id])
  organizerId   String
  createdAt     DateTime  @default(now())
}

model TournamentMedia {
  id          String     @id @default(cuid())
  tournament  Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type        String // "IMAGE", "VIDEO", "AUDIO"
  src         String
  description String?
  hint        String?
  createdAt   DateTime   @default(now())
}

model FriendRequest {
  id        String                @id @default(cuid())
  from      User                  @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                  @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus   @default(PENDING)
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  @@unique([fromId, toId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime @default(now())
}

model Chat {
  id           String    @id @default(cuid())
  name         String? // For group chats
  type         String    @default("PRIVATE") // PRIVATE or GROUP
  messages     Message[]
  participants User[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Activity {
  id           String       @id @default(cuid())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  type         ActivityType
  metadata     Json
  playground   Playground?  @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  playgroundId String?
  createdAt    DateTime     @default(now())
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("ReportedBy", fields: [reporterId], references: [id], onDelete: Cascade)
  reporterId     String
  reportedUser   User         @relation("ReportedUser", fields: [reportedUserId], references: [id], onDelete: Cascade)
  reportedUserId String
  resolver       User?        @relation("ResolvedBy", fields: [resolverId], references: [id], onDelete: SetNull)
  resolverId     String?
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  resolution     String?
  createdAt      DateTime     @default(now())
  resolvedAt     DateTime?
}

model Challenge {
  id           String      @id @default(cuid())
  title        String
  description  String
  wager        Int
  creator      User        @relation("ChallengeCreator", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?       @relation("ChallengeOpponent", fields: [opponentId], references: [id])
  opponentId   String?
  discipline   Sport       @relation(fields: [disciplineId], references: [id])
  disciplineId String
  status       String      @default("OPEN") // OPEN, IN_PROGRESS, COMPLETED, CANCELLED
  result       String?
  createdAt    DateTime    @default(now())
}

model LfgLobby {
  id           String       @id @default(cuid())
  creator      User         @relation(fields: [creatorId], references: [id])
  creatorId    String
  type         LfgLobbyType
  sport        String
  location     String
  playgroundId String?
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  comment      String
  players      User[]       @relation("LfgPlayers")
  createdAt    DateTime     @default(now())
}

enum LfgLobbyType {
  GAME
  TRAINING
}

model Sport {
  id         String      @id @unique
  name       String
  icon       String
  category   String // "Командный", "Некомандный", "Киберспорт"
  challenges Challenge[]
}

model Playground {
  id                  String               @id @default(cuid())
  name                String
  address             String
  type                String
  surface             String
  features            String[]
  coverImage          String?
  coverImageHint      String?
  rating              Float
  checkIns            Int
  status              PlaygroundStatus
  creator             User                 @relation(fields: [creatorId], references: [id])
  creatorId           String
  matches             Match[]
  reviews             PlaygroundReview[]
  reports             PlaygroundReport[]
  activities          Activity[]
  teamHome            Team[]
  practices           TeamPractice[]
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  playgroundId String
  reporter     User       @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  reporterId   String
  category     String
  comment      String
  severity     String     // e.g., low, medium, high
  summary      String
  status       ReportStatus @default(PENDING) // Re-using status from user reports
  createdAt    DateTime   @default(now())
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String
  imageHint   String
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int
  wins     Int
  losses   Int
  draws    Int
  points   Int
}

model StoreItem {
  id          String             @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean            @default(false)
  transactions StoreTransaction[]
}

model StoreTransaction {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  item        StoreItem @relation(fields: [itemId], references: [id])
  itemId      String
  amount      Float
  createdAt   DateTime  @default(now())
}

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  loggedItems    LoggedExercise[]
}

model TrainingProgram {
  id              String           @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          User?            @relation(fields: [authorId], references: [id])
  authorId        String?
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean          @default(false)
  weeklySplit     WorkoutDay[]
  trainingProposals TrainingProposal[]
}

model WorkoutDay {
  id                String             @id @default(cuid())
  trainingProgram   TrainingProgram    @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
  trainingProgramId String
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Float
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

model TrainingLog {
  id          String             @id @default(cuid())
  user        User               @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  workoutName String?
  status      TrainingLogStatus  @default(PLANNED)
  mood        Mood?
  notes       String?
  coachNotes  String?
  exercises   LoggedExercise[]
}

model LoggedExercise {
  id                     String         @id @default(cuid())
  trainingLog            TrainingLog    @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
  trainingLogId          String
  exercise               Exercise       @relation(fields: [exerciseId], references: [id])
  exerciseId             String
  notes                  String?
  isSupersetWithPrevious Boolean?
  sets                   LoggedSet[]
}

model LoggedSet {
  id                 String          @id @default(cuid())
  loggedExercise     LoggedExercise  @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
  loggedExerciseId   String
  plannedReps        String?
  plannedWeight      String?
  loggedReps         Int?
  loggedWeight       Float?
  rpe                Int?
  isCompleted        Boolean         @default(false)
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

model Measurement {
  id       String    @id @default(cuid())
  user     User      @relation(fields: [userId], references: [id])
  userId   String
  date     DateTime
  weight   Float
  bodyFat  Float?
  chest    Float?
  waist    Float?
  hips     Float?
  biceps   Float?
  thigh    Float?
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  author    User?        @relation(fields: [authorId], references: [id])
  authorId  String?
  isActive  Boolean      @default(true)
  options   PollOption[]
  votes     PollVote[]
  createdAt DateTime     @default(now())
}

model PollOption {
  id     String     @id @default(cuid())
  poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String
  text   String
  votes  PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime   @default(now())

  @@unique([userId, pollId])
}

model TrainingProposal {
  id        String                 @id @default(cuid())
  from      User                   @relation("SentTrainingProposals", fields: [fromId], references: [id])
  fromId    String
  to        User                   @relation("ReceivedTrainingProposals", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  comment   String?
  status    TrainingProposalStatus @default(PENDING)
  program   TrainingProgram?       @relation(fields: [programId], references: [id])
  programId String?
  createdAt DateTime               @default(now())
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  SYSTEM_ALERT
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
}

model Notification {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  type      NotificationType
  message   String
  href      String?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
}
