// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                    @id @default(cuid())
  email                   String                    @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    String
  status                  String                    @default("Активен")
  xp                      Int                       @default(0)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  isVerified              Boolean                   @default(false)
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  teamsAsCaptain          Team[]                    @relation("CaptainToTeam")
  teamsAsMember           Team[]                    @relation("MembersToTeam")
  organizedTournaments    Tournament[]
  createdPlaygrounds      Playground[]
  judgedMatches           Match[]                   @relation("JudgeToMatch")
  careerHistory           CareerHistoryItem[]
  achievements            UserAchievement[]
  notifications           Notification[]
  organizedPromotions     Promotion[]
  createdChallenges       Challenge[]               @relation("ChallengeCreator")
  acceptedChallenges      Challenge[]               @relation("ChallengeOpponent")
  friends                 User[]                    @relation("Friends")
  friendOf                User[]                    @relation("Friends")
  sentFriendRequests      FriendRequest[]           @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]           @relation("ReceivedFriendRequests")
  trainingLogs            TrainingLog[]
  measurements            Measurement[]
  inventory               InventoryItem[]
  foodLog                 FoodLogEntry[]
  trainingProposalsFrom   TrainingProposal[]        @relation("ProposalFrom")
  trainingProposalsTo     TrainingProposal[]        @relation("ProposalTo")
  pollVotes               PollVote[]
  sentAnnouncements       TournamentAnnouncement[]
  createdReports          Report[]                  @relation("Reporter")
  reportedIn              Report[]                  @relation("ReportedUser")
  resolvedReports         Report[]                  @relation("Resolver")
  teamApplications        TeamApplication[]
  activities              Activity[]
  assignedPrograms        UserTrainingProgram[]
}

model CareerHistoryItem {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  teamName    String
  period      String
  role        String
  review      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GalleryItem {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  src        String
  alt        String
  dataAiHint String
  createdAt  DateTime @default(now())
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id               String              @id @default(cuid())
  name             String
  slug             String              @unique
  motto            String?
  logo             String?
  dataAiHint       String?
  game             String
  description      String?
  rank             Int                 @default(0)
  wins             Int                 @default(0)
  losses           Int                 @default(0)
  draws            Int                 @default(0)
  seekingSponsorship Boolean           @default(false)
  pitch            String?
  creator          User                @relation(fields: [creatorId], references: [id])
  creatorId        String
  captain          User                @relation("CaptainToTeam", fields: [captainId], references: [id])
  captainId        String
  members          User[]              @relation("MembersToTeam")
  tournaments      Tournament[]
  homePlaygroundId String?
  homePlayground   Playground?         @relation(fields: [homePlaygroundId], references: [id])
  matchesAsTeam1   Match[]             @relation("Team1Matches")
  matchesAsTeam2   Match[]             @relation("Team2Matches")
  sponsorships     Sponsorship[]
  teamPractices    TeamPractice[]
  applications     TeamApplication[]
  matchEvents      MatchEvent[]
  chat             Chat?
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  game                  String
  status                String // REGISTRATION, ONGOING, FINISHED
  format                String // single_elimination, round_robin, etc.
  type                  String // team, individual
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  organizerId           String
  organizer             User                     @relation(fields: [organizerId], references: [id])
  teams                 Team[]
  matches               Match[]
  media                 TournamentMedia[]
  judges                User[]
  sponsors              Sponsor[]
  medicalPartners       MedicalPartner[]
  announcements         TournamentAnnouncement[]
  applications          TeamApplication[]        @relation("TournamentApplications")
}

model TournamentMedia {
  id          String     @id @default(cuid())
  tournament  Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type        String // IMAGE, VIDEO, AUDIO
  src         String
  description String?
  hint        String?
  createdAt   DateTime   @default(now())
}

model Match {
  id              String      @id @default(cuid())
  team1           Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournament      Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  playgroundId    String?
  playground      Playground? @relation(fields: [playgroundId], references: [id])
  location        String?
  events          MatchEvent[]
  round           Int?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  refereeId       String?
  refereeName     String?
  judge           User?       @relation("JudgeToMatch", fields: [refereeId], references: [id])
  leagueId        String?
  league          League?     @relation(fields: [leagueId], references: [id])
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model MatchEvent {
  id        String         @id @default(cuid())
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  team      Team?          @relation(fields: [teamId], references: [id])
  teamId    String?
  player    User?          @relation(fields: [playerId], references: [id])
  playerId  String?
  type      MatchEventType
  timestamp DateTime       @default(now())
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
  SHOT
  SHOT_ON_TARGET
  CORNER
  FOUL
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         String // PRIVATE, GROUP
  participants User[]
  messages     Message[]
  teamId       String?   @unique
  team         Team?     @relation(fields: [teamId], references: [id])
  createdAt    DateTime  @default(now())
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Notification {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  type      NotificationType
  message   String
  href      String?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_REMINDER
  MATCH_RESULT
  TOURNAMENT_INVITE
  ANNOUNCEMENT
  TEAM_UPDATE
}

model Promotion {
  id            String   @id @default(cuid())
  name          String
  description   String
  prize         String
  sponsorId     String?
  sponsor       Sponsor? @relation(fields: [sponsorId], references: [id])
  organizerId   String
  organizer     User     @relation(fields: [organizerId], references: [id])
  imageDataUri  String
  imageHint     String
  endDate       DateTime
  cost          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Sponsor {
  id          String      @id @default(cuid())
  name        String
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  promotions  Promotion[]
  teams       Team[]      @relation("TeamSponsorships")
}

model Playground {
  id        String             @id @default(cuid())
  name      String
  address   String
  type      String
  coverImage String?
  coverImageHint String?
  surface   String
  features  String[]
  rating    Float
  checkIns  Int
  status    PlaygroundStatus
  creator   User               @relation(fields: [creatorId], references: [id])
  creatorId String
  reviews   PlaygroundReview[]
  reports   PlaygroundReport[]
  matches   Match[]
  practices TeamPractice[]
  teams     Team[]
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String         @id @default(cuid())
  playground   Playground     @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User           @relation(fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String // low, medium, high
  summary      String
  status       ReportStatus
  createdAt    DateTime       @default(now())
}

model Report {
  id                 String       @id @default(cuid())
  reporter           User         @relation("Reporter", fields: [reporterId], references: [id])
  reporterId         String
  reportedUser       User         @relation("ReportedUser", fields: [reportedUserId], references: [id])
  reportedUserId     String
  category           String
  description        String?
  status             ReportStatus @default(PENDING)
  resolution         String?
  resolverId         String?
  resolver           User?        @relation("Resolver", fields: [resolverId], references: [id])
  createdAt          DateTime     @default(now())
  resolvedAt         DateTime?
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model TeamApplication {
  id           String                  @id @default(cuid())
  team         Team                    @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                    @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?             @relation("TournamentApplications", fields: [tournamentId], references: [id])
  tournamentId String?
  message      String?
  status       TeamApplicationStatus   @default(PENDING)
  createdAt    DateTime                @default(now())
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

model Challenge {
  id            String          @id @default(cuid())
  title         String
  description   String
  discipline    Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId  String
  wager         Int
  creator       User            @relation("ChallengeCreator", fields: [creatorId], references: [id])
  creatorId     String
  opponent      User?           @relation("ChallengeOpponent", fields: [opponentId], references: [id])
  opponentId    String?
  status        ChallengeStatus @default(OPEN)
  result        String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Sport {
  id         String      @id
  name       String
  icon       String
  category   String // "Командный", "Некомандный", "Киберспорт"
  challenges Challenge[]
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}

model LfgLobby {
  id           String       @id @default(cuid())
  type         LfgLobbyType
  sport        String
  location     String
  playgroundId String?
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  comment      String
  creatorId    String
  creator      User         @relation(fields: [creatorId], references: [id])
  players      User[]
  status       LfgLobbyStatus @default(OPEN)
  createdAt    DateTime     @default(now())
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum LfgLobbyType {
  GAME
  TRAINING
}

model TrainingLog {
  id          String           @id @default(cuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  workoutName String?
  status      TrainingLogStatus
  exercises   LoggedExercise[]
  mood        Mood?
  notes       String?
  coachNotes  String?
}

enum TrainingLogStatus {
  COMPLETED
  PLANNED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

model LoggedExercise {
  id                      String        @id @default(cuid())
  trainingLog             TrainingLog   @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
  trainingLogId           String
  exercise                Exercise      @relation(fields: [exerciseId], references: [id])
  exerciseId              String
  notes                   String?
  isSupersetWithPrevious  Boolean?      @default(false)
  sets                    LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int? // Rating of Perceived Exertion (1-10)
  isCompleted      Boolean        @default(false)
}

model TrainingProgram {
  id                String                 @id
  name              String
  description       String
  goal              String // Could be an enum: MASS_GAIN, WEIGHT_LOSS, RELIEF, STRENGTH
  daysPerWeek       Int
  splitType         String // Could be an enum: FULL_BODY, SPLIT, UPPER_LOWER
  author            String
  coverImage        String
  coverImageHint    String
  isAiGenerated     Boolean                @default(false)
  weeklySplit       WorkoutDay[]
  trainingProposals TrainingProposal[]
  assignedToUsers   UserTrainingProgram[]
}

model UserTrainingProgram {
  id         String          @id @default(cuid())
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  program    TrainingProgram @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId  String
  assignedAt DateTime        @default(now())
  isActive   Boolean         @default(true)

  @@unique([userId, programId])
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
  trainingProgramId String
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?    @default(false)
  technique               String?
}

model Exercise {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json
  commonMistakes  Json
  alternatives    Json
  loggedExercises LoggedExercise[]
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  foodItem    FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId  String
  grams       Int
  meal        String // Breakfast, Lunch, Dinner, Snack
  createdAt   DateTime @default(now())
}

model Measurement {
  id      String    @id @default(cuid())
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

model TrainingProposal {
  id        String           @id @default(cuid())
  from      User             @relation("ProposalFrom", fields: [fromId], references: [id])
  fromId    String
  to        User             @relation("ProposalTo", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  programId String?
  program   TrainingProgram? @relation(fields: [programId], references: [id])
  comment   String?
  status    TrainingProposalStatus @default(PENDING)
  createdAt DateTime         @default(now())
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Quest {
  id          String    @id @default(cuid())
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  type        QuestType
  createdAt   DateTime  @default(now())
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  votes     PollVote[]
  authorId  String?
  author    User?        @relation(fields: [authorId], references: [id])
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
}

model PollOption {
  id        String     @id @default(cuid())
  text      String
  poll      Poll       @relation(fields: [pollId], references: [id])
  pollId    String
  votes     PollVote[]
}

model PollVote {
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  poll       Poll       @relation(fields: [pollId], references: [id])
  pollId     String
  pollOption PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt  DateTime   @default(now())

  @@id([userId, pollId])
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
}

model Activity {
  id           String      @id @default(cuid())
  type         ActivityType
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  playgroundId String?
  playground   Playground? @relation(fields: [playgroundId], references: [id])
  metadata     Json
  createdAt    DateTime    @default(now())
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int    @default(0)
  wins     Int    @default(0)
  draws    Int    @default(0)
  losses   Int    @default(0)
  points   Int    @default(0)

  @@unique([leagueId, teamId])
}

model Sponsorship {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId String
  amount    Float
  signedAt  DateTime @default(now())

  @@unique([teamId, sponsorId])
}
