// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id @default(cuid())
  email           String  @unique
  name            String
  passwordHash    String
  role            String
  avatar          String?
  activitySummary String?
  statsSummary    String?
  status          String? @default("Активен")
  profileUrl      String?

  teamsAsCaptain Team[]   @relation("TeamCaptain")
  teams          Team[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Team {
  id               String       @id @default(cuid())
  name             String       @unique
  slug             String       @unique
  motto            String?
  logo             String?
  dataAiHint       String?
  game             String
  rank             Int?         @default(1)
  homePlaygroundId String?
  captain          User         @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId        String
  members          User[]
  tournaments      Tournament[]
  wins             Int          @default(0)
  losses           Int          @default(0)
  draws            Int          @default(0)
  matchesAsT1      Match[]      @relation("Team1Matches")
  matchesAsT2      Match[]      @relation("Team2Matches")
}

model Tournament {
  id        String   @id @default(cuid())
  name      String
  game      String
  format    String // "single_elimination" or "round_robin"
  prizePool Float
  startDate DateTime
  status    String // "REGISTRATION", "ONGOING", "FINISHED"
  teams     Team[]
  matches   Match[]
}

model Match {
  id           String      @id @default(cuid())
  team1        Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id      String
  team2        Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id      String
  score        String?
  status       String // "PLANNED", "LIVE", "FINISHED", "DISPUTED"
  scheduledAt  DateTime
  finishedAt   DateTime?
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId String?
}
