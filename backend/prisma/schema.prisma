// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// ==================================================
//                 CORE MODELS
// ==================================================
model User {
  id                       String                     @id @default(uuid())
  email                    String                     @unique
  name                     String
  passwordHash             String
  avatar                   String?
  dataAiHint               String?
  role                     String                     @default("Игрок")
  status                   String                     @default("Активен")
  xp                       Int                        @default(0)
  dateOfBirth              DateTime?
  location                 String?
  mainSport                String?
  isVerified               Boolean                    @default(false)
  preferredSports          String[]
  telegram                 String?
  discord                  String?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  // Relations
  teamsAsMember            Team[]                     @relation("TeamMembers")
  teamsAsCaptain           Team[]                     @relation("TeamCaptain")
  createdTeams             Team[]                     @relation("TeamCreator")
  organizedTournaments     Tournament[]               @relation("TournamentOrganizer")
  friends                  User[]                     @relation("Friendships")
  friendOf                 User[]                     @relation("Friendships")
  sentFriendRequests       FriendRequest[]            @relation("SentFriendRequests")
  receivedFriendRequests   FriendRequest[]            @relation("ReceivedFriendRequests")
  authoredPolls            Poll[]
  votes                    PollVote[]
  authoredAnnouncements    TournamentAnnouncement[]
  notifications            Notification[]
  inventory                InventoryItem[]
  authoredReviews          PlaygroundReview[]         @relation("AuthoredReviews")
  reportsMade              Report[]                   @relation("ReportsMade")
  reportsReceived          Report[]                   @relation("ReportsReceived")
  resolvedReports          Report[]                   @relation("ReportsResolved")
  activities               Activity[]
  measurements             Measurement[]
  foodLog                  FoodLogEntry[]
  trainingLogs             TrainingLog[]
  sponsorships             Sponsorship[]
  coachProfile             CoachProfile?
  coaching                 User[]                     @relation("Coaching")
  coach                    User?                      @relation("Coaching", fields: [coachId], references: [id])
  coachId                  String?
  judgedMatches            Match[]                    @relation("JudgedMatches")
  createdChallenges        Challenge[]                @relation("CreatedChallenges")
  acceptedChallenges       Challenge[]                @relation("AcceptedChallenges")
  assignedPrograms         UserTrainingProgram[]
  chats                    Chat[]                     @relation("ChatParticipants")
  messages                 Message[]
  organizedPromotions      Promotion[]
  createdLobbies           LfgLobby[]                 @relation("CreatedLobbies")
  joinedLobbies            LfgLobby[]                 @relation("LobbyParticipants")
  judgedTournaments        Tournament[]               @relation("JudgedTournaments")
  trainingProposalsSent    TrainingProposal[]         @relation("SentProposals")
  trainingProposalsReceived TrainingProposal[]         @relation("ReceivedProposals")
  careerHistory            CareerHistory[]
  createdPlaygrounds       Playground[]
  pollVotes                PollVote[]
  teamApplications         TeamApplication[]

  @@map("users")
}

model Team {
  id                   String              @id @default(uuid())
  name                 String
  slug                 String              @unique
  motto                String?
  logo                 String?
  dataAiHint           String?
  game                 String
  pitch                String?
  seekingSponsorship   Boolean             @default(true)
  wins                 Int                 @default(0)
  losses               Int                 @default(0)
  draws                Int                 @default(0)
  rank                 Int                 @default(99)
  homePlaygroundId     String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  // Relations
  homePlayground       Playground?         @relation(fields: [homePlaygroundId], references: [id])
  creatorId            String
  creator              User                @relation("TeamCreator", fields: [creatorId], references: [id])
  captainId            String
  captain              User                @relation("TeamCaptain", fields: [captainId], references: [id])
  members              User[]              @relation("TeamMembers")
  tournaments          Tournament[]
  matchesAsTeam1       Match[]             @relation("Team1Matches")
  matchesAsTeam2       Match[]             @relation("Team2Matches")
  events               MatchEvent[]
  sponsorships         Sponsorship[]
  sponsorshipOffers    SponsorshipOffer[]
  teamApplications     TeamApplication[]
  practices            TeamPractice[]
  sponsors             Sponsor[]           @relation("SponsoredTeams")
  leagues              LeagueTeam[]
  chat                 Chat?

  @@map("teams")
}

model Playground {
  id                   String                @id @default(uuid())
  name                 String
  address              String
  type                 String
  coverImage           String?
  coverImageHint       String?
  surface              String
  features             String[]
  rating               Float                 @default(0)
  checkIns             Int                   @default(0)
  status               PlaygroundStatus      @default(PENDING_MODERATION)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  creatorId            String
  creator              User                  @relation(fields: [creatorId], references: [id])
  reviews              PlaygroundReview[]
  reports              PlaygroundReport[]
  homeForTeams         Team[]
  matches              Match[]
  lfgLobbies           LfgLobby[]
  practices            TeamPractice[]

  @@map("playgrounds")
}

model Tournament {
  id                      String                   @id @default(uuid())
  name                    String
  slug                    String                   @unique
  game                    String
  description             String?
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  participantCount        Int
  type                    String
  format                  String
  status                  String
  category                String
  location                String
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  organizerId             String
  organizer               User                     @relation("TournamentOrganizer", fields: [organizerId], references: [id])
  teams                   Team[]
  matches                 Match[]
  applications            TeamApplication[]
  judges                  User[]                   @relation("JudgedTournaments")
  sponsors                Sponsor[]                @relation("SponsoredTournaments")
  media                   TournamentMedia[]
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  league                  League?                  @relation(fields: [leagueId], references: [id])
  leagueId                String?

  @@map("tournaments")
}

model Match {
  id               String       @id @default(uuid())
  team1Id          String
  team2Id          String
  team1Score       Int?
  team2Score       Int?
  scheduledAt      DateTime
  finishedAt       DateTime?
  status           MatchStatus  @default(PLANNED)
  disputeReason    String?
  disputeOpenedAt  DateTime?
  resolution       String?
  playgroundId     String?
  location         String?
  tournamentId     String?
  leagueId         String?
  refereeId        String?
  refereeName      String?
  
  team1            Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team2            Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  tournament       Tournament?  @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  league           League?      @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  playground       Playground?  @relation(fields: [playgroundId], references: [id])
  referee          User?        @relation("JudgedMatches", fields: [refereeId], references: [id])
  events           MatchEvent[]

  @@map("matches")
}

model LfgLobby {
  id            String         @id @default(uuid())
  type          LfgLobbyType
  sport         String
  location      String
  playgroundId  String?
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  status        LfgLobbyStatus @default(OPEN)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  creatorId     String
  creator       User           @relation("CreatedLobbies", fields: [creatorId], references: [id])
  players       User[]         @relation("LobbyParticipants")
  playground    Playground?    @relation(fields: [playgroundId], references: [id])

  @@map("lfg_lobbies")
}

// ==================================================
//               SUPPORTING MODELS
// ==================================================

model Sport {
  id         String @id
  name       String @unique
  icon       String
  category   String
  challenges Challenge[]

  @@map("sports")
}

model TeamApplication {
  id           String                  @id @default(uuid())
  teamId       String
  userId       String
  tournamentId String?
  message      String?
  status       TeamApplicationStatus   @default(PENDING)
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  team         Team                    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user         User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tournament   Tournament?             @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId, tournamentId])
  @@map("team_applications")
}

model Promotion {
  id            String   @id @default(uuid())
  name          String
  description   String
  prize         String
  cost          String
  imageDataUri  String
  imageHint     String
  endDate       DateTime
  organizerId   String
  sponsorId     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  organizer     User     @relation(fields: [organizerId], references: [id])
  sponsor       Sponsor? @relation(fields: [sponsorId], references: [id])

  @@map("promotions")
}

model Challenge {
  id           String          @id @default(uuid())
  title        String
  description  String
  wager        Int
  status       ChallengeStatus @default(OPEN)
  result       String?
  disciplineId String
  creatorId    String
  opponentId   String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  creator      User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  opponent     User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])

  @@map("challenges")
}

model Chat {
  id           String    @id @default(uuid())
  name         String?
  type         ChatType
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  participants User[]    @relation("ChatParticipants")
  messages     Message[]
  teamId       String?   @unique
  team         Team?     @relation(fields: [teamId], references: [id])

  @@map("chats")
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  chatId    String
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model FriendRequest {
  id        String              @id @default(uuid())
  fromId    String
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])

  @@unique([fromId, toId])
  @@map("friend_requests")
}

model MatchEvent {
  id        String         @id @default(uuid())
  matchId   String
  teamId    String?
  playerId  String?
  type      MatchEventType
  timestamp DateTime       @default(now())
  metadata  Json?
  match     Match          @relation(fields: [matchId], references: [id])
  team      Team?          @relation(fields: [teamId], references: [id])
  player    User?          @relation(fields: [playerId], references: [id])

  @@map("match_events")
}

model TournamentMedia {
  id          String   @id @default(uuid())
  tournamentId String
  type        MediaType
  src         String
  description String?
  hint        String?
  createdAt   DateTime @default(now())
  tournament  Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@map("tournament_media")
}

model MedicalPartner {
  id             String       @id @default(uuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]

  @@map("medical_partners")
}

model TournamentAnnouncement {
  id           String     @id @default(uuid())
  tournamentId String
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  sender       User       @relation(fields: [senderId], references: [id])
  notifications Notification[]

  @@map("tournament_announcements")
}

model Report {
  id             String       @id @default(uuid())
  reporterId     String
  reportedUserId String
  resolverId     String?
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  resolution     String?
  createdAt      DateTime     @default(now())
  resolvedAt     DateTime?
  reporter       User         @relation("ReportsMade", fields: [reporterId], references: [id])
  reportedUser   User         @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  resolver       User?        @relation("ReportsResolved", fields: [resolverId], references: [id])

  @@map("reports")
}

model Achievement {
  id              String            @id @default(uuid())
  name            String
  description     String
  icon            String
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id])
  achievement   Achievement @relation(fields: [achievementId], references: [id])

  @@id([userId, achievementId])
  @@map("user_achievements")
}

model PlaygroundReport {
  id           String       @id @default(uuid())
  playgroundId String
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus @default(PENDING)
  createdAt    DateTime     @default(now())
  playground   Playground   @relation(fields: [playgroundId], references: [id])
  reporter     User         @relation(fields: [reporterId], references: [id])

  @@map("playground_reports")
}

model PlaygroundReview {
  id           String     @id @default(uuid())
  playgroundId String
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  author       User       @relation("AuthoredReviews", fields: [authorId], references: [id])

  @@map("playground_reviews")
}

model TeamPractice {
  id           String     @id @default(uuid())
  teamId       String
  playgroundId String
  title        String
  description  String?
  date         DateTime
  createdAt    DateTime   @default(now())
  team         Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  playground   Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)

  @@map("team_practices")
}

model Sponsor {
  id                 String               @id @default(uuid())
  name               String               @unique
  logo               String?
  logoHint           String?
  description        String
  profileUrl         String               @unique
  interests          String[]
  teams              Team[]               @relation("SponsoredTeams")
  offers             SponsorshipOffer[]
  tournaments        Tournament[]         @relation("SponsoredTournaments")
  promotions         Promotion[]

  @@map("sponsors")
}

model Sponsorship {
  id          String   @id @default(uuid())
  teamId      String
  userId      String
  amount      Int
  signedAt    DateTime @default(now())
  expiresAt   DateTime
  team        Team     @relation(fields: [teamId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@map("sponsorships")
}

model SponsorshipOffer {
  id        String                 @id @default(uuid())
  teamId    String
  sponsorId String
  offerText String
  status    TeamApplicationStatus  @default(PENDING)
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  team      Team                   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  sponsor   Sponsor                @relation(fields: [sponsorId], references: [id], onDelete: Cascade)

  @@map("sponsorship_offers")
}

model League {
  id        String       @id @default(uuid())
  name      String
  description String
  game      String
  image     String?
  imageHint String?
  teams     LeagueTeam[]
  matches   Match[]
  tournaments Tournament[]

  @@map("leagues")
}

model LeagueTeam {
  leagueId String
  teamId   String
  played   Int
  wins     Int
  draws    Int
  losses   Int
  points   Int
  league   League @relation(fields: [leagueId], references: [id])
  team     Team   @relation(fields: [teamId], references: [id])

  @@id([leagueId, teamId])
  @@map("league_teams")
}

model CareerHistory {
    id        String   @id @default(uuid())
    userId    String
    teamName  String
    period    String
    role      String
    review    String
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    
    @@map("career_history")
}

model UserTrainingProgram {
    id        String          @id @default(uuid())
    userId    String
    programId String
    assignedAt DateTime       @default(now())
    isActive  Boolean         @default(true)
    user      User            @relation(fields: [userId], references: [id])
    program   TrainingProgram @relation(fields: [programId], references: [id])

    @@map("user_training_programs")
}

model TrainingProgram {
    id           String                @id
    name         String
    description  String
    goal         String
    daysPerWeek  Int
    splitType    String
    author       String
    coverImage   String
    coverImageHint String
    isAiGenerated Boolean              @default(false)
    createdAt    DateTime              @default(now())
    updatedAt    DateTime              @updatedAt
    weeklySplit  WorkoutDay[]
    users        UserTrainingProgram[]

    @@map("training_programs")
}

model WorkoutDay {
    id               String            @id @default(uuid())
    day              Int
    title            String
    trainingProgramId String
    program          TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
    exercises        WorkoutExercise[]
    
    @@map("workout_days")
}

model WorkoutExercise {
    id                      String      @id @default(uuid())
    workoutDayId            String
    day                     WorkoutDay  @relation(fields: [workoutDayId], references: [id])
    name                    String
    sets                    String
    reps                    String
    plannedWeight           String?
    isSupersetWithPrevious  Boolean?
    technique               String?
    
    @@map("workout_exercises")
}

model TrainingLog {
    id String @id @default(uuid())
    userId String
    date DateTime
    workoutName String?
    status TrainingLogStatus @default(PLANNED)
    mood Mood?
    notes String?
    coachNotes String?
    exercises LoggedExercise[]
    user User @relation(fields: [userId], references: [id])
    
    @@map("training_logs")
}

model LoggedExercise {
    id String @id @default(uuid())
    trainingLogId String
    exerciseId String
    notes String?
    isSupersetWithPrevious Boolean?
    trainingLog TrainingLog @relation(fields: [trainingLogId], references: [id])
    exercise Exercise @relation(fields: [exerciseId], references: [id])
    sets LoggedSet[]
    
    @@map("logged_exercises")
}

model LoggedSet {
    id String @id @default(uuid())
    loggedExerciseId String
    plannedReps String?
    plannedWeight String?
    loggedReps Int?
    loggedWeight Float?
    rpe Int? // Rating of Perceived Exertion
    isCompleted Boolean @default(false)
    exerciseLog LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
    
    @@map("logged_sets")
}

model Exercise {
  id             String           @id @default(uuid())
  name           String           @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  loggedExercises LoggedExercise[]
  
  @@map("exercises")
}

model FoodItem {
  id          String         @id @default(uuid())
  name        String         @unique
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]

  @@map("food_items")
}

model FoodLogEntry {
  id         String   @id @default(uuid())
  userId     String
  foodItemId String
  grams      Int
  meal       String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])

  @@map("food_log_entries")
}

model Measurement {
  id      String   @id @default(uuid())
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
  user    User     @relation(fields: [userId], references: [id])

  @@map("measurements")
}

model TrainingProposal {
  id        String   @id @default(uuid())
  fromId    String
  toId      String
  sport     String
  date      DateTime
  comment   String?
  programId String?
  status    TrainingProposalStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  from      User     @relation("SentProposals", fields: [fromId], references: [id])
  to        User     @relation("ReceivedProposals", fields: [toId], references: [id])
  program   TrainingProgram? @relation(fields: [programId], references: [id])
  
  @@map("training_proposals")
}

model StoreItem {
  id          String  @id @default(uuid())
  name        String  @unique
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)

  @@map("store_items")
}

model InventoryItem {
  id             String   @id @default(uuid())
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])

  @@map("inventory_items")
}

model Quest {
  id          String    @id @default(uuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

model Poll {
  id String @id @default(uuid())
  title String
  question String
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  authorId String?
  author User? @relation(fields: [authorId], references: [id])
  options PollOption[]
  votes PollVote[]
}

model PollOption {
  id String @id @default(uuid())
  text String
  pollId String
  poll Poll @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes PollVote[]
}

model PollVote {
  userId String
  pollId String
  pollOptionId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  poll Poll @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollOption PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)

  @@id([userId, pollId])
}


model Notification {
  id String @id @default(uuid())
  userId String
  type NotificationType
  message String
  href String?
  isRead Boolean @default(false)
  createdAt DateTime @default(now())
  matchId String?
  announcementId String?
  user User @relation(fields: [userId], references: [id])
  announcement TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
}

model Activity {
  id String @id @default(uuid())
  type ActivityType
  userId String
  playgroundId String?
  metadata Json
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  playground Playground? @relation(fields: [playgroundId], references: [id])
}

// ==================================================
//                     ENUMS
// ==================================================
enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  SHOT
  SHOT_ON_TARGET
  CORNER
  FOUL
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

enum ChatType {
  DIRECT
  GROUP
}

enum NotificationType {
    FRIEND_REQUEST
    MATCH_RESULT
    ANNOUNCEMENT
    TEAM_INVITE
    MATCH_REMINDER
    SYSTEM
}

enum ActivityType {
    STATUS_POSTED
    MATCH_PLAYED
    TEAM_JOINED
    TOURNAMENT_REGISTERED
    ACHIEVEMENT_UNLOCKED
    PLAYGROUND_CHECK_IN
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}
