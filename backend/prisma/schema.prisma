// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                    @id @default(cuid())
  email                     String                    @unique
  name                      String
  passwordHash              String
  avatar                    String?
  role                      String                    @default("Игрок")
  status                    String                    @default("Активен")
  xp                        Int                       @default(0)
  isVerified                Boolean                   @default(false)
  dateOfBirth               DateTime?
  location                  String?
  mainSport                 String?
  preferredSports           String[]
  telegram                  String?
  discord                   String?
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  teamsAsMember             Team[]                    @relation("TeamMembers")
  teamsAsCaptain            Team[]                    @relation("TeamCaptain")
  teamsAsCreator            Team[]                    @relation("TeamCreator")
  organizedTournaments      Tournament[]
  careerHistory             CareerHistoryItem[]
  gallery                   GalleryItem[]
  coachProfile              CoachProfile?
  coaching                  User[]                    @relation("CoachStudents")
  coach                     User?                     @relation("CoachStudents", fields: [coachId], references: [id])
  coachId                   String?
  judgedMatches             Match[]                   @relation("MatchJudges")
  trainingProposalsSent     TrainingProposal[]        @relation("ProposalsSent")
  trainingProposalsReceived TrainingProposal[]        @relation("ProposalsReceived")
  trainingLogs              TrainingLog[]
  measurements              Measurement[]
  foodLogEntries            FoodLogEntry[]
  inventory                 InventoryItem[]
  friends                   User[]                    @relation("Friendships")
  friendOf                  User[]                    @relation("Friendships")
  sentFriendRequests        FriendRequest[]           @relation("SentFriendRequests")
  receivedFriendRequests    FriendRequest[]           @relation("ReceivedFriendRequests")
  polls                     Poll[]
  pollVotes                 PollVote[]
  activities                Activity[]
  playgrounds               Playground[]
  reviews                   PlaygroundReview[]
  reportsMade               Report[]                  @relation("Reporter")
  reportsAgainst            Report[]                  @relation("Reported")
  reportsResolved           Report[]                  @relation("Resolver")
  teamApplications          TeamApplication[]
  organizedPromotions       Promotion[]
  tournamentAnnouncements   TournamentAnnouncement[]
  judgingTournaments        Tournament[]              @relation("TournamentJudges")
}

model Team {
  id                 String              @id @default(cuid())
  name               String
  slug               String              @unique
  game               String
  motto              String?
  logo               String?
  dataAiHint         String?
  description        String?
  wins               Int                 @default(0)
  losses             Int                 @default(0)
  draws              Int                 @default(0)
  rank               Int                 @default(0)
  seekingSponsorship Boolean             @default(false)
  creator            User                @relation("TeamCreator", fields: [creatorId], references: [id])
  creatorId          String
  captain            User                @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId          String
  members            User[]              @relation("TeamMembers")
  tournaments        Tournament[]        @relation("TeamTournaments")
  matchesAsTeam1     Match[]             @relation("Team1Matches")
  matchesAsTeam2     Match[]             @relation("Team2Matches")
  sponsors           Sponsor[]           @relation("TeamSponsors")
  homePlaygroundId   String?
  homePlayground     Playground?         @relation(fields: [homePlaygroundId], references: [id])
  careerHistory      CareerHistoryItem[]
  chat               Chat?
  teamApplications   TeamApplication[]
  teamPractices      TeamPractice[]
  leagues            LeagueTeam[]
}

model Match {
  id              String      @id @default(cuid())
  team1           Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus @default(PLANNED)
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournamentId    String?
  tournament      Tournament? @relation(fields: [tournamentId], references: [id])
  judges          User[]      @relation("MatchJudges")
  refereeName     String?
  playgroundId    String?
  playground      Playground? @relation(fields: [playgroundId], references: [id])
  location        String?
  disputeReason   String?
  resolution      String?
  disputeOpenedAt DateTime?
  leagueId        String?
  league          League?     @relation(fields: [leagueId], references: [id])
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  game                  String
  description           String?
  type                  String
  format                String
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  status                String
  organizer             User                     @relation(fields: [organizerId], references: [id])
  organizerId           String
  teams                 Team[]                   @relation("TeamTournaments")
  matches               Match[]
  judges                User[]                   @relation("TournamentJudges")
  sponsors              Sponsor[]                @relation("TournamentSponsors")
  medicalPartners       MedicalPartner[]         @relation("TournamentMedicalPartners")
  announcements         TournamentAnnouncement[]
  media                 TournamentMedia[]
}

model Playground {
  id                 String               @id @default(cuid())
  name               String
  address            String
  type               String
  surface            String
  features           String[]
  coverImage         String?
  coverImageHint     String?
  rating             Float
  checkIns           Int
  status             PlaygroundStatus     @default(PENDING_MODERATION)
  creator            User                 @relation(fields: [creatorId], references: [id])
  creatorId          String
  matches            Match[]
  reviews            PlaygroundReview[]
  reports            PlaygroundReport[]
  homeForTeams       Team[]
  teamPractices      TeamPractice[]
  lfgLobbies         LfgLobby[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model CareerHistoryItem {
  id      String   @id @default(cuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  team    Team     @relation(fields: [teamId], references: [id])
  teamId  String
  period  String
  role    String
  review  String
  createdAt DateTime @default(now())
}

model GalleryItem {
  id         String  @id @default(cuid())
  user       User    @relation(fields: [userId], references: [id])
  userId     String
  src        String
  alt        String
  dataAiHint String?
}

model CoachProfile {
  id             String  @id @default(cuid())
  user           User    @relation(fields: [userId], references: [id])
  userId         String  @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Float
}

model TrainingProgram {
  id              String          @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean         @default(false)
  weeklySplit     WorkoutDay[]
  createdAt       DateTime        @default(now())
  trainingProposals TrainingProposal[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  loggedExercises LoggedExercise[]
}

model Challenge {
  id           String        @id @default(cuid())
  title        String
  description  String
  wager        Int
  discipline   Sport         @relation(fields: [disciplineId], references: [id])
  disciplineId String
  creator      User          @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?         @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  opponentId   String?
  status       ChallengeStatus @default(OPEN)
  result       String?
  createdAt    DateTime      @default(now())
}

model Sport {
  id         String      @id
  name       String
  icon       String
  category   String
  challenges Challenge[]
}

model LfgLobby {
    id String @id @default(cuid())
    type LfgLobbyType
    sport String
    location String
    playground Playground? @relation(fields: [playgroundId], references: [id])
    playgroundId String?
    startTime DateTime
    endTime DateTime
    playersNeeded Int
    comment String
    creator User @relation("CreatedLobbies", fields: [creatorId], references: [id])
    creatorId String
    players User[] @relation("JoinedLobbies")
}

model TrainingProposal {
  id        String        @id @default(cuid())
  from      User          @relation("ProposalsSent", fields: [fromId], references: [id])
  fromId    String
  to        User          @relation("ProposalsReceived", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  comment   String?
  program   TrainingProgram? @relation(fields: [programId], references: [id])
  programId String?
  status    TrainingProposalStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model TrainingLog {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  date DateTime
  workoutName String?
  status TrainingLogStatus @default(PLANNED)
  exercises LoggedExercise[]
  mood Mood?
  notes String?
  coachNotes String?
}

model LoggedExercise {
  id String @id @default(cuid())
  trainingLog TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId String
  exercise Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
  sets LoggedSet[]
  notes String?
  isSupersetWithPrevious Boolean?
}

model LoggedSet {
  id String @id @default(cuid())
  loggedExercise LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps String?
  plannedWeight String?
  loggedReps Int?
  loggedWeight Int?
  rpe Int? // Rate of Perceived Exertion
  isCompleted Boolean @default(false)
}

model Measurement {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  date DateTime
  weight Float
  bodyFat Float?
  chest Float?
  waist Float?
  hips Float?
  biceps Float?
  thigh Float?
}

model FoodItem {
  id String @id @default(cuid())
  name String
  category String
  image String?
  imageHint String?
  calories Float
  protein Float
  fat Float
  carbs Float
  description String?
  logEntries FoodLogEntry[]
}

model FoodLogEntry {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  foodItem FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams Int
  meal MealType
  createdAt DateTime @default(now())
}

model InventoryItem {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    name String
    category String
    type String
    purchaseDate DateTime
    lifespanMonths Int
    image String?
    imageHint String?
    createdAt DateTime @default(now())
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([fromId, toId])
}

model Sponsor {
  id          String       @id
  name        String
  logo        String?
  logoHint    String?
  description String
  profileUrl  String?
  interests   String[]
  teams       Team[]       @relation("TeamSponsors")
  tournaments Tournament[] @relation("TournamentSponsors")
  promotions  Promotion[]
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]
  messages     Message[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime @default(now())
}

model FaqItem {
  id        String @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model StoreItem {
  id String @id @default(cuid())
  name String
  description String
  price Float
  image String?
  imageHint String?
  category String
  isRealMoney Boolean @default(false)
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

model Poll {
  id String @id @default(cuid())
  title String
  question String
  options PollOption[]
  author User? @relation(fields: [authorId], references: [id])
  authorId String?
  isActive Boolean @default(true)
  votes PollVote[]
  createdAt DateTime @default(now())
}

model PollOption {
  id String @id @default(cuid())
  text String
  poll Poll @relation(fields: [pollId], references: [id])
  pollId String
  votes PollVote[]
}

model PollVote {
  id String @id @default(cuid())
  poll Poll @relation(fields: [pollId], references: [id])
  pollId String
  pollOption PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  user User @relation(fields: [userId], references: [id])
  userId String
  createdAt DateTime @default(now())
  
  @@unique([userId, pollId])
}

model Activity {
  id String @id @default(cuid())
  type ActivityType
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  metadata Json
  playground Playground? @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  createdAt DateTime @default(now())
}

model PlaygroundReport {
  id String @id @default(cuid())
  playground Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter User @relation(fields: [reporterId], references: [id])
  reporterId String
  category String
  comment String
  severity String
  summary String
  status ReportStatus @default(PENDING)
  createdAt DateTime @default(now())
}

model Report {
  id String @id @default(cuid())
  reporter User @relation("Reporter", fields: [reporterId], references: [id], onDelete: Cascade)
  reporterId String
  reportedUser User @relation("Reported", fields: [reportedUserId], references: [id], onDelete: Cascade)
  reportedUserId String
  category String
  description String?
  status ReportStatus @default(PENDING)
  resolution String?
  resolver User? @relation("Resolver", fields: [resolverId], references: [id], onDelete: NoAction)
  resolverId String?
  createdAt DateTime @default(now())
  resolvedAt DateTime?
}

model TeamApplication {
  id String @id @default(cuid())
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  message String?
  status TeamApplicationStatus @default(PENDING)
  tournamentId String? // If null, it's a general application
  createdAt DateTime @default(now())
}

model Promotion {
  id String @id @default(cuid())
  name String
  description String
  prize String
  cost String
  imageDataUri String
  imageHint String
  endDate DateTime
  sponsor Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId String?
  organizer User @relation(fields: [organizerId], references: [id])
  organizerId String
  createdAt DateTime @default(now())
}

model TournamentAnnouncement {
  id String @id @default(cuid())
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender User @relation(fields: [senderId], references: [id])
  senderId String
  subject String
  message String
  sentTo Int
  createdAt DateTime @default(now())
}

model TournamentMedia {
  id String @id @default(cuid())
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type String
  src String
  description String?
  hint String?
  createdAt DateTime @default(now())
}

model MedicalPartner {
  id String @id @default(cuid())
  name String
  specialization String
  contact String
  avatar String?
  avatarHint String?
  tournaments Tournament[] @relation("TournamentMedicalPartners")
}

model Notification {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  type NotificationType
  message String
  href String?
  isRead Boolean @default(false)
  createdAt DateTime @default(now())
}

model TeamPractice {
  id String @id @default(cuid())
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String
  title String
  description String?
  date DateTime
  playground Playground @relation(fields: [playgroundId], references: [id], onDelete: SetNull)
  playgroundId String
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String?
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId   String
  played   Int    @default(0)
  wins     Int    @default(0)
  losses   Int    @default(0)
  draws    Int    @default(0)
  points   Int    @default(0)

  @@unique([leagueId, teamId])
}


enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

enum MealType {
  Breakfast
  Lunch
  Dinner
  Snack
}

enum ChatType {
    DIRECT
    GROUP
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}
