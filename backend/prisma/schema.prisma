// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                @id @default(cuid())
  email                   String                @unique
  name                    String
  passwordHash            String
  avatar                  String?
  bannerImage             String?
  bannerImageHint         String?
  role                    String
  status                  String
  location                String?
  mainSport               String?
  dateOfBirth             DateTime?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  xp                      Int                   @default(0)
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  captainOf               Team[]                @relation("CaptainTeams")
  teams                   Team[]                @relation("TeamMembers")
  createdTeams            Team[]                @relation("CreatedTeams")
  createdTournaments      Tournament[]
  createdPlaygrounds      Playground[]
  challengesAsCreator     Challenge[]           @relation("CreatorChallenges")
  challengesAsOpponent    Challenge[]           @relation("OpponentChallenges")
  friends                 User[]                @relation("Friends")
  friendOf                User[]                @relation("Friends")
  sentFriendRequests      FriendRequest[]       @relation("SentRequests")
  receivedFriendRequests  FriendRequest[]       @relation("ReceivedRequests")
  messages                Message[]
  activities              Activity[]
  gallery                 GalleryItem[]
  careerHistory           CareerHistoryItem[]
}

model Team {
  id                      String                @id @default(cuid())
  name                    String                @unique
  slug                    String                @unique
  motto                   String?
  description             String?
  logo                    String?
  dataAiHint              String?
  game                    String
  rank                    Int                   @default(99)
  wins                    Int                   @default(0)
  losses                  Int                   @default(0)
  draws                   Int                   @default(0)
  captain                 User                  @relation("CaptainTeams", fields: [captainId], references: [id])
  captainId               String
  creator                 User?                 @relation("CreatedTeams", fields: [creatorId], references: [id])
  creatorId               String?
  members                 User[]                @relation("TeamMembers")
  tournaments             Tournament[]
  homePlaygroundId        String?
  matchesAsTeam1          Match[]               @relation("Team1Matches")
  matchesAsTeam2          Match[]               @relation("Team2Matches")
}

model Tournament {
  id                      String                @id @default(cuid())
  name                    String
  slug                    String                @unique
  description             String?
  game                    String
  type                    String
  format                  String
  category                String
  location                String
  participantCount        Int
  prizePool               String?
  rules                   String?
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  status                  String
  bannerImage             String?
  bannerImageHint         String?
  organizer               User                  @relation(fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
}

model Match {
  id            String      @id @default(cuid())
  team1         Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id       String
  team2         Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id       String
  team1Score    Int?
  team2Score    Int?
  status        MatchStatus
  scheduledAt   DateTime
  finishedAt    DateTime?
  tournament    Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId  String?
  location      String?
  refereeName   String?
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Challenge {
  id            String          @id @default(cuid())
  title         String
  description   String
  discipline    String
  wager         Int
  creator       User            @relation("CreatorChallenges", fields: [creatorId], references: [id])
  creatorId     String
  opponent      User?           @relation("OpponentChallenges", fields: [opponentId], references: [id])
  opponentId    String?
  status        ChallengeStatus
  result        String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Playground {
  id             String   @id @default(cuid())
  name           String
  address        String
  type           String
  surface        String
  features       String[]
  coverImage     String?
  coverImageHint String?
  rating         Float
  checkIns       Int
  status         String
  creator        User     @relation(fields: [creatorId], references: [id])
  creatorId      String
  createdAt      DateTime @default(now())
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())

  @@unique([fromId, toId])
}

model Message {
  id        String   @id @default(cuid())
  text      String
  chatId    String // Can be a user ID for DMs or a team ID for team chats
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  href      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model Activity {
  id        String     @id @default(cuid())
  type      ActivityType
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  metadata  Json
  timestamp DateTime   @default(now())

  @@index([userId])
}

enum ActivityType {
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
}

model GalleryItem {
  id         String   @id @default(cuid())
  src        String
  alt        String
  dataAiHint String
  createdAt  DateTime @default(now())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CareerHistoryItem {
  id        String   @id @default(cuid())
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
