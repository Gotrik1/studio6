
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String                @id @default(cuid())
  email                   String                @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    String                @default("Игрок")
  status                  String                @default("Активен")
  xp                      Int                   @default(0)
  location                String?
  mainSport               String?
  dateOfBirth             DateTime?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  teamsAsCaptain          Team[]                @relation("TeamCaptain")
  teamsAsCreator          Team[]                @relation("TeamCreator")
  teamsAsMember           Team[]                @relation("TeamMembers")
  organizedTournaments    Tournament[]
  organizedPromotions     Promotion[]
  gallery                 GalleryItem[]
  activities              Activity[]
  careerHistory           CareerHistory[]
  createdPlaygrounds      Playground[]
  coachProfile            CoachProfile?
  coaching                User[]                @relation("CoachToPlayer")
  coach                   User?                 @relation("CoachToPlayer", fields: [coachId], references: [id])
  coachId                 String?
  judgedMatches           Match[]               @relation("MatchReferee")
  friends                 User[]                @relation("Friends")
  friendOf                User[]                @relation("Friends")
  sentFriendRequests      FriendRequest[]       @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]       @relation("ReceivedFriendRequests")
  notifications           Notification[]
  createdLfgLobbies       LfgLobby[]            @relation("LfgCreator")
  joinedLfgLobbies        LfgLobby[]            @relation("LfgPlayers")
  foodLog                 FoodLogEntry[]
  measurements            Measurement[]
  sentTrainingProposals   TrainingProposal[]    @relation("SentTrainingProposals")
  receivedTrainingProposals TrainingProposal[]  @relation("ReceivedTrainingProposals")
  pollVotes               PollVote[]
  trainingLogs            TrainingLog[]
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id                 String       @id @default(cuid())
  name               String
  slug               String       @unique
  motto              String?
  logo               String?
  dataAiHint         String?
  game               String
  rank               Int          @default(0)
  wins               Int          @default(0)
  losses             Int          @default(0)
  draws              Int          @default(0)
  seekingSponsorship Boolean      @default(false)
  creator            User         @relation("TeamCreator", fields: [creatorId], references: [id])
  creatorId          String
  captain            User         @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId          String
  members            User[]       @relation("TeamMembers")
  tournaments        Tournament[]
  team1Matches       Match[]      @relation("Team1Matches")
  team2Matches       Match[]      @relation("Team2Matches")
  homePlaygroundId   String?
  sponsors           Sponsor[]
  chat               Chat?        @relation(fields: [chatId], references: [id])
  chatId             String?      @unique
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  leagues            LeagueTeam[]
}

model Tournament {
  id                      String    @id @default(cuid())
  name                    String
  slug                    String    @unique
  game                    String
  description             String?
  type                    String
  format                  String
  category                String
  location                String
  participantCount        Int
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  status                  String    @default("REGISTRATION") // REGISTRATION, ONGOING, FINISHED
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  organizer               User      @relation(fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model Match {
  id           String      @id @default(cuid())
  team1        Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id      String
  team2        Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id      String
  team1Score   Int?
  team2Score   Int?
  status       MatchStatus @default(PLANNED)
  scheduledAt  DateTime
  finishedAt   DateTime?
  location     String?
  referee      User?       @relation("MatchReferee", fields: [refereeId], references: [id])
  refereeId    String?
  refereeName  String?     // Denormalized for convenience
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  league       League?     @relation(fields: [leagueId], references: [id])
  leagueId     String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Playground {
  id              String   @id @default(cuid())
  name            String
  address         String
  type            String
  coverImage      String?
  coverImageHint  String?
  surface         String
  features        String[]
  rating          Float
  checkIns        Int
  status          String   @default("PENDING_MODERATION") // PENDING_MODERATION, APPROVED
  creator         User     @relation(fields: [creatorId], references: [id])
  creatorId       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model GalleryItem {
  id         String   @id @default(cuid())
  src        String
  alt        String
  dataAiHint String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())
}

model CareerHistory {
  id       String @id @default(cuid())
  teamName String
  period   String
  role     String
  review   String
  user     User   @relation(fields: [userId], references: [id])
  userId   String
}

model Activity {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  type      ActivityType
  metadata  Json
  timestamp DateTime   @default(now())
}

enum ActivityType {
  MATCH_PLAYED
  ACHIEVEMENT_UNLOCKED
  STATUS_UPDATED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  rating         Float
  price          Decimal
}

model Challenge {
  id          String           @id @default(cuid())
  title       String
  description String
  discipline  String
  wager       Int
  creator     User             @relation("ChallengeCreator", fields: [creatorId], references: [id])
  creatorId   String
  opponent    User?            @relation("ChallengeOpponent", fields: [opponentId], references: [id])
  opponentId  String?
  status      ChallengeStatus
  result      String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]
  messages     Message[]
  team         Team?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum ChatType {
  PRIVATE
  GROUP
}

model Message {
  id        String   @id @default(cuid())
  text      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  message   String
  href      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model FaqItem {
    id String @id @default(cuid())
    question String
    answer String
    category String
}

model StoreItem {
    id          String @id @default(cuid())
    name        String
    description String
    price       Float
    image       String?
    imageHint   String?
    category    String
    isRealMoney Boolean @default(false)
}

model Sponsor {
    id String @id @default(cuid())
    name String
    logo String?
    logoHint String?
    description String
    profileUrl String
    interests String[]
    promotions Promotion[]
    teams Team[]
}

model Promotion {
    id String @id @default(cuid())
    name String
    description String
    prize String
    cost String
    imageDataUri String
    imageHint String
    endDate DateTime
    organizer User @relation(fields: [organizerId], references: [id])
    organizerId String
    sponsor Sponsor? @relation(fields: [sponsorId], references: [id])
    sponsorId String?
    createdAt DateTime @default(now())
}

model League {
    id String @id @default(cuid())
    name String
    description String
    game String
    image String
    imageHint String
    teams LeagueTeam[]
    matches Match[]
}

model LeagueTeam {
    leagueId String
    league League @relation(fields: [leagueId], references: [id])
    teamId String
    team Team @relation(fields: [teamId], references: [id])
    played Int
    wins Int
    losses Int
    draws Int
    points Int
    @@id([leagueId, teamId])
}

model LfgLobby {
    id String @id @default(cuid())
    type LfgLobbyType
    sport String
    location String
    playgroundId String?
    startTime DateTime
    endTime DateTime
    playersNeeded Int
    players User[] @relation("LfgPlayers")
    comment String
    creator User @relation("LfgCreator", fields: [creatorId], references: [id])
    creatorId String
    createdAt DateTime @default(now())
}

enum LfgLobbyType {
    GAME
    TRAINING
}

model FoodItem {
    id String @id @default(cuid())
    name String
    category String
    image String?
    imageHint String?
    calories Float
    protein Float
    fat Float
    carbs Float
    description String?
    logEntries FoodLogEntry[]
}

model FoodLogEntry {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    foodItem FoodItem @relation(fields: [foodItemId], references: [id])
    foodItemId String
    grams Int
    meal String // Breakfast, Lunch, Dinner, Snack
    createdAt DateTime @default(now())
}

model Measurement {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    date DateTime
    weight Float
    bodyFat Float?
    chest Float?
    waist Float?
    hips Float?
    biceps Float?
    thigh Float?
}

model TrainingProposal {
    id String @id @default(cuid())
    from User @relation("SentTrainingProposals", fields: [fromId], references: [id])
    fromId String
    to User @relation("ReceivedTrainingProposals", fields: [toId], references: [id])
    toId String
    sport String
    date DateTime
    comment String?
    status String @default("PENDING") // PENDING, ACCEPTED, DECLINED
    createdAt DateTime @default(now())
}

model Poll {
    id String @id @default(cuid())
    title String
    question String
    isActive Boolean @default(true)
    options PollOption[]
    votes PollVote[]
    createdAt DateTime @default(now())
}

model PollOption {
    id String @id @default(cuid())
    text String
    poll Poll @relation(fields: [pollId], references: [id])
    pollId String
    votes PollVote[]
}

model PollVote {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    poll Poll @relation(fields: [pollId], references: [id])
    pollId String
    pollOption PollOption @relation(fields: [pollOptionId], references: [id])
    pollOptionId String
    createdAt DateTime @default(now())
    @@unique([userId, pollId])
}

model TrainingProgram {
    id String @id @default(cuid())
    name String
    description String
    goal String
    daysPerWeek Int
    splitType String
    author String
    coverImage String
    coverImageHint String
    isAiGenerated Boolean @default(false)
    weeklySplit WorkoutDay[]
}

model WorkoutDay {
    id String @id @default(cuid())
    day Int
    title String
    program TrainingProgram @relation(fields: [programId], references: [id])
    programId String
    exercises ExerciseDetail[]
}

model ExerciseDetail {
    id String @id @default(cuid())
    name String
    sets String
    reps String
    plannedWeight String?
    isSupersetWithPrevious Boolean?
    technique String?
    workoutDay WorkoutDay @relation(fields: [workoutDayId], references: [id])
    workoutDayId String
}

model Exercise {
  id String @id @default(cuid())
  name String
  description String
  category String
  equipment String
  image String?
  imageHint String?
  techniqueTips String[]
  commonMistakes String[]
  alternatives String[]
  loggedExercises LoggedExercise[]
}

model TrainingLog {
    id String @id @default(cuid())
    date DateTime
    workoutName String
    status String // completed, planned, skipped
    mood String? // great, good, ok, bad
    notes String?
    coachNotes String?
    userId String
    user User @relation(fields: [userId], references: [id])
    exercises LoggedExercise[]
}

model LoggedExercise {
    id String @id @default(cuid())
    trainingLog TrainingLog @relation(fields: [trainingLogId], references: [id])
    trainingLogId String
    exercise Exercise @relation(fields: [exerciseId], references: [id])
    exerciseId String
    notes String?
    sets LoggedSet[]
}

model LoggedSet {
    id String @id @default(cuid())
    loggedExercise LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
    loggedExerciseId String
    plannedReps String
    plannedWeight String
    loggedReps Int?
    loggedWeight Float?
    rpe Int?
    isCompleted Boolean @default(false)
}

model Quest {
    id String @id @default(cuid())
    type QuestType
    title String
    description String
    reward Int
    goal Int
    href String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum QuestType {
    DAILY
    WEEKLY
    SPECIAL
}

relation CoachToPlayer {
  from User
  to   User[]
}
