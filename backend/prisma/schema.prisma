// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String        @id @default(cuid())
  name                    String
  email                   String        @unique
  passwordHash            String
  avatar                  String?
  role                    String
  status                  String        @default("Активен")
  xp                      Int           @default(0)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  location                String?
  mainSport               String?
  dateOfBirth             DateTime?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  teamsAsCaptain          Team[]        @relation("Captain")
  teamsAsCreator          Team[]        @relation("Creator")
  teamsAsMember           Team[]        @relation("TeamMembers")
  organizedTournaments    Tournament[]
  activities              Activity[]
  gallery                 GalleryItem[]
  careerHistory           CareerHistoryItem[]
  createdPlaygrounds      Playground[]
  challengesAsCreator     Challenge[]   @relation("CreatorChallenges")
  challengesAsOpponent    Challenge[]   @relation("OpponentChallenges")
  friendRequestsSent      FriendRequest[] @relation("SentRequests")
  friendRequestsReceived  FriendRequest[] @relation("ReceivedRequests")
  friends                 User[]        @relation("Friends")
  friendsRelation         User[]        @relation("Friends")
  notifications           Notification[]
  trainingLogs            TrainingLog[]
  coachProfile            CoachProfile?
  lfgLobbies              LfgLobby[]
  promotions              Promotion[]
}

model CoachProfile {
    id              String @id @default(cuid())
    user            User @relation(fields: [userId], references: [id])
    userId          String @unique
    specialization  String
    description     String
    tags            String[]
    rating          Float
    price           Decimal
}

model Team {
  id                 String       @id @default(cuid())
  name               String       @unique
  slug               String       @unique
  motto              String?
  logo               String?
  dataAiHint         String?
  game               String
  rank               Int          @default(0)
  wins               Int          @default(0)
  losses             Int          @default(0)
  draws              Int          @default(0)
  creator            User         @relation("Creator", fields: [creatorId], references: [id])
  creatorId          String
  captain            User         @relation("Captain", fields: [captainId], references: [id])
  captainId          String
  members            User[]       @relation("TeamMembers")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]      @relation("Team1Matches")
  matchesAsTeam2     Match[]      @relation("Team2Matches")
  homePlaygroundId   String?
  seekingSponsorship Boolean      @default(true)
  sponsors           Sponsor[]
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model Tournament {
  id                      String   @id @default(cuid())
  name                    String
  slug                    String   @unique
  game                    String
  description             String?
  format                  String
  type                    String
  category                String
  location                String
  participantCount        Int
  prizePool               String?
  rules                   String?
  status                  String   @default("REGISTRATION") // REGISTRATION, ONGOING, FINISHED
  bannerImage             String?
  bannerImageHint         String?
  organizer               User     @relation(fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  league                  League?  @relation(fields: [leagueId], references: [id])
  leagueId                String?
}

model Match {
  id            String      @id @default(cuid())
  team1         Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id       String
  team2         Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id       String
  team1Score    Int?
  team2Score    Int?
  status        String      // PLANNED, LIVE, FINISHED, DISPUTED, CANCELLED
  scheduledAt   DateTime
  finishedAt    DateTime?
  location      String?
  refereeName   String?
  tournament    Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId  String?
  league        League?     @relation(fields: [leagueId], references: [id])
  leagueId      String?
}

model Activity {
  id        String   @id @default(cuid())
  type      ActivityType
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  metadata  Json
  timestamp DateTime @default(now())
}

model GalleryItem {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  src         String
  alt         String
  dataAiHint  String
  createdAt   DateTime @default(now())
}

model CareerHistoryItem {
    id        String @id @default(cuid())
    user      User @relation(fields: [userId], references: [id])
    userId    String
    teamName  String
    period    String
    role      String
    review    String
    createdAt DateTime @default(now())
}

enum ActivityType {
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  STATUS_UPDATED
}

model Playground {
  id              String   @id @default(cuid())
  name            String
  address         String
  type            String
  coverImage      String?
  coverImageHint  String?
  surface         String
  features        String[]
  rating          Float
  checkIns        Int
  status          String // PENDING_MODERATION, APPROVED, REJECTED
  creatorId       String
  creator         User     @relation(fields: [creatorId], references: [id])
  createdAt       DateTime @default(now())
}

model Challenge {
  id          String   @id @default(cuid())
  title       String
  description String
  discipline  String
  wager       Int
  creator     User     @relation("CreatorChallenges", fields: [creatorId], references: [id])
  creatorId   String
  opponent    User?    @relation("OpponentChallenges", fields: [opponentId], references: [id])
  opponentId  String?
  status      ChallengeStatus
  result      String?
  createdAt   DateTime @default(now())
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model FriendRequest {
  id          String @id @default(cuid())
  from        User @relation("SentRequests", fields: [fromId], references: [id])
  fromId      String
  to          User @relation("ReceivedRequests", fields: [toId], references: [id])
  toId        String
  status      String @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([fromId, toId])
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  href      String?
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model LfgLobby {
    id            String @id @default(cuid())
    creator       User @relation(fields: [creatorId], references: [id])
    creatorId     String
    type          LfgType @default(GAME)
    sport         String
    location      String
    playgroundId  String?
    startTime     DateTime
    endTime       DateTime
    playersNeeded Int
    playersJoined Int @default(1)
    comment       String
}

enum LfgType {
    GAME
    TRAINING
}

model Sponsor {
    id              String @id @default(cuid())
    name            String @unique
    logo            String?
    logoHint        String?
    description     String
    profileUrl      String
    interests       String[]
    teams           Team[]
    promotions      Promotion[]
}

model Promotion {
    id              String @id @default(cuid())
    name            String
    description     String
    prize           String
    cost            String
    imageDataUri    String
    imageHint       String
    endDate         DateTime
    organizer       User @relation(fields: [organizerId], references: [id])
    organizerId     String
    sponsor         Sponsor? @relation(fields: [sponsorId], references: [id])
    sponsorId       String?
    createdAt       DateTime @default(now())
}

model StoreItem {
    id          String @id @default(cuid())
    name        String
    description String
    price       Float
    image       String?
    imageHint   String?
    category    String
    isRealMoney Boolean @default(false)
}

model Exercise {
  id              String @id @default(cuid())
  name            String @unique
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  techniqueTips   String[]
  commonMistakes  String[]
  alternatives    String[]
}

model TrainingLog {
  id          String @id @default(cuid())
  user        User @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  workoutName String
  status      String // completed, planned, skipped
  mood        String? // great, good, ok, bad
  notes       String?
  coachNotes  String?
  exercises   LoggedExercise[]
}

model LoggedExercise {
  id                String @id @default(cuid())
  trainingLog       TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId     String
  exercise          Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId        String
  notes             String?
  isSupersetWithPrevious Boolean?
  sets              LoggedSet[]
}

model LoggedSet {
  id              String @id @default(cuid())
  loggedExercise    LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId  String
  plannedReps       String
  plannedWeight     String
  loggedReps        Int?
  loggedWeight      Float?
  rpe               Int?
  isCompleted       Boolean @default(false)
}

model FaqItem {
    id         String @id @default(cuid())
    question   String
    answer     String
    category   String
}

model League {
    id            String @id @default(cuid())
    name          String
    description   String
    game          String
    image         String?
    imageHint     String?
    teams         LeagueTeam[]
    matches       Match[]
}

model LeagueTeam {
    id       String @id @default(cuid())
    league   League @relation(fields: [leagueId], references: [id])
    leagueId String
    team     Team @relation(fields: [teamId], references: [id])
    teamId   String @unique
    played   Int
    wins     Int
    losses   Int
    draws    Int
    points   Int
}

model TrainingProgram {
  id                  String           @id @default(cuid())
  name                String
  description         String
  goal                String
  daysPerWeek         Int
  splitType           String
  author              String
  coverImage          String
  coverImageHint      String
  isAiGenerated       Boolean          @default(false)
  weeklySplit         WorkoutDay[]
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
}

model WorkoutDay {
  id              String           @id @default(cuid())
  day             Int
  title           String
  program         TrainingProgram  @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId       String
  exercises       ExerciseDetail[]
}

model ExerciseDetail {
  id                      String      @id @default(cuid())
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?    @default(false)
  technique               String?
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
  workoutDayId            String
}
