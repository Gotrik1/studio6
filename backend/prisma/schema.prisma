// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String        @id @default(cuid())
  email                   String        @unique
  name                    String
  passwordHash            String
  avatar                  String?
  xp                      Int           @default(0)
  role                    String
  status                  String
  location                String?
  dateOfBirth             DateTime?
  mainSport               String?
  preferredSports         String[]
  isVerified              Boolean       @default(false)
  telegram                String?
  discord                 String?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  teamsAsCaptain          Team[]        @relation("Captain")
  teamsAsMember           Team[]        @relation("Members")
  organizedTournaments    Tournament[]
  friends                 User[]        @relation("Friends")
  friendOf                User[]        @relation("Friends")
  sentFriendRequests      FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[] @relation("ReceivedFriendRequests")
  notifications           Notification[]
  achievements            UserAchievement[]
  matchEvents             MatchEvent[]
  organizedPromotions     Promotion[]
  createdPlaygrounds      Playground[]
  reviews                 PlaygroundReview[]
  trainingLogs            TrainingLog[]
  measurements            Measurement[]
  sentTrainingProposals   TrainingProposal[] @relation("SentTrainingProposals")
  receivedTrainingProposals TrainingProposal[] @relation("ReceivedTrainingProposals")
  inventory               InventoryItem[]
  foodLog                 FoodLogEntry[]
  pollVotes               PollVote[]
  sentAnnouncements       TournamentAnnouncement[]
  reports                 Report[]        @relation("ReportedUsers")
  filedReports            Report[]        @relation("Reporters")
  resolvedReports         Report[]        @relation("Resolvers")
  judgedMatches           Match[]         @relation("Judge")
  coachedBy               User?           @relation("Coaching", fields: [coachId], references: [id])
  coaching                User[]          @relation("Coaching")
  coachId                 String?
  coachProfile            CoachProfile?
  careerHistory           CareerHistory[]
  activities              Activity[]
}

model CareerHistory {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  teamName   String
  period     String
  role       String
  review     String
  createdAt  DateTime @default(now())
}

model CoachProfile {
  id             String    @id @default(cuid())
  user           User      @relation(fields: [userId], references: [id])
  userId         String    @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float     @default(0)
  price          Decimal   @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fromId, toId])
}

model Team {
  id                 String              @id @default(cuid())
  name               String
  logo               String?
  dataAiHint         String?
  game               String
  motto              String?
  description        String?
  rank               Int                 @default(0)
  wins               Int                 @default(0)
  losses             Int                 @default(0)
  draws              Int                 @default(0)
  seekingSponsorship Boolean             @default(false)
  slug               String              @unique
  captain            User                @relation("Captain", fields: [captainId], references: [id])
  captainId          String
  creator            User                @relation(fields: [creatorId], references: [id])
  creatorId          String
  members            User[]              @relation("Members")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]             @relation("Team1")
  matchesAsTeam2     Match[]             @relation("Team2")
  matchEvents        MatchEvent[]
  homePlayground     Playground?         @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?
  sponsors           Sponsor[]
  teamApplications   TeamApplication[]
  teamPractices      TeamPractice[]
  chat               Chat?               @relation(name: "TeamChat")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model TeamPractice {
  id          String      @id @default(cuid())
  team        Team        @relation(fields: [teamId], references: [id])
  teamId      String
  title       String
  description String?
  date        DateTime
  playground  Playground  @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  game                  String
  description           String?
  status                String // REGISTRATION, ONGOING, FINISHED
  type                  String // team, individual
  format                String // single_elimination, round_robin, groups
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  organizer             User                     @relation(fields: [organizerId], references: [id])
  organizerId           String
  teams                 Team[]
  matches               Match[]
  judges                User[]                   @relation("Judge")
  media                 TournamentMedia[]
  announcements         TournamentAnnouncement[]
  sponsors              Sponsor[]
  medicalPartners       MedicalPartner[]         @relation("TournamentMedicalStaff")
  teamApplications      TeamApplication[]
}

model TournamentMedia {
  id          String     @id @default(cuid())
  tournament  Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type        String // IMAGE, VIDEO, AUDIO
  src         String
  description String?
  hint        String?
  createdAt   DateTime   @default(now())
}

model Match {
  id             String          @id @default(cuid())
  team1          Team            @relation("Team1", fields: [team1Id], references: [id])
  team1Id        String
  team2          Team            @relation("Team2", fields: [team2Id], references: [id])
  team2Id        String
  team1Score     Int?
  team2Score     Int?
  status         MatchStatus     @default(PLANNED)
  scheduledAt    DateTime
  finishedAt     DateTime?
  tournament     Tournament?     @relation(fields: [tournamentId], references: [id])
  tournamentId   String?
  events         MatchEvent[]
  round          Int?
  disputeReason  String?
  disputeOpenedAt DateTime?
  resolution     String?
  refereeName    String?
  judge          User?           @relation("Judge", fields: [judgeId], references: [id])
  judgeId        String?
  playgroundId   String?
  location       String?
  league         League?         @relation(fields: [leagueId], references: [id])
  leagueId       String?
  createdAt      DateTime        @default(now())
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model MatchEvent {
  id        String       @id @default(cuid())
  match     Match        @relation(fields: [matchId], references: [id])
  matchId   String
  team      Team?        @relation(fields: [teamId], references: [id])
  teamId    String?
  player    User?        @relation(fields: [playerId], references: [id])
  playerId  String?
  timestamp DateTime     @default(now())
  type      MatchEventType
  metadata  Json?
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
  SHOT
  SHOT_ON_TARGET
  CORNER
  FOUL
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  participants User[]
  messages     Message[]
  team         Team?     @relation(name: "TeamChat", fields: [teamId], references: [id])
  teamId       String?   @unique
  type         String    @default("PRIVATE") // PRIVATE, GROUP
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  type      NotificationType
  message   String
  href      String?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  TOURNAMENT_START
  TEAM_INVITE
  ANNOUNCEMENT
  OTHER
}

model Promotion {
  id            String    @id @default(cuid())
  name          String
  description   String
  prize         String
  imageDataUri  String
  imageHint     String
  cost          String
  endDate       DateTime
  organizer     User      @relation(fields: [organizerId], references: [id])
  organizerId   String
  sponsor       Sponsor?  @relation(fields: [sponsorId], references: [id])
  sponsorId     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Sponsor {
  id          String       @id @default(cuid())
  name        String       @unique
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  promotions  Promotion[]
  teams       Team[]
  tournaments Tournament[]
}

model Playground {
  id             String             @id @default(cuid())
  name           String
  address        String
  type           String
  coverImage     String?
  coverImageHint String?
  surface        String
  features       String[]
  rating         Float
  checkIns       Int
  status         PlaygroundStatus   @default(PENDING_MODERATION)
  creator        User               @relation(fields: [creatorId], references: [id])
  creatorId      String
  reviews        PlaygroundReview[]
  reports        PlaygroundReport[]
  homeForTeams   Team[]
  practices      TeamPractice[]
  createdAt      DateTime           @default(now())
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
  REJECTED
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String       @id @default(cuid())
  playground   Playground   @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User         @relation(fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus @default(PENDING)
  createdAt    DateTime     @default(now())
}

model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("Reporters", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportedUsers", fields: [reportedUserId], references: [id])
  reportedUserId String
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  createdAt      DateTime     @default(now())
  resolvedAt     DateTime?
  resolver       User?        @relation("Resolvers", fields: [resolverId], references: [id])
  resolverId     String?
  resolution     String?
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  status       TeamApplicationStatus @default(PENDING)
  message      String?
  createdAt    DateTime              @default(now())

  @@unique([teamId, userId, tournamentId])
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  wager        Int
  creator      User            @relation(fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation(fields: [opponentId], references: [id])
  opponentId   String?
  status       ChallengeStatus @default(OPEN)
  result       String?
  createdAt    DateTime        @default(now())
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Sport {
  id        String      @id @unique
  name      String
  icon      String
  category  String
  challenges Challenge[]
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[] @relation("TournamentMedicalStaff")
}

model LfgLobby {
  id           String      @id @default(cuid())
  creator      User        @relation(fields: [creatorId], references: [id])
  creatorId    String
  players      User[]
  type         LfgLobbyType
  sport        String
  location     String
  playgroundId String?
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  comment      String
  createdAt    DateTime    @default(now())
}

enum LfgLobbyType {
  GAME
  TRAINING
}

// Training related models
model TrainingProgram {
  id              String         @id @default(cuid())
  name            String
  description     String
  goal            String // "Набор массы", "Снижение веса", "Рельеф", "Сила"
  daysPerWeek     Int
  splitType       String // "Full-body", "Split", "Upper/Lower"
  author          String // "ProDvor Team", "Coach Anna", "ProDvor AI", user.name
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean        @default(false)
  weeklySplit     WorkoutDay[]
  proposals       TrainingProposal[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  program           TrainingProgram   @relation(fields: [programId], references: [id])
  programId         String
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
  name                    String
  sets                    String // e.g., "3-4"
  reps                    String // e.g., "8-12"
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model TrainingLog {
  id          String            @id @default(cuid())
  user        User              @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  workoutName String?
  status      TrainingLogStatus
  exercises   LoggedExercise[]
  mood        Mood?
  notes       String?
  coachNotes  String?
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

model LoggedExercise {
  id                String       @id @default(cuid())
  trainingLog       TrainingLog  @relation(fields: [trainingLogId], references: [id])
  trainingLogId     String
  exercise          Exercise     @relation(fields: [exerciseId], references: [id])
  exerciseId        String
  notes             String?
  sets              LoggedSet[]
  isSupersetWithPrevious Boolean?
}

model LoggedSet {
  id               String          @id @default(cuid())
  loggedExercise   LoggedExercise  @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean
}

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  loggedEntries  LoggedExercise[]
}

model InventoryItem {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  name            String
  category        String // "Обувь", "Одежда", "Аксессуары", "Периферия"
  type            String // "Футбольные бутсы", "Игровая мышь"
  purchaseDate    DateTime
  lifespanMonths  Int
  image           String?
  imageHint       String?
  createdAt       DateTime @default(now())
}

model StoreItem {
  id           String  @id @default(cuid())
  name         String
  description  String
  price        Float
  image        String?
  imageHint    String?
  category     String
  isRealMoney  Boolean @default(false)
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model FoodItem {
  id           String         @id @default(cuid())
  name         String         @unique
  category     String // "Продукты", "Спортивное питание"
  image        String?
  imageHint    String?
  calories     Float
  protein      Float
  fat          Float
  carbs        Float
  description  String?
  logEntries   FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String // "Завтрак", "Обед", "Ужин", "Перекус"
  createdAt  DateTime @default(now())
}

model Measurement {
  id      String   @id @default(cuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

model TrainingProposal {
  id        String              @id @default(cuid())
  from      User                @relation("SentTrainingProposals", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedTrainingProposals", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  program   TrainingProgram?    @relation(fields: [programId], references: [id])
  programId String?
  comment   String?
  status    TrainingProposalStatus @default(PENDING)
  createdAt DateTime            @default(now())
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Quest {
  id          String    @id @default(cuid())
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  type        QuestType
  createdAt   DateTime  @default(now())
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

model Poll {
  id        String     @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  votes     PollVote[]
  isActive  Boolean    @default(true)
  author    User?      @relation(fields: [authorId], references: [id])
  authorId  String?
  createdAt DateTime   @default(now())
}

model PollOption {
  id        String     @id @default(cuid())
  text      String
  poll      Poll       @relation(fields: [pollId], references: [id])
  pollId    String
  votes     PollVote[]
}

model PollVote {
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  poll       Poll       @relation(fields: [pollId], references: [id])
  pollId     String
  pollOption PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt  DateTime   @default(now())

  @@unique([userId, pollId])
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
}

model Activity {
  id           String      @id @default(cuid())
  type         ActivityType
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  metadata     Json
  playgroundId String?
  createdAt    DateTime    @default(now())
}

enum ActivityType {
  STATUS_POSTED
  PLAYGROUND_CHECK_IN
  MATCH_PLAYED
  TOURNAMENT_REGISTERED
  TEAM_JOINED
  ACHIEVEMENT_UNLOCKED
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int
  wins     Int
  losses   Int
  draws    Int
  points   Int

  @@unique([leagueId, teamId])
}
