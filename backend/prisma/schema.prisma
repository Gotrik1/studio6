
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(cuid())
  name                    String
  email                   String    @unique
  passwordHash            String
  role                    String
  avatar                  String?
  status                  String    @default("Активен")
  xp                      Int       @default(0)
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  teamsAsCaptain          Team[]    @relation("TeamCaptain")
  teamsAsCreator          Team[]    @relation("TeamCreator")
  teamsAsMember           Team[]    @relation("TeamMembers")
  organizedTournaments    Tournament[]
  activities              Activity[]
  friends                 User[]    @relation("Friendship")
  friendsOf               User[]    @relation("Friendship")
  sentFriendRequests      FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[] @relation("ReceivedFriendRequests")
  authoredMessages        Message[]
  createdChallenges       Challenge[] @relation("ChallengeCreator")
  acceptedChallenges      Challenge[] @relation("ChallengeOpponent")
  createdPlaygrounds      Playground[]
  organizedPromotions     Promotion[] @relation("PromotionOrganizer")
  coachProfile            CoachProfile?
  coaching                User[]    @relation("CoachingRelationship")
  coachedBy               User?     @relation("CoachingRelationship", fields: [coachedById], references: [id])
  coachedById             String?
  judgedMatches           Match[]   @relation("JudgedMatches")
  trainingLogs            TrainingLog[]
  notifications           Notification[]
  gallery                 GalleryItem[]
  careerHistory           CareerHistoryItem[]
}

model CoachProfile {
    id              String @id @default(cuid())
    user            User   @relation(fields: [userId], references: [id])
    userId          String @unique
    specialization  String
    description     String
    rating          Float
    price           Decimal
    tags            String[]
}

model Team {
  id                  String   @id @default(cuid())
  name                String
  slug                String   @unique
  game                String
  motto               String?
  description         String?
  logo                String?
  dataAiHint          String?
  homePlaygroundId    String?
  seekingSponsorship  Boolean  @default(true)
  wins                Int      @default(0)
  losses              Int      @default(0)
  draws               Int      @default(0)
  rank                Int      @default(0)
  creator             User     @relation("TeamCreator", fields: [creatorId], references: [id])
  creatorId           String
  captain             User     @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId           String
  members             User[]   @relation("TeamMembers")
  tournaments         Tournament[]
  matchesAsTeam1      Match[]  @relation("Team1Matches")
  matchesAsTeam2      Match[]  @relation("Team2Matches")
  leagues             LeagueTeam[]
  sponsors            Sponsor[] @relation("TeamSponsors")
}

model Match {
  id              String      @id @default(cuid())
  team1           Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  location        String?
  tournament      Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  league          League?     @relation(fields: [leagueId], references: [id])
  leagueId        String?
  referee         User?       @relation("JudgedMatches", fields: [refereeId], references: [id])
  refereeId       String?
}

model Tournament {
  id                      String   @id @default(cuid())
  name                    String
  slug                    String   @unique
  game                    String
  description             String?
  type                    String
  format                  String
  category                String
  location                String
  participantCount        Int
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  prizePool               String?
  rules                   String?
  status                  TournamentStatus
  organizer               User     @relation(fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
  bannerImage             String?
  bannerImageHint         String?
}

model Activity {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  type        ActivityType
  metadata    Json
  timestamp   DateTime @default(now())
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([fromId, toId])
}

model Message {
  id        String   @id @default(cuid())
  chatId    String // Can be a user ID for DMs or a team ID for team chats
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  text      String
  createdAt DateTime @default(now())
}

model Notification {
    id      String @id @default(cuid())
    user    User   @relation(fields: [userId], references: [id])
    userId  String
    type    String
    message String
    href    String?
    isRead  Boolean @default(false)
    createdAt DateTime @default(now())
}

model Playground {
    id              String  @id @default(cuid())
    name            String
    address         String
    type            String
    coverImage      String?
    coverImageHint  String?
    surface         String
    features        String[]
    rating          Float   @default(0)
    checkIns        Int     @default(0)
    status          String  // APPROVED, PENDING_MODERATION
    creator         User    @relation(fields: [creatorId], references: [id])
    creatorId       String
}

model LfgLobby {
    id              String @id @default(cuid())
    creator         User   @relation(fields: [creatorId], references: [id])
    creatorId       String
    type            LfgType // GAME, TRAINING
    sport           String
    location        String
    playgroundId    String?
    startTime       DateTime
    endTime         DateTime
    playersNeeded   Int
    playersJoined   Int    @default(1)
    comment         String
}

model Challenge {
    id          String @id @default(cuid())
    title       String
    description String
    discipline  String
    wager       Int @default(0)
    creator     User   @relation("ChallengeCreator", fields: [creatorId], references: [id])
    creatorId   String
    opponent    User?  @relation("ChallengeOpponent", fields: [opponentId], references: [id])
    opponentId  String?
    status      ChallengeStatus @default(OPEN)
    result      String?
    createdAt   DateTime @default(now())
}

model Sponsor {
    id          String @id @default(cuid())
    name        String @unique
    logo        String?
    logoHint    String?
    description String
    profileUrl  String
    interests   String[]
    teams       Team[] @relation("TeamSponsors")
    promotions  Promotion[]
}

model Promotion {
    id          String  @id @default(cuid())
    name        String
    description String
    prize       String
    cost        String
    imageDataUri String
    imageHint   String
    endDate     DateTime
    organizer   User    @relation("PromotionOrganizer", fields: [organizerId], references: [id])
    organizerId String
    sponsor     Sponsor? @relation(fields: [sponsorId], references: [id])
    sponsorId   String?
    createdAt   DateTime @default(now())
}

model StoreItem {
    id          String  @id @default(cuid())
    name        String
    description String
    price       Float
    image       String?
    imageHint   String?
    category    String
    isRealMoney Boolean
}

model Sport {
    id       String @id
    name     String
    icon     String
    category String
}

model League {
    id          String  @id @default(cuid())
    name        String
    description String
    game        String
    image       String?
    imageHint   String?
    teams       LeagueTeam[]
    matches     Match[]
}

model LeagueTeam {
    id        String  @id @default(cuid())
    league    League @relation(fields: [leagueId], references: [id])
    leagueId  String
    team      Team   @relation(fields: [teamId], references: [id])
    teamId    String
    played    Int
    wins      Int
    draws     Int
    losses    Int
    points    Int
    
    @@unique([leagueId, teamId])
}

model Exercise {
    id              String  @id @default(cuid())
    name            String  @unique
    description     String
    category        String
    equipment       String
    image           String?
    imageHint       String?
    techniqueTips   String[]
    commonMistakes  String[]
    alternatives    String[]
    logEntries      LoggedExercise[]
}

model TrainingProgram {
    id              String @id @default(cuid())
    name            String
    description     String
    goal            String
    daysPerWeek     Int
    splitType       String
    author          String
    coverImage      String
    coverImageHint  String
    isAiGenerated   Boolean @default(false)
    weeklySplit     WorkoutDay[]
}

model WorkoutDay {
    id              String @id @default(cuid())
    program         TrainingProgram @relation(fields: [programId], references: [id])
    programId       String
    day             Int
    title           String
    exercises       ExerciseDetail[]
}

model ExerciseDetail {
    id                      String @id @default(cuid())
    workoutDay              WorkoutDay @relation(fields: [workoutDayId], references: [id])
    workoutDayId            String
    name                    String
    sets                    String
    reps                    String
    plannedWeight           String?
    isSupersetWithPrevious  Boolean?
    technique               String?
}

model TrainingLog {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  workoutName String
  status      String // completed, planned, skipped
  mood        String? // great, good, ok, bad
  notes       String?
  coachNotes  String?
  exercises   LoggedExercise[]
}

model LoggedExercise {
  id              String   @id @default(cuid())
  trainingLog     TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId   String
  exercise        Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId      String
  notes           String?
  sets            LoggedSet[]
}

model LoggedSet {
    id                  String @id @default(cuid())
    loggedExercise      LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
    loggedExerciseId    String
    plannedReps         String
    plannedWeight       String
    loggedReps          Int?
    loggedWeight        Float?
    rpe                 Int? // Rate of Perceived Exertion
    isCompleted         Boolean @default(false)
}

model GalleryItem {
    id          String @id @default(cuid())
    user        User   @relation(fields: [userId], references: [id])
    userId      String
    src         String
    alt         String
    dataAiHint  String
    createdAt   DateTime @default(now())
}

model CareerHistoryItem {
    id          String @id @default(cuid())
    user        User   @relation(fields: [userId], references: [id])
    userId      String
    teamName    String
    period      String
    role        String
    review      String
    createdAt   DateTime @default(now())
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
}

enum ActivityType {
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  STATUS_UPDATED
}

enum LfgType {
    GAME
    TRAINING
}

enum ChallengeStatus {
    OPEN
    IN_PROGRESS
    COMPLETED
    CANCELLED
}
