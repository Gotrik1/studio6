// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                 @id @default(cuid())
  name                    String
  email                   String                 @unique
  passwordHash            String
  role                    String                 @default("Игрок")
  status                  String                 @default("Активен")
  avatar                  String?
  xp                      Int                    @default(0)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  teamsAsCaptain          Team[]                 @relation("Captain")
  teamsAsCreator          Team[]                 @relation("Creator")
  teamsAsMember           Team[]                 @relation("TeamMembers")
  organizedTournaments    Tournament[]
  organizedPromotions     Promotion[]
  activities              Activity[]
  friends                 User[]                 @relation("Friendship")
  friendsOf               User[]                 @relation("Friendship")
  sentFriendRequests      FriendRequest[]        @relation("SentRequests")
  receivedFriendRequests  FriendRequest[]        @relation("ReceivedRequests")
  notifications           Notification[]
  inventory               InventoryItem[]
  measurements            Measurement[]
  foodLog                 FoodLogEntry[]
  coaching                User[]                 @relation("CoachingRelationship")
  coachedBy               User?                  @relation("CoachingRelationship", fields: [coachedById], references: [id])
  coachedById             String?
  judgedMatches           Match[]                @relation("JudgedMatches")
  tournamentsAsJudge      Tournament[]           @relation("TournamentJudges")
  trainingProposalsFrom   TrainingProposal[]     @relation("ProposalsFrom")
  trainingProposalsTo     TrainingProposal[]     @relation("ProposalsTo")
  pollVotes               PollVote[]
  trainingLogs            TrainingLog[]
  TournamentAnnouncement  TournamentAnnouncement[]
}

model Team {
  id                  String             @id @default(cuid())
  name                String
  slug                String             @unique
  logo                String?
  dataAiHint          String?
  game                String
  motto               String?
  rank                Int                @default(999)
  wins                Int                @default(0)
  losses              Int                @default(0)
  draws               Int                @default(0)
  seekingSponsorship  Boolean            @default(false)
  captain             User               @relation("Captain", fields: [captainId], references: [id])
  captainId           String
  creator             User               @relation("Creator", fields: [creatorId], references: [id])
  creatorId           String
  members             User[]             @relation("TeamMembers")
  tournaments         Tournament[]
  matchesAsTeam1      Match[]            @relation("Team1Matches")
  matchesAsTeam2      Match[]            @relation("Team2Matches")
  homePlaygroundId    String?
  homePlayground      Playground?        @relation(fields: [homePlaygroundId], references: [id])
  applications        TeamApplication[]
  sponsors            Sponsor[]
  leagues             LeagueTeam[]
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  game                    String
  description             String?
  type                    String
  format                  String
  category                String
  location                String
  participantCount        Int
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  organizer               User                     @relation(fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
  status                  String
  applications            TeamApplication[]
  judges                  User[]                   @relation("TournamentJudges")
  sponsors                Sponsor[]
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  league                  League?                  @relation(fields: [leagueId], references: [id])
  leagueId                String?
}

model Match {
  id              String      @id @default(cuid())
  team1           Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournament      Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  league          League?     @relation(fields: [leagueId], references: [id])
  leagueId        String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  referee         User?       @relation("JudgedMatches", fields: [refereeId], references: [id])
  refereeId       String?
  location        String?
  playgroundId    String?
  playground      Playground? @relation(fields: [playgroundId], references: [id])
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  tournament   Tournament            @relation(fields: [tournamentId], references: [id])
  tournamentId String
  status       TeamApplicationStatus @default(PENDING)
  createdAt    DateTime              @default(now())

  @@unique([teamId, tournamentId])
}

model Playground {
  id             String      @id @default(cuid())
  name           String
  address        String
  type           String
  coverImage     String?
  coverImageHint String?
  surface        String
  features       String[]
  rating         Float
  checkIns       Int
  status         String      @default("PENDING_MODERATION") // PENDING_MODERATION, APPROVED, REJECTED
  creatorId      String
  creator        User        @relation(fields: [creatorId], references: [id])
  matches        Match[]
  homeForTeams   Team[]
  createdAt      DateTime    @default(now())
}

model Activity {
  id        String       @id @default(cuid())
  type      ActivityType
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  metadata  Json
  timestamp DateTime     @default(now())

  @@index([userId, timestamp])
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fromId, toId])
}

model Message {
  id        String   @id @default(cuid())
  text      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  createdAt DateTime @default(now())
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         String // PRIVATE or GROUP
  participants User[]
  messages     Message[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  message   String
  isRead    Boolean  @default(false)
  href      String?
  createdAt DateTime @default(now())
}

model StoreItem {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean   @default(false)
  createdAt   DateTime  @default(now())
}

model Challenge {
  id          String          @id @default(cuid())
  title       String
  description String
  discipline  String
  wager       Int             @default(0)
  status      ChallengeStatus @default(OPEN)
  creatorId   String
  creator     User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  opponentId  String?
  opponent    User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  result      String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Sponsor {
  id            String       @id @default(cuid())
  name          String
  logo          String?
  logoHint      String?
  description   String
  profileUrl    String
  interests     String[]
  teams         Team[]
  tournaments   Tournament[]
  promotions    Promotion[]
}

model Promotion {
  id            String    @id @default(cuid())
  name          String
  description   String
  prize         String
  cost          String
  imageDataUri  String
  imageHint     String
  endDate       DateTime
  organizerId   String
  organizer     User      @relation(fields: [organizerId], references: [id])
  sponsorId     String?
  sponsor       Sponsor?  @relation(fields: [sponsorId], references: [id])
  createdAt     DateTime  @default(now())
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String   @id @default(cuid())
  league   League   @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team     @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int
  wins     Int
  losses   Int
  draws    Int
  points   Int

  @@unique([leagueId, teamId])
}

model Sport {
  id       String @id
  name     String
  icon     String
  category String
}

model LfgLobby {
  id           String       @id @default(cuid())
  type         LfgLobbyType
  sport        String
  location     String
  playgroundId String?
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  comment      String
  creatorId    String
  creator      User         @relation(fields: [creatorId], references: [id])
  players      User[]
  createdAt    DateTime     @default(now())
}

model Exercise {
  id             String          @id @default(cuid())
  name           String          @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  techniqueTips  String[]
  commonMistakes String[]
  alternatives   String[]
  loggedExercises LoggedExercise[]
}

model TrainingProgram {
  id              String         @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String?
  coverImageHint  String?
  isAiGenerated   Boolean        @default(false)
  weeklySplit     WorkoutDay[]
  createdAt       DateTime       @default(now())
}

model WorkoutDay {
  id              String            @id @default(cuid())
  day             Int
  title           String
  program         TrainingProgram   @relation(fields: [programId], references: [id])
  programId       String
  exercises       WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
}

model TrainingLog {
  id          String           @id @default(cuid())
  userId      String
  user        User             @relation(fields: [userId], references: [id])
  date        DateTime
  workoutName String
  status      String // planned, completed, skipped
  notes       String?
  coachNotes  String?
  mood        String? // great, good, ok, bad
  exercises   LoggedExercise[]
}

model LoggedExercise {
  id             String      @id @default(cuid())
  trainingLog    TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId  String
  exercise       Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId     String
  notes          String?
  sets           LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String
  plannedWeight    String
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean        @default(false)
}

model InventoryItem {
    id              String      @id @default(cuid())
    userId          String
    user            User        @relation(fields: [userId], references: [id])
    name            String
    category        String
    type            String
    purchaseDate    DateTime
    lifespanMonths  Int
    image           String?
    imageHint       String?
    createdAt       DateTime    @default(now())
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model FoodItem {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String
  image       String?
  imageHint   String?
  calories    Int
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String // Завтрак, Обед, Ужин, Перекус
  createdAt  DateTime @default(now())
}

model Measurement {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  date      DateTime
  weight    Float
  bodyFat   Float?
  chest     Float?
  waist     Float?
  hips      Float?
  biceps    Float?
  thigh     Float?
}

model TrainingProposal {
  id        String   @id @default(cuid())
  fromId    String
  from      User     @relation("ProposalsFrom", fields: [fromId], references: [id])
  toId      String
  to        User     @relation("ProposalsTo", fields: [toId], references: [id])
  sport     String
  date      DateTime
  comment   String?
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
}

model Poll {
    id          String      @id @default(cuid())
    title       String
    question    String
    isActive    Boolean     @default(true)
    createdAt   DateTime    @default(now())
    options     PollOption[]
    votes       PollVote[]
}

model PollOption {
    id          String      @id @default(cuid())
    text        String
    poll        Poll        @relation(fields: [pollId], references: [id])
    pollId      String
    votes       PollVote[]
}

model PollVote {
    id           String      @id @default(cuid())
    poll         Poll        @relation(fields: [pollId], references: [id])
    pollId       String
    pollOption   PollOption  @relation(fields: [pollOptionId], references: [id])
    pollOptionId String
    user         User        @relation(fields: [userId], references: [id])
    userId       String
    createdAt    DateTime    @default(now())

    @@unique([userId, pollId])
}

model Quest {
    id          String      @id @default(cuid())
    title       String
    description String
    reward      Int
    goal        Int
    href        String
    type        QuestType   @default(SPECIAL)
    createdAt   DateTime    @default(now())
}

model CoachProfile {
    id              String  @id @default(cuid())
    user            User    @relation(fields: [userId], references: [id])
    userId          String  @unique
    specialization  String
    description     String
    tags            String[]
    rating          Float
    price           Decimal
}

model MedicalPartner {
    id              String      @id @default(cuid())
    name            String
    specialization  String
    contact         String
    tournaments     Tournament[]
}

model TournamentAnnouncement {
    id           String     @id @default(cuid())
    tournament   Tournament @relation(fields: [tournamentId], references: [id])
    tournamentId String
    sender       User       @relation(fields: [senderId], references: [id])
    senderId     String
    subject      String
    message      String
    sentTo       Int
    createdAt    DateTime   @default(now())
}

enum ActivityType {
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  STATUS_POSTED
  ACHIEVEMENT_UNLOCKED
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum ChallengeStatus {
    OPEN
    IN_PROGRESS
    COMPLETED
    CANCELLED
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum QuestType {
    DAILY
    WEEKLY
    SPECIAL
}
