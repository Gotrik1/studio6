// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS

enum Role {
  ADMINISTRATOR
  MODERATOR
  JUDGE
  ORGANIZER
  COACH
  MANAGER
  SPONSOR
  PLAYER
  CAPTAIN
  FAN
}

enum UserStatus {
  ACTIVE
  BANNED
  PENDING
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

enum TournamentType {
  team
  individual
}

enum TournamentFormat {
  single_elimination
  round_robin
  groups
}


// MODELS

model User {
  id                  String               @id @default(cuid())
  name                String
  email               String               @unique
  passwordHash        String
  avatar              String?
  role                Role                 @default(PLAYER)
  status              UserStatus           @default(ACTIVE)
  xp                  Int                  @default(0)
  location            String?
  mainSport           String?
  isVerified          Boolean              @default(false)
  dateOfBirth         DateTime?
  preferredSports     String[]
  telegram            String?              @unique
  discord             String?              @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  friends             User[]               @relation("Friends")
  friendOf            User[]               @relation("Friends")
  sentFriendRequests  FriendRequest[]      @relation("SentRequests")
  receivedFriendRequests FriendRequest[]   @relation("ReceivedRequests")
  createdTeams        Team[]               @relation("CreatedTeams")
  captainOf           Team[]               @relation("CaptainOf")
  teamsAsMember       Team[]               @relation("TeamMembers")
  organizedTournaments Tournament[]        @relation("OrganizedTournaments")
  judgedMatches       Match[]              @relation("JudgedMatches")
  coachProfile        CoachProfile?
  coaching            User[]               @relation("CoachStudents")
  coach               User?                @relation("CoachStudents", fields: [coachId], references: [id])
  coachId             String?
  createdPlaygrounds  Playground[]
  organizedPromotions Promotion[]
  sentTrainingProposals TrainingProposal[] @relation("SentTrainingProposals")
  receivedTrainingProposals TrainingProposal[] @relation("ReceivedTrainingProposals")
  inventory           InventoryItem[]
  measurements        Measurement[]
  nutritionLog        FoodLogEntry[]
  trainingLogs        TrainingLog[]
  gallery             GalleryItem[]
  careerHistory       CareerHistory[]
  createdPolls        Poll[]
  pollVotes           PollVote[]
  createdQuests       Quest[]
  achievements        Achievement[]
  activities          Activity[]
  reportsSent         Report[]             @relation("ReportsSent")
  reportsReceived     Report[]             @relation("ReportsReceived")
  reportsResolved     Report[]             @relation("ReportsResolved")
  teamApplications    TeamApplication[]
  sentAnnouncements   TournamentAnnouncement[]
  judgedTournaments   Tournament[] @relation("JudgedTournaments")
}

model Team {
  id                   String              @id @default(cuid())
  name                 String
  slug                 String              @unique
  game                 String
  motto                String?
  logo                 String?
  dataAiHint           String?
  rank                 Int                 @default(0)
  wins                 Int                 @default(0)
  losses               Int                 @default(0)
  draws                Int                 @default(0)
  seekingSponsorship   Boolean             @default(false)
  description          String?             @db.Text
  goals                String?             @db.Text
  homePlaygroundId     String?
  creator              User                @relation("CreatedTeams", fields: [creatorId], references: [id])
  creatorId            String
  captain              User                @relation("CaptainOf", fields: [captainId], references: [id])
  captainId            String
  members              User[]              @relation("TeamMembers")
  tournaments          Tournament[]
  sponsors             Sponsor[]
  matchesAsTeam1       Match[]             @relation("Team1Matches")
  matchesAsTeam2       Match[]             @relation("Team2Matches")
  applications         TeamApplication[]
  teamPractices        TeamPractice[]
  chat                 Chat?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model Match {
  id                  String       @id @default(cuid())
  team1               Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id             String
  team2               Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id             String
  team1Score          Int?
  team2Score          Int?
  status              MatchStatus  @default(PLANNED)
  tournament          Tournament?  @relation(fields: [tournamentId], references: [id])
  tournamentId        String?
  league              League?      @relation(fields: [leagueId], references: [id])
  leagueId            String?
  events              MatchEvent[]
  scheduledAt         DateTime
  startedAt           DateTime?
  finishedAt          DateTime?
  location            String?
  playgroundId        String?
  disputeReason       String?
  disputeOpenedAt     DateTime?
  resolution          String?
  referee             User?        @relation("JudgedMatches", fields: [refereeId], references: [id])
  refereeId           String?
  refereeName         String? // For cases where referee is not a platform user
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model MatchEvent {
  id      String  @id @default(cuid())
  match   Match   @relation(fields: [matchId], references: [id])
  matchId String
  time    String
  event   String
  player  String
  team    String
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  description           String?                  @db.Text
  status                TournamentStatus         @default(REGISTRATION)
  game                  String
  organizer             User                     @relation("OrganizedTournaments", fields: [organizerId], references: [id])
  organizerId           String
  teams                 Team[]
  matches               Match[]
  announcements         TournamentAnnouncement[]
  sponsors              Sponsor[]
  judges                User[]                   @relation("JudgedTournaments")
  medicalPartners       MedicalPartner[]
  media                 TournamentMedia[]
  applications          TeamApplication[]
  category              String
  location              String
  type                  TournamentType
  format                TournamentFormat
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  prizePool             String?
  rules                 String?                  @db.Text
  bannerImage           String?
  bannerImageHint       String?
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String     @db.Text
  sentTo       Int
  createdAt    DateTime   @default(now())
}

model CoachProfile {
  id             String  @id @default(cuid())
  user           User    @relation(fields: [userId], references: [id])
  userId         String  @unique
  specialization String
  description    String  @db.Text
  tags           String[]
  rating         Float   @default(0)
  price          Decimal @default(0)
}

model Sport {
  id       String @id
  name     String @unique
  icon     String
  category String
}

model Sponsor {
  id          String       @id @default(cuid())
  name        String
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  teams       Team[]
  tournaments Tournament[]
  promotions  Promotion[]
}

model Promotion {
  id          String   @id @default(cuid())
  name        String
  description String
  prize       String
  sponsor     Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId   String?
  organizer   User     @relation(fields: [organizerId], references: [id])
  organizerId String
  imageDataUri String  @db.Text
  imageHint   String
  endDate     DateTime
  cost        String
  createdAt   DateTime @default(now())
}

model FriendRequest {
  id     String              @id @default(cuid())
  from   User                @relation("SentRequests", fields: [fromId], references: [id])
  fromId String
  to     User                @relation("ReceivedRequests", fields: [toId], references: [id])
  toId   String
  status FriendRequestStatus @default(PENDING)

  createdAt DateTime @default(now())
}

model TeamApplication {
  id           String                @id @default(cuid())
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  createdAt    DateTime              @default(now())
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         String // "PRIVATE" or "GROUP"
  participants User[]
  messages     Message[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
  createdAt    DateTime  @default(now())
}

model Message {
  id        String   @id @default(cuid())
  text      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  type      String // FRIEND_REQUEST, MATCH_RESULT, ANNOUNCEMENT etc.
  href      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Playground {
  id             String             @id @default(cuid())
  name           String
  address        String
  type           String
  coverImage     String?
  coverImageHint String?
  surface        String
  features       String[]
  rating         Float
  checkIns       Int
  status         String // APPROVED, PENDING_MODERATION
  creator        User               @relation(fields: [creatorId], references: [id])
  creatorId      String
  reviews        PlaygroundReview[]
  reports        PlaygroundReport[]
  practices      TeamPractice[]
  lobbies        LfgLobby[]
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String       @id @default(cuid())
  playground   Playground   @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User         @relation(fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus @default(PENDING)
  createdAt    DateTime     @default(now())
}

model LfgLobby {
  id           String       @id @default(cuid())
  type         LfgLobbyType
  sport        String
  location     String
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  players      User[]
  comment      String
  creator      User         @relation(fields: [creatorId], references: [id])
  creatorId    String
  createdAt    DateTime     @default(now())
}

model Challenge {
  id           String    @id @default(cuid())
  title        String
  description  String
  discipline   Sport     @relation(fields: [disciplineId], references: [id])
  disciplineId String
  wager        Int
  status       String // OPEN, IN_PROGRESS, COMPLETED, CANCELLED
  result       String?
  creator      User      @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?     @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  opponentId   String?
  createdAt    DateTime  @default(now())
}

model StoreItem {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Exercise {
  id             String           @id @default(cuid())
  name           String
  description    String           @db.Text
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  loggedItems    LoggedExercise[]
  createdAt      DateTime         @default(now())
}

model TrainingProgram {
  id              String               @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean              @default(false)
  weeklySplit     TrainingProgramDay[]
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  proposals       TrainingProposal[]
}

model TrainingProgramDay {
  id        String                 @id @default(cuid())
  program   TrainingProgram        @relation(fields: [programId], references: [id])
  programId String
  day       Int
  title     String
  exercises TrainingDayExercise[]
}

model TrainingDayExercise {
  id                      String             @id @default(cuid())
  day                     TrainingProgramDay @relation(fields: [dayId], references: [id])
  dayId                   String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model TrainingLog {
  id         String           @id @default(cuid())
  user       User             @relation(fields: [userId], references: [id])
  userId     String
  date       DateTime
  workoutName String
  status     String // planned, completed, skipped
  exercises  LoggedExercise[]
  mood       String?
  notes      String?
  coachNotes String?
}

model LoggedExercise {
  id            String      @id @default(cuid())
  trainingLog   TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId String
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  notes         String?
  sets          LoggedSet[]
}

model LoggedSet {
  id                 String         @id @default(cuid())
  loggedExercise     LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId   String
  plannedReps        String?
  plannedWeight      String?
  loggedReps         Int?
  loggedWeight       Float?
  rpe                Int? // Rate of Perceived Exertion
  isCompleted        Boolean        @default(false)
}

model TrainingProposal {
  id        String             @id @default(cuid())
  from      User               @relation("SentTrainingProposals", fields: [fromId], references: [id])
  fromId    String
  to        User               @relation("ReceivedTrainingProposals", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  program   TrainingProgram?   @relation(fields: [programId], references: [id])
  programId String?
  comment   String?
  status    TrainingProposalStatus @default(PENDING)
  createdAt DateTime           @default(now())
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  author    User         @relation(fields: [authorId], references: [id])
  authorId  String
  isActive  Boolean      @default(true)
  options   PollOption[]
  votes     PollVote[]
  createdAt DateTime     @default(now())
}

model PollOption {
  id      String     @id @default(cuid())
  poll    Poll       @relation(fields: [pollId], references: [id])
  pollId  String
  text    String
  votes   PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  option       PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime   @default(now())

  @@unique([userId, pollId])
}

model Quest {
  id          String    @id @default(cuid())
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  type        QuestType
  creator     User?     @relation(fields: [creatorId], references: [id])
  creatorId   String?
  createdAt   DateTime  @default(now())
}

model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  unlockedAt  DateTime @default(now())
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model Measurement {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  weight    Float
  bodyFat   Float?
  chest     Float?
  waist     Float?
  hips      Float?
  biceps    Float?
  thigh     Float?
  createdAt DateTime  @default(now())
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String         @unique
  category    String
  image       String?
  imageHint   String?
  calories    Int
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String
  createdAt  DateTime @default(now())
}

model FaqItem {
  id        String   @id @default(cuid())
  question  String
  answer    String   @db.Text
  category  String
  createdAt DateTime @default(now())
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
  createdAt   DateTime     @default(now())
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String @unique
  played   Int    @default(0)
  wins     Int    @default(0)
  losses   Int    @default(0)
  draws    Int    @default(0)
  points   Int    @default(0)
}

model GalleryItem {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  src         String
  alt         String
  dataAiHint  String
  createdAt   DateTime @default(now())
}

model CareerHistory {
  id       String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  teamName String
  period   String
  role     String
  review   String
  createdAt DateTime @default(now())
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}

model TournamentMedia {
  id          String     @id @default(cuid())
  tournament  Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type        String // IMAGE, VIDEO, AUDIO
  src         String
  description String?
  hint        String?
  createdAt   DateTime   @default(now())
}

model Activity {
  id           String      @id @default(cuid())
  type         ActivityType
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  metadata     Json
  playgroundId String?
  timestamp    DateTime    @default(now())
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model Report {
  id                String       @id @default(cuid())
  reporter          User         @relation("ReportsSent", fields: [reporterId], references: [id])
  reporterId        String
  reportedUser      User         @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  reportedUserId    String
  reason            String
  context           String       @db.Text
  status            ReportStatus @default(PENDING)
  resolver          User?        @relation("ReportsResolved", fields: [resolverId], references: [id])
  resolverId        String?
  resolution        String?      @db.Text
  resolvedAt        DateTime?
  createdAt         DateTime     @default(now())
}
