// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  SHOT
  SHOT_ON_TARGET
  CORNER
  FOUL
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  TEAM_INVITE
  CHALLENGE
  OTHER
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}


// Models

model User {
  id                        String                   @id @default(cuid())
  email                     String                   @unique
  name                      String
  passwordHash              String
  avatar                    String?
  role                      String                   @default("Игрок")
  status                    String                   @default("Активен")
  xp                        Int                      @default(0)
  dateOfBirth               DateTime?
  location                  String?
  mainSport                 String?
  isVerified                Boolean                  @default(false)
  preferredSports           String[]
  telegram                  String?
  discord                   String?
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  friends                   User[]                   @relation("Friendships")
  friendOf                  User[]                   @relation("Friendships")
  sentFriendRequests        FriendRequest[]          @relation("SentFriendRequests")
  receivedFriendRequests    FriendRequest[]          @relation("ReceivedFriendRequests")
  teamsAsMember             Team[]                   @relation("TeamMembers")
  createdTeams              Team[]                   @relation("CreatedTeams")
  captainedTeams            Team[]                   @relation("CaptainedTeams")
  achievements              UserAchievement[]
  organizedTournaments      Tournament[]             @relation("OrganizedTournaments")
  judgedMatches             Match[]                  @relation("JudgedMatches")
  judgedTournaments         Tournament[]             @relation("JudgedTournaments")
  coaching                  User[]                   @relation("CoachPlayer")
  coach                     User?                    @relation("CoachPlayer", fields: [coachId], references: [id])
  coachId                   String?
  reportsMade               Report[]                 @relation("ReportsMade")
  reportsReceived           Report[]                 @relation("ReportsReceived")
  resolvedReports           Report[]                 @relation("ReportsResolved")
  teamApplications          TeamApplication[]
  createdChallenges         Challenge[]              @relation("ChallengesCreated")
  acceptedChallenges        Challenge[]              @relation("ChallengesAccepted")
  events                    MatchEvent[]
  createdPlaygrounds        Playground[]
  playgroundReviews         PlaygroundReview[]
  activities                Activity[]
  organizedPromotions       Promotion[]
  inventory                 InventoryItem[]
  nutritionLog              FoodLogEntry[]
  measurements              Measurement[]
  trainingLogs              TrainingLog[]
  assignedTrainingPrograms  UserTrainingProgram[]
  sentTrainingProposals     TrainingProposal[]       @relation("SentTrainingProposals")
  receivedTrainingProposals TrainingProposal[]       @relation("ReceivedTrainingProposals")
  pollVotes                 PollVote[]
  notifications             Notification[]
  chats                     Chat[]                   @relation("ChatParticipants")
  messages                  Message[]
  lfgLobbiesCreated         LfgLobby[]               @relation("LobbyCreator")
  lfgLobbiesJoined          LfgLobby[]               @relation("LobbyPlayers")
  coachProfile              CoachProfile?
  careerHistory             CareerHistory[]
  sponsorships              Sponsorship[]
  sponsorshipOffersMade     SponsorshipOffer[]
  teamSponsorshipOffers     TeamApplication[]        @relation("TournamentApplications")
}

model CareerHistory {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  teamName    String
  period      String
  role        String
  review      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Team {
  id                       String                  @id @default(cuid())
  name                     String
  slug                     String                  @unique
  game                     String
  motto                    String?
  description              String?
  logo                     String?
  dataAiHint               String?
  pitch                    String?
  seekingSponsorship       Boolean                 @default(false)
  rank                     Int                     @default(1)
  wins                     Int                     @default(0)
  losses                   Int                     @default(0)
  draws                    Int                     @default(0)
  creator                  User                    @relation("CreatedTeams", fields: [creatorId], references: [id])
  creatorId                String
  captain                  User                    @relation("CaptainedTeams", fields: [captainId], references: [id])
  captainId                String
  members                  User[]                  @relation("TeamMembers")
  tournaments              Tournament[]            @relation("TournamentTeams")
  homePlayground           Playground?             @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId         String?
  matchesAsTeam1           Match[]                 @relation("Team1Matches")
  matchesAsTeam2           Match[]                 @relation("Team2Matches")
  events                   MatchEvent[]
  applications             TeamApplication[]       @relation("TeamApplications")
  practices                TeamPractice[]
  sponsorships             Sponsorship[]
  sponsorshipOffers        SponsorshipOffer[]
  chat                     Chat?
  leagues                  LeagueTeam[]
}

model TeamPractice {
  id           String      @id @default(cuid())
  team         Team        @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground  @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model Tournament {
  id                      String                     @id @default(cuid())
  name                    String
  slug                    String                     @unique
  game                    String
  description             String?
  type                    String
  format                  String
  category                String
  location                String
  participantCount        Int
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  status                  String
  organizer               User                       @relation("OrganizedTournaments", fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]                     @relation("TournamentTeams")
  matches                 Match[]
  judges                  User[]                     @relation("JudgedTournaments")
  sponsors                Sponsor[]                  @relation("TournamentSponsors")
  medicalPartners         MedicalPartner[]           @relation("TournamentMedicalPartners")
  media                   TournamentMedia[]
  announcements           TournamentAnnouncement[]
  applications            TeamApplication[]          @relation("TournamentApplications")
}

model Match {
  id              String         @id @default(cuid())
  team1           Team           @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team           @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournament      Tournament?    @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  playground      Playground?    @relation(fields: [playgroundId], references: [id])
  playgroundId    String?
  location        String?
  round           Int?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  refereeName     String?
  events          MatchEvent[]
  judges          User[]         @relation("JudgedMatches")
  league          League?        @relation(fields: [leagueId], references: [id])
  leagueId        String?
}

model MatchEvent {
  id        String         @id @default(cuid())
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  player    User?          @relation(fields: [playerId], references: [id])
  playerId  String?
  team      Team?          @relation(fields: [teamId], references: [id])
  teamId    String?
  type      MatchEventType
  timestamp DateTime
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation("TeamApplications", fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  tournament   Tournament?           @relation("TournamentApplications", fields: [tournamentId], references: [id])
  tournamentId String?
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model Playground {
  id              String               @id @default(cuid())
  name            String
  address         String
  type            String
  coverImage      String?
  coverImageHint  String?
  surface         String
  features        String[]
  rating          Float
  checkIns        Int
  status          String
  creator         User                 @relation(fields: [creatorId], references: [id])
  creatorId       String
  matches         Match[]
  reviews         PlaygroundReview[]
  reports         PlaygroundReport[]
  activities      Activity[]
  practices       TeamPractice[]
  lfgLobbies      LfgLobby[]
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User       @relation(fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus
  createdAt    DateTime   @default(now())
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  creator      User            @relation("ChallengesCreated", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("ChallengesAccepted", fields: [opponentId], references: [id])
  opponentId   String?
  status       ChallengeStatus
  result       String?
  createdAt    DateTime        @default(now())
}

model Report {
  id                 String       @id @default(cuid())
  reporter           User         @relation("ReportsMade", fields: [reporterId], references: [id])
  reporterId         String
  reportedUser       User         @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  reportedUserId     String
  category           String
  description        String?
  status             ReportStatus @default(PENDING)
  resolver           User?        @relation("ReportsResolved", fields: [resolverId], references: [id])
  resolverId         String?
  resolution         String?
  createdAt          DateTime     @default(now())
  resolvedAt         DateTime?
}

model Notification {
  id             String           @id @default(cuid())
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  type           NotificationType
  message        String
  href           String?
  isRead         Boolean          @default(false)
  createdAt      DateTime         @default(now())
  matchId        String?
  announcementId String?
}

model Activity {
  id           String       @id @default(cuid())
  type         ActivityType
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  metadata     Json
  createdAt    DateTime     @default(now())
}

model LfgLobby {
  id           String         @id @default(cuid())
  type         LfgLobbyType
  sport        String
  location     String
  playground   Playground?    @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  comment      String
  status       LfgLobbyStatus @default(OPEN)
  creator      User           @relation("LobbyCreator", fields: [creatorId], references: [id])
  creatorId    String
  players      User[]         @relation("LobbyPlayers")
}

model StoreItem {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean   @default(false)
}

model InventoryItem {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  name            String
  category        String
  type            String
  purchaseDate    DateTime
  lifespanMonths  Int
  image           String?
  imageHint       String?
  createdAt       DateTime @default(now())
}

model Promotion {
  id           String    @id @default(cuid())
  name         String
  description  String
  prize        String
  cost         String
  imageDataUri String
  imageHint    String
  endDate      DateTime
  organizer    User      @relation(fields: [organizerId], references: [id])
  organizerId  String
  sponsor      Sponsor?  @relation(fields: [sponsorId], references: [id])
  sponsorId    String?
}

model Sponsor {
  id                String             @id @default(cuid())
  name              String             @unique
  logo              String?
  logoHint          String?
  description       String
  profileUrl        String
  interests         String[]
  promotions        Promotion[]
  teams             Sponsorship[]
  tournaments       Tournament[]       @relation("TournamentSponsors")
  sponsorshipOffers SponsorshipOffer[]
}

model Sponsorship {
  id       String   @id @default(cuid())
  team     Team     @relation(fields: [teamId], references: [id])
  teamId   String
  sponsor  Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId String
  amount   Float
  signedAt DateTime
}

model SponsorshipOffer {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId String
  offerText String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int
  wins     Int
  draws    Int
  losses   Int
  points   Int

  @@unique([leagueId, teamId])
}

model Poll {
  id        String      @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  votes     PollVote[]
  author    User?       @relation(fields: [authorId], references: [id])
  authorId  String?
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
}

model PollOption {
  id      String     @id @default(cuid())
  text    String
  poll    Poll       @relation(fields: [pollId], references: [id])
  pollId  String
  votes   PollVote[]
}

model PollVote {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@unique([userId, pollId])
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[] @relation("TournamentMedicalPartners")
}

model TournamentMedia {
  id          String     @id @default(cuid())
  tournament  Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type        MediaType
  src         String
  description String?
  hint        String?
  createdAt   DateTime   @default(now())
}

model Measurement {
  id      String   @id @default(cuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String         @unique
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String // Breakfast, Lunch, Dinner, Snack
  createdAt  DateTime @default(now())
}

model TrainingProposal {
  id         String                 @id @default(cuid())
  from       User                   @relation("SentTrainingProposals", fields: [fromId], references: [id])
  fromId     String
  to         User                   @relation("ReceivedTrainingProposals", fields: [toId], references: [id])
  toId       String
  sport      String
  date       DateTime
  program    TrainingProgram?       @relation(fields: [programId], references: [id])
  programId  String?
  comment    String?
  status     TrainingProposalStatus @default(PENDING)
  createdAt  DateTime               @default(now())
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

model Achievement {
  id          String            @id @default(cuid())
  name        String            @unique
  description String
  icon        String
  users       UserAchievement[]
}

model UserAchievement {
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@id([userId, achievementId])
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
}

model TrainingProgram {
  id                  String                @id @default(cuid())
  name                String
  description         String
  goal                String
  daysPerWeek         Int
  splitType           String
  author              String
  coverImage          String
  coverImageHint      String
  isAiGenerated       Boolean               @default(false)
  weeklySplit         WorkoutDay[]
  assignedTo          UserTrainingProgram[]
  trainingProposals   TrainingProposal[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model UserTrainingProgram {
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  program   TrainingProgram @relation(fields: [programId], references: [id])
  programId String
  assignedAt DateTime        @default(now())
  isActive   Boolean         @default(true)

  @@id([userId, programId])
}

model TrainingLog {
  id          String           @id @default(cuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  workoutName String?
  status      TrainingLogStatus
  exercises   LoggedExercise[]
  mood        Mood?
  notes       String?
  coachNotes  String?
}

model LoggedExercise {
  id                      String      @id @default(cuid())
  trainingLog             TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId           String
  exercise                Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId              String
  notes                   String?
  sets                    LoggedSet[]
  isSupersetWithPrevious  Boolean?    @default(false)
}

model LoggedSet {
  id               String          @id @default(cuid())
  loggedExercise   LoggedExercise  @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean         @default(true)
}

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  logs           LoggedExercise[]
}

model Sport {
  id         String      @id @unique
  name       String
  icon       String
  category   String
  challenges Challenge[]
}

model Chat {
  id            String    @id @default(cuid())
  name          String?
  type          String // PRIVATE, GROUP
  participants  User[]    @relation("ChatParticipants")
  messages      Message[]
  team          Team?     @relation(fields: [teamId], references: [id])
  teamId        String?   @unique
  createdAt     DateTime  @default(now())
}

model Message {
  id        String   @id @default(cuid())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  createdAt DateTime @default(now())
}
