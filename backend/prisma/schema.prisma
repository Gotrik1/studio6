// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  name                    String
  passwordHash            String
  role                    String
  avatar                  String?
  bannerImage             String?
  bannerImageHint         String?
  status                  String
  xp                      Int
  location                String?
  mainSport               String?
  dateOfBirth             DateTime?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  isVerified              Boolean?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  teamsAsMember           Team[]                 @relation("TeamMembers")
  teamsAsCaptain          Team[]                 @relation("TeamCaptain")
  teamsAsCreator          Team[]                 @relation("TeamCreator")
  organizedTournaments    Tournament[]           @relation("TournamentOrganizer")
  judgedMatches           Match[]                @relation("MatchReferee")
  reportsMade             Report[]               @relation("Reporter")
  reportsAgainst          Report[]               @relation("ReportedUser")
  resolvedReports         Report[]               @relation("Resolver")
  organizedPromotions     Promotion[]
  activities              Activity[]
  friends                 User[]                 @relation("Friends")
  friendOf                User[]                 @relation("Friends")
  sentFriendRequests      FriendRequest[]        @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]        @relation("ReceivedFriendRequests")
  coaching                User[]                 @relation("CoachStudents")
  coach                   User?                  @relation("CoachStudents", fields: [coachId], references: [id])
  coachId                 String?
  trainingLogs            TrainingLog[]
  measurements            Measurement[]
  inventory               InventoryItem[]
  foodLogEntries          FoodLogEntry[]
  sentTrainingProposals   TrainingProposal[]     @relation("SentTrainingProposals")
  receivedTrainingProposals TrainingProposal[]   @relation("ReceivedTrainingProposals")
  pollVotes               PollVote[]
  notifications           Notification[]
  tournamentJudges        Tournament[]           @relation("TournamentJudges")
  tournamentMedical       MedicalPartner[]       @relation("TournamentMedicalStaff")
  playgrounds             Playground[]
  reviews                 PlaygroundReview[]
  messages                Message[]
  chats                   Chat[]                 @relation("ChatParticipants")
  teamApplications        TeamApplication[]
  trainingProgram         TrainingProgram?       @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId       String?
  TournamentSponsor       TournamentSponsor[]
  TournamentParticipant   TournamentParticipant[]
}

model Team {
  id                 String              @id @default(cuid())
  name               String
  slug               String              @unique
  logo               String?
  dataAiHint         String?
  motto              String?
  game               String
  rank               Int                 @default(0)
  wins               Int                 @default(0)
  losses             Int                 @default(0)
  draws              Int                 @default(0)
  seekingSponsorship Boolean             @default(false)
  creator            User                @relation("TeamCreator", fields: [creatorId], references: [id])
  creatorId          String
  captain            User                @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId          String
  members            User[]              @relation("TeamMembers")
  tournaments        Tournament[]        @relation("TournamentParticipants")
  team1Matches       Match[]             @relation("Team1Matches")
  team2Matches       Match[]             @relation("Team2Matches")
  homePlayground     Playground?         @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?
  practices          TeamPractice[]
  applications       TeamApplication[]
  sponsors           TournamentSponsor[]
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  game                    String
  format                  String
  prizePool               String?
  tournamentStartDate     DateTime
  description             String?
  rules                   String?
  type                    String
  category                String
  location                String
  participantCount        Int
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  bannerImage             String?
  bannerImageHint         String?
  status                  String
  organizer               User                     @relation("TournamentOrganizer", fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]                   @relation("TournamentParticipants")
  matches                 Match[]
  judges                  User[]                   @relation("TournamentJudges")
  medicalPartners         MedicalPartner[]         @relation("TournamentMedicalStaff")
  sponsors                TournamentSponsor[]
  announcements           TournamentAnnouncement[]
  applications            TeamApplication[]
  media                   TournamentMedia[]
}

model Match {
  id              String      @id @default(cuid())
  team1           Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  scheduledAt     DateTime
  finishedAt      DateTime?
  status          String
  tournament      Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  referee         User?       @relation("MatchReferee", fields: [refereeId], references: [id])
  refereeId       String?
  refereeName     String?
  playgroundId    String?
  location        String?
  league          League?     @relation(fields: [leagueId], references: [id])
  leagueId        String?
}

model Challenge {
  id           String           @id @default(cuid())
  title        String
  description  String
  wager        Int
  creator      User             @relation(fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?            @relation(fields: [opponentId], references: [id])
  opponentId   String?
  discipline   Sport            @relation(fields: [disciplineId], references: [id])
  disciplineId String
  status       ChallengeStatus
  result       String?
  createdAt    DateTime         @default(now())
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Sport {
  id        String      @id @unique
  name      String
  icon      String
  category  String
  Challenge Challenge[]
}

model Playground {
  id             String             @id @default(cuid())
  name           String
  address        String
  type           String
  coverImage     String?
  coverImageHint String?
  surface        String
  features       String[]
  rating         Float
  checkIns       Int
  status         PlaygroundStatus
  creator        User               @relation(fields: [creatorId], references: [id])
  creatorId      String
  reviews        PlaygroundReview[]
  homeForTeams   Team[]
  practices      TeamPractice[]
  activities     Activity[]
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  rating       Int
  comment      String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  createdAt    DateTime   @default(now())
}

model TeamPractice {
  id           String     @id @default(cuid())
  title        String
  description  String?
  date         DateTime
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model Sponsor {
  id          String                @id @default(cuid())
  name        String
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  promotions  Promotion[]
  tournaments TournamentSponsor[]
}

model Promotion {
  id          String    @id @default(cuid())
  name        String
  description String
  prize       String
  cost        String
  imageDataUri String?   @db.Text
  imageHint   String?
  endDate     DateTime
  sponsor     Sponsor?  @relation(fields: [sponsorId], references: [id])
  sponsorId   String?
  organizer   User      @relation(fields: [organizerId], references: [id])
  organizerId String
  createdAt   DateTime  @default(now())
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fromId, toId])
}

model Activity {
  id           String          @id @default(cuid())
  type         ActivityType
  user         User            @relation(fields: [userId], references: [id])
  userId       String
  metadata     Json
  timestamp    DateTime        @default(now())
  playground   Playground?     @relation(fields: [playgroundId], references: [id])
  playgroundId String?
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String // FRIEND_REQUEST, MATCH_RESULT, ANNOUNCEMENT etc.
  message   String
  href      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model StoreItem {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean  @default(false)
}

model TrainingProgram {
  id              String           @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean          @default(false)
  weeklySplit     WorkoutDay[]
  assignedToUsers User[]
}

model WorkoutDay {
  id                String             @id @default(cuid())
  day               Int
  title             String
  exercises         ExerciseDetail[]
  trainingProgram   TrainingProgram?   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String?
}

model ExerciseDetail {
  id                      String      @id @default(cuid())
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
  workoutDay              WorkoutDay? @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String?
}

model Exercise {
  id              String           @id @default(cuid())
  name            String
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   String[]
  commonMistakes  String[]
  alternatives    String[]
  loggedExercises LoggedExercise[]
}

model TrainingLog {
  id         String           @id @default(cuid())
  userId     String
  user       User             @relation(fields: [userId], references: [id])
  date       DateTime
  workoutName String
  status     String
  notes      String?
  coachNotes String?
  mood       String?
  exercises  LoggedExercise[]
}

model LoggedExercise {
  id            String         @id @default(cuid())
  trainingLog   TrainingLog    @relation(fields: [trainingLogId], references: [id])
  trainingLogId String
  exercise      Exercise       @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  notes         String?
  sets          LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String
  plannedWeight    String
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean
}

model InventoryItem {
  id             String   @id @default(cuid())
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime @default(now())
}

model FoodItem {
  id             String         @id @default(cuid())
  name           String
  category       String
  image          String?
  imageHint      String?
  calories       Int
  protein        Float
  fat            Float
  carbs          Float
  description    String?
  logEntries     FoodLogEntry[]
}

model FoodLogEntry {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  foodItem    FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId  String
  grams       Int
  meal        String
  createdAt   DateTime @default(now())
}

model Measurement {
  id       String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  date     DateTime
  weight   Float
  bodyFat  Float?
  chest    Float?
  waist    Float?
  hips     Float?
  biceps   Float?
  thigh    Float?
}

model TrainingProposal {
  id        String           @id @default(cuid())
  from      User             @relation("SentTrainingProposals", fields: [fromId], references: [id])
  fromId    String
  to        User             @relation("ReceivedTrainingProposals", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  comment   String?
  status    String           @default("PENDING")
  program   TrainingProgram? @relation(fields: [programId], references: [id])
  programId String?
  createdAt DateTime         @default(now())
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  isActive  Boolean      @default(true)
  options   PollOption[]
  votes     PollVote[]
  createdAt DateTime     @default(now())
}

model PollOption {
  id        String     @id @default(cuid())
  text      String
  poll      Poll       @relation(fields: [pollId], references: [id])
  pollId    String
  votes     PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@unique([userId, pollId])
}

model FaqItem {
    id        String      @id @default(cuid())
    category  String
    question  String
    answer    String
    createdAt DateTime    @default(now())
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String @unique
  played   Int
  wins     Int
  losses   Int
  draws    Int
  points   Int
}

model LfgLobby {
    id            String         @id @default(cuid())
    type          LfgLobbyType
    sport         String
    location      String
    playgroundId  String?
    startTime     DateTime
    endTime       DateTime
    playersNeeded Int
    comment       String
    creator       User           @relation(fields: [creatorId], references: [id])
    creatorId     String
    players       User[]
    createdAt     DateTime       @default(now())
}

enum LfgLobbyType {
    GAME
    TRAINING
}

model Report {
    id              String @id @default(cuid())
    reporter        User @relation("Reporter", fields: [reporterId], references: [id])
    reporterId      String
    reportedUser    User @relation("ReportedUser", fields: [reportedUserId], references: [id])
    reportedUserId  String
    reason          String
    context         String
    status          ReportStatus @default(PENDING)
    resolver        User? @relation("Resolver", fields: [resolverId], references: [id])
    resolverId      String?
    resolution      String?
    createdAt       DateTime @default(now())
    resolvedAt      DateTime?
}

enum ReportStatus {
    PENDING
    RESOLVED
    DISMISSED
}

model MedicalPartner {
    id             String @id @default(cuid())
    name           String
    specialization String
    contact        String
    avatar         String?
    avatarHint     String?
    tournaments    Tournament[] @relation("TournamentMedicalStaff")
}

model TournamentAnnouncement {
    id           String @id @default(cuid())
    subject      String
    message      String
    sentTo       Int
    sender       User @relation(fields: [senderId], references: [id])
    senderId     String
    tournament   Tournament @relation(fields: [tournamentId], references: [id])
    tournamentId String
    createdAt    DateTime @default(now())
}

model TournamentSponsor {
    tournament   Tournament @relation(fields: [tournamentId], references: [id])
    tournamentId String
    sponsor      Sponsor @relation(fields: [sponsorId], references: [id])
    sponsorId    String

    @@id([tournamentId, sponsorId])
}

model TournamentParticipant {
    tournament   Tournament @relation(fields: [tournamentId], references: [id])
    tournamentId String
    team         Team @relation(fields: [teamId], references: [id])
    teamId       String

    @@id([tournamentId, teamId])
}

model TeamApplication {
    id           String @id @default(cuid())
    team         Team @relation(fields: [teamId], references: [id])
    teamId       String
    user         User @relation(fields: [userId], references: [id])
    userId       String
    tournament   Tournament? @relation(fields: [tournamentId], references: [id])
    tournamentId String?
    message      String?
    status       TeamApplicationStatus @default(PENDING)
    createdAt    DateTime @default(now())
}

enum TeamApplicationStatus {
    PENDING
    APPROVED
    REJECTED
}

model Message {
    id        String   @id @default(cuid())
    text      String
    createdAt DateTime @default(now())
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
    chat      Chat     @relation(fields: [chatId], references: [id])
    chatId    String
}

model Chat {
    id           String     @id @default(cuid())
    name         String?
    type         ChatType
    participants User[]     @relation("ChatParticipants")
    messages     Message[]
    createdAt    DateTime   @default(now())
}

enum ChatType {
    PRIVATE
    GROUP
}

model TournamentMedia {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  type         String // "IMAGE", "VIDEO", "AUDIO"
  src          String     @db.Text
  description  String?
  hint         String?
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
}
