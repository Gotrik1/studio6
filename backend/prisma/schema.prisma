// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String    @id @default(cuid())
  email                    String    @unique
  name                     String
  avatar                   String?
  role                     String
  status                   String    @default("Активен")
  xp                       Int       @default(0)
  location                 String?
  mainSport                String?
  telegram                 String?
  discord                  String?
  dateOfBirth              DateTime?
  preferredSports          String[]
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  teams                    Team[]               @relation("TeamMembers")
  captainOf                Team[]               @relation("Captain")
  createdTeams             Team[]               @relation("Creator")
  createdChallenges        Challenge[]          @relation("ChallengeCreator")
  acceptedChallenges       Challenge[]          @relation("ChallengeOpponent")
  createdPlaygrounds       Playground[]         @relation("PlaygroundCreator")
  coachProfile             CoachProfile?
  friends                  User[]               @relation("Friendship")
  friendsOf                User[]               @relation("Friendship")
  sentFriendRequests       FriendRequest[]      @relation("SentFriendRequests")
  receivedFriendRequests   FriendRequest[]      @relation("ReceivedFriendRequests")
  notifications            Notification[]
  activities               Activity[]
  authoredMessages         Message[]
  createdTournaments       Tournament[]
  gallery                  GalleryItem[]
  careerHistory            CareerHistoryItem[]
}

model Team {
  id                 String       @id @default(cuid())
  name               String
  slug               String       @unique
  logo               String?
  dataAiHint         String?
  motto              String?
  game               String
  rank               Int          @default(0)
  wins               Int          @default(0)
  losses             Int          @default(0)
  draws              Int          @default(0)
  seekingSponsorship Boolean      @default(false)
  homePlaygroundId   String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  captainId          String
  captain            User         @relation("Captain", fields: [captainId], references: [id])
  creatorId          String
  creator            User         @relation("Creator", fields: [creatorId], references: [id])
  members            User[]       @relation("TeamMembers")
  tournaments        Tournament[] @relation("TeamTournaments")
  sponsors           Sponsor[]
  team1Matches       Match[]      @relation("Team1Matches")
  team2Matches       Match[]      @relation("Team2Matches")
}

model Match {
  id           String      @id @default(cuid())
  team1Id      String
  team2Id      String
  team1Score   Int?
  team2Score   Int?
  status       MatchStatus
  scheduledAt  DateTime
  finishedAt   DateTime?
  location     String?
  refereeName  String?
  tournamentId String?
  team1        Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team2        Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Tournament {
  id                      String      @id @default(cuid())
  name                    String
  slug                    String      @unique
  game                    String
  status                  String
  format                  String
  type                    String
  category                String
  location                String
  participantCount        Int
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  organizerId             String
  organizer               User        @relation(fields: [organizerId], references: [id])
  teams                   Team[]      @relation("TeamTournaments")
  matches                 Match[]
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  discipline   String
  wager        Int
  status       ChallengeStatus
  result       String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  creatorId    String
  creator      User            @relation("ChallengeCreator", fields: [creatorId], references: [id])
  opponentId   String?
  opponent     User?           @relation("ChallengeOpponent", fields: [opponentId], references: [id])
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Playground {
  id             String   @id @default(cuid())
  name           String
  address        String
  type           String
  surface        String
  features       String[]
  rating         Float
  checkIns       Int
  status         String
  coverImage     String?
  coverImageHint String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  creatorId      String
  creator        User     @relation("PlaygroundCreator", fields: [creatorId], references: [id])
}

model CoachProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id])
  specialization String
  description    String
  tags           String[]
  rating         Float
  price          String
}

model Sponsor {
  id          String   @id @default(cuid())
  name        String
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  teams       Team[]
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean
}

model Exercise {
  id             String   @id @default(cuid())
  name           String   @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  techniqueTips  String[]
  commonMistakes String[]
  alternatives   String[]
}

model FriendRequest {
  id        String   @id @default(cuid())
  fromId    String
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String
  message   String
  href      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Activity {
  id        String       @id @default(cuid())
  type      ActivityType
  timestamp DateTime     @default(now())
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  metadata  Json
}

enum ActivityType {
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
}

model Message {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  chatId    String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
}

model GalleryItem {
  id          String   @id @default(cuid())
  src         String
  alt         String
  dataAiHint  String
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model CareerHistoryItem {
  id        String   @id @default(cuid())
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}
