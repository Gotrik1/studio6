// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id @default(cuid())
  name                    String
  email                   String                  @unique
  passwordHash            String
  role                    String                  @default("Игрок")
  avatar                  String?
  status                  String                  @default("Активен")
  xp                      Int                     @default(0)
  location                String?
  mainSport               String?
  isVerified              Boolean                 @default(false)
  dateOfBirth             DateTime?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  teamsAsCaptain          Team[]                  @relation("Captain")
  teamsAsCreator          Team[]                  @relation("Creator")
  teamsAsMember           Team[]                  @relation("Members")
  organizedTournaments    Tournament[]
  organizedPromotions     Promotion[]
  gallery                 GalleryItem[]
  careerHistory           CareerHistoryItem[]
  activities              Activity[]
  friends                 User[]                  @relation("Friends")
  friendOf                User[]                  @relation("Friends")
  sentFriendRequests      FriendRequest[]         @relation("SentRequests")
  receivedFriendRequests  FriendRequest[]         @relation("ReceivedRequests")
  coaching                User[]                  @relation("Coaching")
  coach                   User?                   @relation("Coaching", fields: [coachId], references: [id])
  coachId                 String?
  judgedMatches           Match[]                 @relation("Judge")
  judgingTournaments      Tournament[]            @relation("Judges")
  trainingLogs            TrainingLog[]
  measurements            Measurement[]
  inventory               InventoryItem[]
  sentTrainingProposals   TrainingProposal[]      @relation("SentProposals")
  receivedTrainingProposals TrainingProposal[]    @relation("ReceivedProposals")
  pollVotes               PollVote[]
  messages                Message[]
  createdChats            Chat[]
  chatParticipants        Chat[]                  @relation("ChatParticipants")
  createdLfgLobbies       LfgLobby[]
  joinedLfgLobbies        LfgLobby[]              @relation("LobbyPlayers")
  playgrounds             Playground[]
  coachProfile            CoachProfile?
  sentAnnouncements       TournamentAnnouncement[]
  notifications           Notification[]
  medicalPartnerships     MedicalPartner[]        @relation("AssignedMedics")
}

model Team {
  id                 String       @id @default(cuid())
  name               String       @unique
  slug               String       @unique
  game               String
  motto              String?
  description        String?
  logo               String?
  dataAiHint         String?
  rank               Int          @default(999)
  wins               Int          @default(0)
  losses             Int          @default(0)
  draws              Int          @default(0)
  homePlaygroundId   String?
  seekingSponsorship Boolean      @default(false)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  captain            User         @relation("Captain", fields: [captainId], references: [id])
  captainId          String
  creator            User         @relation("Creator", fields: [creatorId], references: [id])
  creatorId          String
  members            User[]       @relation("Members")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]      @relation("Team1")
  matchesAsTeam2     Match[]      @relation("Team2")
  sponsors           Sponsor[]
  chat               Chat?        @relation(fields: [chatId], references: [id])
  chatId             String?      @unique
  leagues            LeagueTeam[]
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  game                  String
  type                  String
  format                String
  category              String
  location              String
  prizePool             String?
  rules                 String?
  status                String                   @default("PLANNED")
  participantCount      Int
  bannerImage           String?
  bannerImageHint       String?
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  organizer             User                     @relation(fields: [organizerId], references: [id])
  organizerId           String
  teams                 Team[]
  matches               Match[]
  judges                User[]                   @relation("Judges")
  announcements         TournamentAnnouncement[]
  medicalPartners       MedicalPartner[]         @relation("AssignedTournaments")
}

model Match {
  id             String      @id @default(cuid())
  team1          Team        @relation("Team1", fields: [team1Id], references: [id])
  team1Id        String
  team2          Team        @relation("Team2", fields: [team2Id], references: [id])
  team2Id        String
  team1Score     Int?
  team2Score     Int?
  status         MatchStatus
  scheduledAt    DateTime
  finishedAt     DateTime?
  location       String?
  disputeReason  String?
  disputeOpenedAt DateTime?
  resolution     String?
  playgroundId   String?
  refereeName    String?
  judge          User?       @relation("Judge", fields: [judgeId], references: [id])
  judgeId        String?
  tournament     Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId   String?
  league         League?     @relation(fields: [leagueId], references: [id])
  leagueId       String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model GalleryItem {
  id         String   @id @default(cuid())
  src        String
  alt        String
  dataAiHint String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())
}

model CareerHistoryItem {
  id       String   @id @default(cuid())
  teamName String
  period   String
  role     String
  review   String
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  createdAt DateTime @default(now())
}

model Activity {
  id        String     @id @default(cuid())
  type      ActivityType
  timestamp DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  metadata  Json
}

enum ActivityType {
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fromId, toId])
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  rating         Float
  price          Decimal
}

model Sponsor {
  id          String   @id @default(cuid())
  name        String   @unique
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  teams       Team[]
  promotions  Promotion[]
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         String // 'DIRECT', 'GROUP'
  participants User[]    @relation("ChatParticipants")
  messages     Message[]
  team         Team?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  text      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  message   String
  href      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model StoreItem {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Exercise {
  id             String            @id @default(cuid())
  name           String            @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  techniqueTips  String[]
  commonMistakes String[]
  alternatives   String[]
  LoggedExercise LoggedExercise[]
}

model TrainingProgram {
  id              String         @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean        @default(false)
  weeklySplit     WorkoutDay[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model WorkoutDay {
  id              String            @id @default(cuid())
  trainingProgram TrainingProgram   @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
  trainingProgramId String
  day             Int
  title           String
  exercises       WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model TrainingLog {
  id         String           @id @default(cuid())
  user       User             @relation(fields: [userId], references: [id])
  userId     String
  date       DateTime
  workoutName String
  status     String // 'completed', 'planned', 'skipped'
  exercises  LoggedExercise[]
  mood       String?
  notes      String?
  coachNotes String?
}

model LoggedExercise {
  id            String      @id @default(cuid())
  trainingLog   TrainingLog @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
  trainingLogId String
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  notes         String?
  sets          LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Int?
  isCompleted      Boolean        @default(false)
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String
  imageHint   String
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int
  wins     Int
  losses   Int
  draws    Int
  points   Int

  @@unique([leagueId, teamId])
}

model Playground {
  id             String   @id @default(cuid())
  name           String
  address        String
  type           String
  coverImage     String?
  coverImageHint String?
  surface        String
  features       String[]
  rating         Float
  checkIns       Int
  status         String
  creator        User     @relation(fields: [creatorId], references: [id])
  creatorId      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Challenge {
  id         String          @id @default(cuid())
  title      String
  description String
  discipline String
  wager      Int
  status     ChallengeStatus
  creator    User            @relation("ChallengeCreator", fields: [creatorId], references: [id])
  creatorId  String
  opponent   User?           @relation("ChallengeOpponent", fields: [opponentId], references: [id])
  opponentId String?
  result     String? // 'creator_win', 'opponent_win'
  createdAt  DateTime        @default(now())
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model LfgLobby {
  id           String   @id @default(cuid())
  type         LfgLobbyType
  sport        String
  location     String
  playgroundId String?
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  comment      String
  creator      User     @relation(fields: [creatorId], references: [id])
  creatorId    String
  players      User[]   @relation("LobbyPlayers")
  createdAt    DateTime @default(now())
}

enum LfgLobbyType {
  GAME
  TRAINING
}

model Measurement {
  id      String    @id @default(cuid())
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
  createdAt DateTime  @default(now())
}

model TrainingProposal {
  id      String   @id @default(cuid())
  from    User     @relation("SentProposals", fields: [fromId], references: [id])
  fromId  String
  to      User     @relation("ReceivedProposals", fields: [toId], references: [id])
  toId    String
  sport   String
  date    DateTime
  comment String?
  status  String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  votes     PollVote[]
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
}

model PollOption {
  id        String     @id @default(cuid())
  poll      Poll       @relation(fields: [pollId], references: [id])
  pollId    String
  text      String
  votes     PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String

  @@unique([userId, pollId])
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model Promotion {
  id          String   @id @default(cuid())
  name        String
  description String
  prize       String
  cost        String
  imageDataUri String
  imageHint   String
  organizer   User     @relation(fields: [organizerId], references: [id])
  organizerId String
  sponsor     Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId   String?
  endDate     DateTime
  createdAt   DateTime @default(now())
}

model FaqItem {
  id       String @id @default(cuid())
  category String
  question String
  answer   String
  createdAt DateTime @default(now())
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
}

model MedicalPartner {
  id              String       @id @default(cuid())
  name            String
  specialization  String
  contact         String
  accredited      Boolean      @default(true)
  tournaments     Tournament[] @relation("AssignedTournaments")
}
