// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    String
  xp                      Int                    @default(0)
  status                  String                 @default("Активен")
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  isVerified              Boolean                @default(false)
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  teamsAsCaptain          Team[]                 @relation("Captain")
  teamsAsCreator          Team[]                 @relation("Creator")
  teamsAsMember           Team[]                 @relation("TeamMembers")
  organizedTournaments    Tournament[]
  judgedMatches           Tournament[]           @relation("Judges")
  organizedPromotions     Promotion[]
  createdPlaygrounds      Playground[]
  gallery                 GalleryItem[]
  careerHistory           CareerHistory[]
  createdChallenges       Challenge[]            @relation("CreatedChallenges")
  acceptedChallenges      Challenge[]            @relation("AcceptedChallenges")
  coaching                User[]                 @relation("CoachTrainee")
  coach                   User?                  @relation("CoachTrainee", fields: [coachId], references: [id])
  coachId                 String?
  friends                 User[]                 @relation("Friends")
  friendOf                User[]                 @relation("Friends")
  sentFriendRequests      FriendRequest[]        @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]        @relation("ReceivedFriendRequests")
  messages                Message[]
  chats                   Chat[]
  activities              Activity[]
  notifications           Notification[]
  trainingLogs            TrainingLog[]
  measurements            Measurement[]
  inventory               InventoryItem[]
  foodLogEntries          FoodLogEntry[]
  trainingProposalsSent   TrainingProposal[]     @relation("SentProposals")
  trainingProposalsRecv   TrainingProposal[]     @relation("ReceivedProposals")
  pollVotes               PollVote[]
  authoredReviews         PlaygroundReview[]
  reportsMade             Report[]               @relation("Reporter")
  reportsReceived         Report[]               @relation("ReportedUser")
  resolvedReports         Report[]               @relation("Resolver")
  teamApplications        TeamApplication[]
  tournamentAnnouncements TournamentAnnouncement[]
  coachProfile            CoachProfile?
  medicalPartner          MedicalPartner?        @relation(fields: [medicalPartnerId], references: [id])
  medicalPartnerId        String?
}

model Team {
  id                 String              @id @default(cuid())
  name               String
  slug               String              @unique
  logo               String?
  dataAiHint         String?
  motto              String?
  game               String
  rank               Int                 @default(5)
  wins               Int                 @default(0)
  losses             Int                 @default(0)
  draws              Int                 @default(0)
  seekingSponsorship Boolean             @default(true)
  captain            User                @relation("Captain", fields: [captainId], references: [id])
  captainId          String
  creator            User                @relation("Creator", fields: [creatorId], references: [id])
  creatorId          String
  members            User[]              @relation("TeamMembers")
  tournaments        Tournament[]
  homePlayground     Playground?         @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?
  sponsors           Sponsor[]
  chat               Chat?               @relation(fields: [chatId], references: [id])
  chatId             String?             @unique
  teamPractices      TeamPractice[]
  teamApplications   TeamApplication[]
  matchesAsTeam1     Match[]             @relation("Team1Matches")
  matchesAsTeam2     Match[]             @relation("Team2Matches")
}

model Match {
  id              String      @id @default(cuid())
  team1           Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournament      Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  league          League?     @relation(fields: [leagueId], references: [id])
  leagueId        String?
  playgroundId    String?
  location        String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  refereeName     String?
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  description             String?
  game                    String
  format                  String
  type                    String
  category                String
  location                String
  participantCount        Int
  prizePool               String?
  rules                   String?
  status                  String
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  bannerImage             String?
  bannerImageHint         String?
  organizer               User                     @relation(fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
  judges                  User[]                   @relation("Judges")
  sponsors                Sponsor[]                @relation("TournamentSponsors")
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  teamApplications        TeamApplication[]
}

model Sport {
  id         String      @id @unique
  name       String
  icon       String
  category   String
  challenges Challenge[]
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  wager        Int
  creator      User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  opponentId   String?
  status       ChallengeStatus @default(OPEN)
  result       String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Playground {
  id             String             @id @default(cuid())
  name           String
  address        String
  type           String
  coverImage     String?
  coverImageHint String?
  surface        String
  features       String[]
  rating         Float
  checkIns       Int
  status         PlaygroundStatus
  creator        User               @relation(fields: [creatorId], references: [id])
  creatorId      String
  teams          Team[]
  activities     Activity[]
  reviews        PlaygroundReview[]
  teamPractices  TeamPractice[]
  lfgLobbies     LfgLobby[]
}

enum PlaygroundStatus {
  PENDING_MODERATION
  APPROVED
}

model Activity {
  id           String         @id @default(cuid())
  type         ActivityType
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  metadata     Json
  playground   Playground?    @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  timestamp    DateTime       @default(now())
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  rating         Float
  price          Decimal
}

model Sponsor {
  id           String       @id @default(cuid())
  name         String
  logo         String?
  logoHint     String?
  description  String
  profileUrl   String
  interests    String[]
  teams        Team[]
  tournaments  Tournament[] @relation("TournamentSponsors")
  promotions   Promotion[]
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         String    @default("PRIVATE") // PRIVATE, GROUP
  participants User[]
  messages     Message[]
  team         Team?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  text      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String // FRIEND_REQUEST, MATCH_RESULT, ANNOUNCEMENT, etc.
  message   String
  href      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model StoreItem {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean   @default(false)
  createdAt   DateTime  @default(now())
}

model Exercise {
  id             String             @id @default(cuid())
  name           String             @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  String[]
  commonMistakes String[]
  alternatives   String[]
  loggedExercises LoggedExercise[]
}

model TrainingProgram {
  id             String         @id @default(cuid())
  name           String
  description    String
  goal           String
  daysPerWeek    Int
  splitType      String
  author         String
  coverImage     String
  coverImageHint String
  isAiGenerated  Boolean        @default(false)
  weeklySplit    WorkoutDay[]
  trainingProposals TrainingProposal[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  day               Int
  title             String
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model TrainingLog {
  id          String           @id @default(cuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  workoutName String
  status      String // 'completed', 'planned', 'skipped'
  mood        String?
  notes       String?
  coachNotes  String?
  exercises   LoggedExercise[]
}

model LoggedExercise {
  id            String      @id @default(cuid())
  trainingLog   TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId String
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  notes         String?
  sets          LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Int?
  isCompleted      Boolean        @default(false)
}

model Promotion {
  id          String   @id @default(cuid())
  name        String
  description String
  prize       String
  imageDataUri String
  imageHint   String
  cost        String
  endDate     DateTime
  organizer   User     @relation(fields: [organizerId], references: [id])
  organizerId String
  sponsor     Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId   String?
  createdAt   DateTime @default(now())
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int
  wins     Int
  losses   Int
  draws    Int
  points   Int
}

model LfgLobby {
  id            String       @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  playground    Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId  String?
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  creator       User         @relation(fields: [creatorId], references: [id])
  creatorId     String
  players       User[]
  comment       String
  createdAt     DateTime     @default(now())
}

enum LfgLobbyType {
  GAME
  TRAINING
}

model Measurement {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  weight    Float
  bodyFat   Float?
  chest     Float?
  waist     Float?
  hips      Float?
  biceps    Float?
  thigh     Float?
}

model TrainingProposal {
  id        String           @id @default(cuid())
  from      User             @relation("SentProposals", fields: [fromId], references: [id])
  fromId    String
  to        User             @relation("ReceivedProposals", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  comment   String?
  program   TrainingProgram? @relation(fields: [programId], references: [id])
  programId String?
  status    String           @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime         @default(now())
}

model Poll {
  id        String      @id @default(cuid())
  title     String
  question  String
  isActive  Boolean     @default(true)
  options   PollOption[]
  votes     PollVote[]
  createdAt DateTime    @default(now())
}

model PollOption {
  id        String     @id @default(cuid())
  text      String
  poll      Poll       @relation(fields: [pollId], references: [id])
  pollId    String
  votes     PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@unique([userId, pollId])
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

model InventoryItem {
  id             String   @id @default(cuid())
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime @default(now())
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String         @unique
  category    String
  image       String?
  imageHint   String?
  calories    Int
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String // Breakfast, Lunch, Dinner, Snack
  createdAt  DateTime @default(now())
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model Report {
  id              String        @id @default(cuid())
  reporter        User          @relation("Reporter", fields: [reporterId], references: [id])
  reporterId      String
  reportedUser    User          @relation("ReportedUser", fields: [reportedUserId], references: [id])
  reportedUserId  String
  reason          String
  context         String
  status          ReportStatus  @default(PENDING)
  resolution      String?
  resolver        User?         @relation("Resolver", fields: [resolverId], references: [id])
  resolverId      String?
  createdAt       DateTime      @default(now())
  resolvedAt      DateTime?
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  createdAt    DateTime              @default(now())
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  User           User[]
  tournaments    Tournament[]
}

model GalleryItem {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  src        String
  alt        String
  dataAiHint String
  createdAt  DateTime @default(now())
}

model CareerHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  createdAt    DateTime   @default(now())
}
