// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    String
  xp                      Int                     @default(0)
  status                  String                  @default("Активен")
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  location                String?
  mainSport               String?
  preferredSports         String[]
  dateOfBirth             DateTime?
  telegram                String?
  discord                 String?
  teamsAsCaptain          Team[]                  @relation("TeamCaptain")
  teamsAsMember           Team[]                  @relation("TeamMembers")
  createdTeams            Team[]                  @relation("TeamCreator")
  organizedTournaments    Tournament[]            @relation("TournamentOrganizer")
  activities              Activity[]
  gallery                 GalleryItem[]
  careerHistory           CareerHistory[]
  judgedMatches           Match[]                 @relation("JudgeMatches")
  coachProfile            CoachProfile?
  coaching                User[]                  @relation("CoachStudents")
  coach                   User?                   @relation("CoachStudents", fields: [coachId], references: [id])
  coachId                 String?
  friends                 User[]                  @relation("Friends")
  friendOf                User[]                  @relation("Friends")
  sentFriendRequests      FriendRequest[]         @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]         @relation("ReceivedFriendRequests")
  messages                Message[]
  chats                   Chat[]
  organizedPromotions     Promotion[]
  inventory               InventoryItem[]
  measurements            Measurement[]
  sentTrainingProposals   TrainingProposal[]      @relation("SentTrainingProposals")
  receivedTrainingProposals TrainingProposal[]      @relation("ReceivedTrainingProposals")
  pollVotes               PollVote[]
  createdQuests           Quest[]
  trainingLogs            TrainingLog[]
  foodLogEntries          FoodLogEntry[]
  playgrounds             Playground[]
  playgroundReviews       PlaygroundReview[]
  tournamentAnnouncements TournamentAnnouncement[]
  judgingTournaments      Tournament[]            @relation("TournamentJudges")
}

model Team {
  id                 String   @id @default(cuid())
  name               String
  slug               String   @unique
  game               String
  logo               String?
  dataAiHint         String?
  motto              String?
  description        String?
  wins               Int      @default(0)
  losses             Int      @default(0)
  draws              Int      @default(0)
  rank               Int      @default(99)
  seekingSponsorship Boolean  @default(false)
  homePlaygroundId   String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  captain            User     @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId          String
  creator            User     @relation("TeamCreator", fields: [creatorId], references: [id])
  creatorId          String
  members            User[]   @relation("TeamMembers")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]     @relation("Team1Matches")
  matchesAsTeam2     Match[]     @relation("Team2Matches")
  applications       TeamApplication[]
  sponsors           Sponsor[]
}

model Tournament {
  id                    String        @id @default(cuid())
  name                  String
  slug                  String        @unique
  game                  String
  status                String
  description           String?
  rules                 String?
  prizePool             String?
  type                  String
  format                String
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  bannerImage           String?
  bannerImageHint       String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  organizer             User          @relation("TournamentOrganizer", fields: [organizerId], references: [id])
  organizerId           String
  teams                 Team[]
  matches               Match[]
  applications          TeamApplication[]
  sponsors              Sponsor[]
  judges                User[]        @relation("TournamentJudges")
  medicalPartners       MedicalPartner[]
  announcements         TournamentAnnouncement[]
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  tournament   Tournament            @relation(fields: [tournamentId], references: [id])
  tournamentId String
  status       TeamApplicationStatus @default(PENDING)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Match {
  id             String      @id @default(cuid())
  team1          Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id        String
  team2          Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id        String
  team1Score     Int?
  team2Score     Int?
  status         MatchStatus
  scheduledAt    DateTime
  finishedAt     DateTime?
  tournament     Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId   String?
  league         League?     @relation(fields: [leagueId], references: [id])
  leagueId       String?
  disputeReason  String?
  disputeOpenedAt DateTime?
  resolution     String?
  referee        User?       @relation("JudgeMatches", fields: [refereeId], references: [id])
  refereeId      String?
  refereeName    String?
  playgroundId   String?
  location       String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  metadata    Json
  timestamp   DateTime     @default(now())
  playground  Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId String?
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model GalleryItem {
  id          String   @id @default(cuid())
  src         String
  alt         String
  dataAiHint  String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
}

model CareerHistory {
  id        String   @id @default(cuid())
  teamName  String
  period    String
  role      String
  review    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  rating         Float
  price          Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id        String    @id @default(cuid())
  name      String?
  type      ChatType
  messages  Message[]
  participants User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChatType {
  PRIVATE
  GROUP
}

model Message {
  id        String   @id @default(cuid())
  text      String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}

model Sponsor {
  id          String       @id @default(cuid())
  name        String
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  teams       Team[]
  tournaments Tournament[]
  promotions  Promotion[]
}

model StoreItem {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Promotion {
  id          String   @id @default(cuid())
  name        String
  description String
  prize       String
  cost        String
  imageDataUri String
  imageHint   String
  endDate     DateTime
  organizer   User     @relation(fields: [organizerId], references: [id])
  organizerId String
  sponsor     Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId   String?
  createdAt   DateTime @default(now())
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String
  imageHint   String
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int
  wins     Int
  losses   Int
  draws    Int
  points   Int
}

model Sport {
  id        String @id @unique
  name      String
  icon      String
  category  String
}

model LfgLobby {
  id            String     @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  playgroundId  String?
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  creator       User       @relation(fields: [creatorId], references: [id])
  creatorId     String
  players       User[]
  createdAt     DateTime   @default(now())
}

enum LfgLobbyType {
  GAME
  TRAINING
}

model Measurement {
  id        String   @id @default(cuid())
  date      DateTime
  weight    Float
  bodyFat   Float?
  chest     Float?
  waist     Float?
  hips      Float?
  biceps    Float?
  thigh     Float?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model TrainingProposal {
  id        String                   @id @default(cuid())
  from      User                     @relation("SentTrainingProposals", fields: [fromId], references: [id])
  fromId    String
  to        User                     @relation("ReceivedTrainingProposals", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  comment   String?
  status    TrainingProposalStatus   @default(PENDING)
  createdAt DateTime                 @default(now())
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  isActive  Boolean      @default(true)
  options   PollOption[]
  votes     PollVote[]
  createdAt DateTime     @default(now())
}

model PollOption {
  id       String     @id @default(cuid())
  text     String
  poll     Poll       @relation(fields: [pollId], references: [id])
  pollId   String
  votes    PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@unique([userId, pollId])
}

model Quest {
  id          String    @id @default(cuid())
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  type        QuestType
  creator     User?     @relation(fields: [creatorId], references: [id])
  creatorId   String?
  createdAt   DateTime  @default(now())
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

model InventoryItem {
  id             String   @id @default(cuid())
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime @default(now())
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model Notification {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  message   String
  href      String?
  isRead    Boolean          @default(false)
  type      NotificationType
  createdAt DateTime         @default(now())
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  SYSTEM_ALERT
}

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  techniqueTips  String[]
  commonMistakes String[]
  alternatives   String[]
  createdAt      DateTime         @default(now())
  loggedExercises LoggedExercise[]
}

model TrainingProgram {
  id             String         @id @default(cuid())
  name           String
  description    String
  goal           String
  daysPerWeek    Int
  splitType      String
  author         String
  coverImage     String?
  coverImageHint String?
  isAiGenerated  Boolean        @default(false)
  weeklySplit    WorkoutDay[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model TrainingLog {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  workoutName String
  status    String // completed, planned, skipped
  notes     String?
  coachNotes String?
  mood      String? // great, good, ok, bad
  exercises LoggedExercise[]
  createdAt DateTime         @default(now())
}

model LoggedExercise {
  id            String     @id @default(cuid())
  trainingLog   TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId String
  exercise      Exercise   @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  notes         String?
  sets          LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String
  plannedWeight    String
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean        @default(false)
}

model FoodItem {
  id           String         @id @default(cuid())
  name         String
  category     String
  image        String?
  imageHint    String?
  calories     Float
  protein      Float
  fat          Float
  carbs        Float
  description  String?
  logEntries   FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String // e.g., Breakfast, Lunch, Dinner, Snack
  createdAt  DateTime @default(now())
}

model Playground {
  id             String    @id @default(cuid())
  name           String
  address        String
  type           String
  coverImage     String?
  coverImageHint String?
  surface        String
  features       String[]
  rating         Float
  checkIns       Int
  status         String    @default("PENDING_MODERATION") // PENDING_MODERATION, APPROVED, REJECTED
  creator        User      @relation(fields: [creatorId], references: [id])
  creatorId      String
  activities     Activity[]
  reviews        PlaygroundReview[]
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String

  @@index([playgroundId])
  @@index([authorId])
}

model TournamentAnnouncement {
  id          String     @id @default(cuid())
  tournament  Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender      User       @relation(fields: [senderId], references: [id])
  senderId    String
  subject     String
  message     String
  sentTo      Int
  createdAt   DateTime   @default(now())
}

model MedicalPartner {
  id             String   @id @default(cuid())
  name           String
  specialization String
  contact        String
  tournaments    Tournament[]
}
