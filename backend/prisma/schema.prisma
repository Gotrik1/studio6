// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------------------------------------
// Enums
// --------------------------------------------------

enum UserRole {
  ADMINISTRATOR @map("Администратор")
  MODERATOR     @map("Модератор")
  CAPTAIN       @map("Капитан")
  PLAYER        @map("Игрок")
  COACH         @map("Тренер")
  JUDGE         @map("Судья")
  MANAGER       @map("Менеджер")
  ORGANIZER     @map("Организатор")
  SPONSOR       @map("Спонсор")
  FAN           @map("Болельщик")
}

enum UserStatus {
  ACTIVE   @map("Активен")
  BANNED   @map("Забанен")
  INACTIVE @map("Неактивен")
}

// --------------------------------------------------
// User and Profile Models
// --------------------------------------------------

model User {
  id                      String                   @id @default(cuid())
  name                    String
  email                   String                   @unique
  passwordHash            String
  avatar                  String?
  role                    UserRole                 @default(PLAYER)
  status                  UserStatus               @default(ACTIVE)
  xp                      Int                      @default(0)
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  isVerified              Boolean                  @default(false)
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  teamsAsCaptain          Team[]                   @relation("TeamCaptain")
  teamsAsCreator          Team[]                   @relation("TeamCreator")
  teamsAsMember           Team[]
  organizedTournaments    Tournament[]             @relation("Organizer")
  judgedMatches           Tournament[]             @relation("TournamentJudges")
  organizedPromotions     Promotion[]
  createdPlaygrounds      Playground[]
  reviews                 PlaygroundReview[]
  checkIns                Activity[]
  sentFriendRequests      FriendRequest[]          @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]          @relation("ReceivedFriendRequests")
  friends                 User[]                   @relation("Friends")
  friendOf                User[]                   @relation("Friends")
  reports                 Report[]                 @relation("ReportedUser")
  reportedBy              Report[]                 @relation("Reporter")
  resolvedReports         Report[]                 @relation("Resolver")
  achievements            UserAchievement[]
  careerHistory           CareerHistory[]
  trainingLogs            TrainingLog[]
  assignedTrainingProgram UserTrainingProgram[]
  coachProfile            CoachProfile?
  coaching                User[]                   @relation("Coaching")
  coachedBy               User?                    @relation("Coaching", fields: [coachId], references: [id])
  coachId                 String?
  measurements            Measurement[]
  sentTrainingProposals   TrainingProposal[]       @relation("SentTrainingProposals")
  receivedTrainingProposals TrainingProposal[]       @relation("ReceivedTrainingProposals")
  inventory               InventoryItem[]
  foodLog                 FoodLogEntry[]
  pollVotes               PollVote[]
  createdPolls            Poll[]
  sentAnnouncements       TournamentAnnouncement[]
  notifications           Notification[]
  createdChallenges       Challenge[]              @relation("CreatedChallenges")
  acceptedChallenges      Challenge[]              @relation("AcceptedChallenges")
  messages                Message[]
  chats                   Chat[]
}

model CareerHistory {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  teamName    String
  period      String
  role        String
  review      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

// --------------------------------------------------
// Team and Tournament Models
// --------------------------------------------------

model Team {
  id                 String              @id @default(cuid())
  name               String
  motto              String?
  logo               String?
  dataAiHint         String?
  game               String
  rank               Int                 @default(0)
  wins               Int                 @default(0)
  losses             Int                 @default(0)
  draws              Int                 @default(0)
  captain            User                @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId          String
  creator            User                @relation("TeamCreator", fields: [creatorId], references: [id])
  creatorId          String
  members            User[]
  tournaments        Tournament[]
  matchesAsTeam1     Match[]             @relation("Team1Matches")
  matchesAsTeam2     Match[]             @relation("Team2Matches")
  seekingSponsorship Boolean             @default(false)
  pitch              String?
  sponsorships       Sponsorship[]
  sponsorshipOffers  SponsorshipOffer[]
  homePlayground     Playground?         @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?
  practices          TeamPractice[]
  matchEvents        MatchEvent[]
  applications       TeamApplication[]
  chat               Chat?
  leagues            LeagueTeam[]
  sponsors           Sponsor[]           @relation("SponsoredTeams")
}

model TeamPractice {
  id           String      @id @default(cuid())
  team         Team        @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground  @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  description             String?
  organizer               User                     @relation("Organizer", fields: [organizerId], references: [id])
  organizerId             String
  game                    String
  status                  TournamentStatus
  type                    TournamentType
  format                  TournamentFormat
  category                String
  location                String
  participantCount        Int
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  teams                   Team[]
  matches                 Match[]
  judges                  User[]                   @relation("TournamentJudges")
  sponsors                Sponsor[]                @relation("SponsoredTournaments")
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  media                   TournamentMedia[]
  applications            TeamApplication[]
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
}

enum TournamentType {
  team
  individual
}

enum TournamentFormat {
  single_elimination
  round_robin
  groups
}

model TournamentMedia {
  id          String      @id @default(cuid())
  tournament  Tournament  @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type        MediaType
  src         String
  description String?
  hint        String?
  createdAt   DateTime    @default(now())
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

model Match {
  id              String         @id @default(cuid())
  team1           Team           @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team           @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournament      Tournament?    @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  round           Int?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  refereeName     String?
  playgroundId    String?
  location        String?
  events          MatchEvent[]
  leagueId        String?
  league          League?        @relation(fields: [leagueId], references: [id])
}

model MatchEvent {
  id        String         @id @default(cuid())
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  type      MatchEventType
  timestamp DateTime
  team      Team           @relation(fields: [teamId], references: [id])
  teamId    String
  player    User           @relation(fields: [playerId], references: [id])
  playerId  String
  metadata  Json?
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  SHOT
  SHOT_ON_TARGET
  CORNER
  FOUL
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}


// --------------------------------------------------
// Sponsorship and Promotions
// --------------------------------------------------

model Sponsor {
  id           String       @id
  name         String
  logo         String?
  logoHint     String?
  description  String
  profileUrl   String
  interests    String[]
  tournaments  Tournament[] @relation("SponsoredTournaments")
  teams        Team[]       @relation("SponsoredTeams")
  promotions   Promotion[]
  offers       SponsorshipOffer[]
}

model Sponsorship {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId String
  amount    Decimal
  signedAt  DateTime @default(now())
}

model SponsorshipOffer {
  id        String      @id @default(cuid())
  team      Team        @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor     @relation(fields: [sponsorId], references: [id])
  sponsorId String
  offerText String
  status    FriendRequestStatus @default(PENDING) // Reusing status enum
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Promotion {
  id            String   @id @default(cuid())
  name          String
  description   String
  prize         String
  cost          String
  imageDataUri  String
  imageHint     String
  endDate       DateTime
  organizer     User     @relation(fields: [organizerId], references: [id])
  organizerId   String
  sponsor       Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId     String?
  createdAt     DateTime @default(now())
}


// --------------------------------------------------
// Notifications and Activity Feed
// --------------------------------------------------

model Notification {
  id             String           @id @default(cuid())
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  type           NotificationType
  message        String
  isRead         Boolean          @default(false)
  href           String?
  createdAt      DateTime         @default(now())
  matchId        String?
  announcementId String?
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  TEAM_INVITE
  SYSTEM
}

model Activity {
  id           String       @id @default(cuid())
  type         ActivityType
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  metadata     Json
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  createdAt    DateTime     @default(now())
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}


// --------------------------------------------------
// Challenges
// --------------------------------------------------

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  wager        Int
  creator      User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  opponentId   String?
  status       ChallengeStatus @default(OPEN)
  result       String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}


// --------------------------------------------------
// Playgrounds
// --------------------------------------------------

model Playground {
  id                String               @id @default(cuid())
  name              String
  address           String
  type              String
  coverImage        String?
  coverImageHint    String?
  surface           String
  features          String[]
  rating            Float
  checkIns          Int
  status            PlaygroundStatus
  creator           User                 @relation(fields: [creatorId], references: [id])
  creatorId         String
  teams             Team[]
  reviews           PlaygroundReview[]
  reports           PlaygroundReport[]
  activities        Activity[]
  practices         TeamPractice[]
  lobbies           LfgLobby[]
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model PlaygroundReport {
  id           String       @id @default(cuid())
  playground   Playground   @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User         @relation(fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}


// --------------------------------------------------
// LFG - Looking For Group
// --------------------------------------------------

model LfgLobby {
  id           String         @id @default(cuid())
  type         LfgLobbyType
  sport        String
  location     String
  playground   Playground?    @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  players      User[]
  comment      String
  status       LfgLobbyStatus @default(OPEN)
  creator      User           @relation(fields: [creatorId], references: [id])
  creatorId    String
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}


// --------------------------------------------------
// User Reports and Moderation
// --------------------------------------------------

model Report {
  id              String       @id @default(cuid())
  reporter        User         @relation("Reporter", fields: [reporterId], references: [id])
  reporterId      String
  reportedUser    User         @relation("ReportedUser", fields: [reportedUserId], references: [id])
  reportedUserId  String
  category        String
  description     String?
  status          ReportStatus @default(PENDING)
  resolver        User?        @relation("Resolver", fields: [resolverId], references: [id])
  resolverId      String?
  resolution      String?
  createdAt       DateTime     @default(now())
  resolvedAt      DateTime?
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}


// --------------------------------------------------
// Chat and Messaging
// --------------------------------------------------

model Chat {
  id           String      @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]
  messages     Message[]
  teamId       String?     @unique
  team         Team?       @relation(fields: [teamId], references: [id])
  createdAt    DateTime    @default(now())
}

enum ChatType {
  DIRECT
  GROUP
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}


// --------------------------------------------------
// Achievements
// --------------------------------------------------

model Achievement {
  id          String            @id @default(cuid())
  name        String
  description String
  icon        String
  users       UserAchievement[]
}

model UserAchievement {
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@id([userId, achievementId])
}


// --------------------------------------------------
// Leagues and Seasons
// --------------------------------------------------

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  league    League   @relation(fields: [leagueId], references: [id])
  leagueId  String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  played    Int      @default(0)
  wins      Int      @default(0)
  draws     Int      @default(0)
  losses    Int      @default(0)
  points    Int      @default(0)

  @@id([leagueId, teamId])
}


// --------------------------------------------------
// Training and Nutrition
// --------------------------------------------------

model TrainingProgram {
  id            String                @id @default(cuid())
  name          String
  description   String
  goal          String // e.g. "Strength", "Hypertrophy"
  daysPerWeek   Int
  splitType     String // e.g. "Full-body", "Upper/Lower", "Push/Pull/Legs"
  author        String // Can be a coach's name or "AI"
  coverImage    String
  coverImageHint String
  isAiGenerated Boolean               @default(false)
  weeklySplit   WorkoutDay[]
  assignedTo    UserTrainingProgram[]
  proposals     TrainingProposal[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
  trainingProgramId String
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model UserTrainingProgram {
  user        User            @relation(fields: [userId], references: [id])
  userId      String
  program     TrainingProgram @relation(fields: [programId], references: [id])
  programId   String
  assignedAt  DateTime        @default(now())
  isActive    Boolean         @default(true)

  @@id([userId, programId])
}

model TrainingLog {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  workoutName String?
  status    TrainingLogStatus
  exercises LoggedExercise[]
  mood      Mood?
  notes     String?
  coachNotes String?
}

enum TrainingLogStatus {
  COMPLETED
  PLANNED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

model LoggedExercise {
  id            String        @id @default(cuid())
  trainingLog   TrainingLog   @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
  trainingLogId String
  exercise      Exercise      @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  notes         String?
  sets          LoggedSet[]
  isSupersetWithPrevious Boolean?
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Int?
  isCompleted      Boolean
}

model Exercise {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json
  commonMistakes  Json
  alternatives    Json
  loggedExercises LoggedExercise[]
}

model TrainingProposal {
  id        String          @id @default(cuid())
  from      User            @relation("SentTrainingProposals", fields: [fromId], references: [id])
  fromId    String
  to        User            @relation("ReceivedTrainingProposals", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  comment   String?
  status    TrainingProposalStatus @default(PENDING)
  program   TrainingProgram? @relation(fields: [programId], references: [id])
  programId String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}


// --------------------------------------------------
// Physical Measurements
// --------------------------------------------------

model Measurement {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  weight    Float
  bodyFat   Float?
  chest     Float?
  waist     Float?
  hips      Float?
  biceps    Float?
  thigh     Float?
  createdAt DateTime  @default(now())
}


// --------------------------------------------------
// Store and Inventory
// --------------------------------------------------

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

// --------------------------------------------------
// Gamification: Quests, Polls
// --------------------------------------------------

model Quest {
  id          String    @id @default(cuid())
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  type        QuestType
  createdAt   DateTime  @default(now())
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  votes     PollVote[]
  author    User?        @relation(fields: [authorId], references: [id])
  authorId  String?
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
}

model PollOption {
  id        String     @id @default(cuid())
  text      String
  poll      Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId    String
  votes     PollVote[]
}

model PollVote {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@id([userId, pollId])
}


// --------------------------------------------------
// FAQ and other system models
// --------------------------------------------------

model FaqItem {
  id       String @id @default(cuid())
  category String
  question String
  answer   String
  createdAt DateTime @default(now())
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
}

model MedicalPartner {
    id String @id @default(cuid())
    name String
    specialization String
    contact String
    avatar String?
    avatarHint String?
    tournaments Tournament[]
}

model TeamApplication {
    id String @id @default(cuid())
    team Team @relation(fields: [teamId], references: [id])
    teamId String
    user User @relation(fields: [userId], references: [id])
    userId String
    message String?
    status FriendRequestStatus @default(PENDING) // Reusing status
    tournament Tournament? @relation(fields: [tournamentId], references: [id])
    tournamentId String?

    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
}

model FoodItem {
    id String @id @default(cuid())
    name String
    category String
    image String?
    imageHint String?
    calories Float
    protein Float
    fat Float
    carbs Float
    description String?
    logEntries FoodLogEntry[]
}

model FoodLogEntry {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    foodItem FoodItem @relation(fields: [foodItemId], references: [id])
    foodItemId String
    grams Int
    meal String
    createdAt DateTime @default(now())
}
