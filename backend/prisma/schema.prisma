// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @default(cuid())
  email                String                 @unique
  name                 String
  passwordHash         String
  avatar               String?
  bannerImage          String?
  bannerImageHint      String?
  xp                   Int                    @default(0)
  role                 String
  status               String
  dateOfBirth          DateTime?
  location             String?
  mainSport            String?
  isVerified           Boolean                @default(false)
  preferredSports      String[]
  telegram             String?
  discord              String?
  teamsAsCaptain       Team[]                 @relation("Captain")
  teamsAsMember        Team[]                 @relation("Members")
  createdTeams         Team[]                 @relation("Creator")
  organizedTournaments Tournament[]           @relation("Organizer")
  judgedMatches        Match[]                @relation("Referee")
  friends              User[]                 @relation("Friendship")
  friendOf             User[]                 @relation("Friendship")
  sentFriendRequests   FriendRequest[]        @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[]      @relation("ReceivedFriendRequests")
  coaching             User[]                 @relation("Coaching")
  coach                User?                  @relation("Coaching", fields: [coachId], references: [id])
  coachId              String?
  organizedPromotions  Promotion[]
  createdPlaygrounds   Playground[]
  reviews              PlaygroundReview[]
  checkIns             Activity[]
  careerHistory        CareerHistory[]
  reportsMade          Report[]               @relation("Reporter")
  reportsReceived      Report[]               @relation("ReportedUser")
  reportsResolved      Report[]               @relation("Resolver")
  sentTeamApplications TeamApplication[]      @relation("Applicant")
  trainingLogs         TrainingLog[]
  measurements         Measurement[]
  sentTrainingProposals TrainingProposal[]     @relation("SentTrainingProposals")
  receivedTrainingProposals TrainingProposal[] @relation("ReceivedTrainingProposals")
  achievements         UserAchievement[]
  inventory            InventoryItem[]
  pollVotes            PollVote[]
  authoredPolls        Poll[]
  notifications        Notification[]
  events               MatchEvent[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
}

model CareerHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id                   String              @id @default(cuid())
  name                 String
  slug                 String              @unique
  game                 String
  motto                String?
  description          String?
  logo                 String?
  dataAiHint           String?
  rank                 Int                 @default(0)
  wins                 Int                 @default(0)
  losses               Int                 @default(0)
  draws                Int                 @default(0)
  homePlaygroundId     String?
  seekingSponsorship   Boolean             @default(false)
  captain              User                @relation("Captain", fields: [captainId], references: [id])
  captainId            String              @unique
  creator              User                @relation("Creator", fields: [creatorId], references: [id])
  creatorId            String
  members              User[]              @relation("Members")
  tournaments          Tournament[]
  team1Matches         Match[]             @relation("Team1Matches")
  team2Matches         Match[]             @relation("Team2Matches")
  applications         TeamApplication[]
  sponsors             Sponsor[]
  practices            TeamPractice[]
  chat                 Chat?
  leagues              LeagueTeam[]
  events               MatchEvent[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  createdAt    DateTime   @default(now())
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  game                  String
  description           String?
  type                  String
  format                String
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  prizePool             String?
  rules                 String?
  status                String
  bannerImage           String?
  bannerImageHint       String?
  organizer             User                     @relation("Organizer", fields: [organizerId], references: [id])
  organizerId           String
  teams                 Team[]
  matches               Match[]
  applications          TeamApplication[]
  sponsors              Sponsor[]
  judges                User[]
  medicalPartners       MedicalPartner[]
  media                 TournamentMedia[]
  announcements         TournamentAnnouncement[]
  league                League?                  @relation(fields: [leagueId], references: [id])
  leagueId              String?
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
}

model TournamentMedia {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type         String
  src          String
  description  String?
  hint         String?
  createdAt    DateTime   @default(now())
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Match {
  id              String      @id @default(cuid())
  team1           Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus @default(PLANNED)
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournamentId    String?
  tournament      Tournament? @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  playgroundId    String?
  location        String?
  referee         User?       @relation("Referee", fields: [refereeId], references: [id])
  refereeId       String?
  refereeName     String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  round           Int?
  events          MatchEvent[]
  league          League?     @relation(fields: [leagueId], references: [id])
  leagueId        String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

model MatchEvent {
  id        String         @id @default(cuid())
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  timestamp DateTime
  type      MatchEventType
  player    User           @relation(fields: [playerId], references: [id])
  playerId  String
  team      Team           @relation(fields: [teamId], references: [id])
  teamId    String
  metadata  Json?
}

enum ChatType {
  DIRECT
  GROUP
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]
  messages     Message[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
  createdAt    DateTime  @default(now())
}

model Message {
  id        String   @id @default(cuid())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  createdAt DateTime @default(now())
  text      String? // Legacy, use content
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
}

model Notification {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  type      NotificationType
  message   String
  href      String?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
}

model Promotion {
  id           String   @id @default(cuid())
  name         String
  description  String
  prize        String
  cost         String
  imageDataUri String
  imageHint    String
  endDate      String
  organizer    User     @relation(fields: [organizerId], references: [id])
  organizerId  String
  sponsor      Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId    String?
  createdAt    DateTime @default(now())
}

model Sponsor {
  id          String       @id @default(cuid())
  name        String
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  promotions  Promotion[]
  teams       Team[]
  tournaments Tournament[]
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

model Playground {
  id           String             @id @default(cuid())
  name         String
  address      String
  type         String
  coverImage   String?
  coverImageHint String?
  surface      String
  features     String[]
  rating       Float
  checkIns     Int
  status       PlaygroundStatus
  creator      User               @relation(fields: [creatorId], references: [id])
  creatorId    String
  reviews      PlaygroundReview[]
  reports      PlaygroundReport[]
  practices    TeamPractice[]
  lobbies      LfgLobby[]
  createdAt    DateTime           @default(now())
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String         @id @default(cuid())
  playground   Playground     @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User           @relation(fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus
  createdAt    DateTime       @default(now())
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("Reporter", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportedUser", fields: [reportedUserId], references: [id])
  reportedUserId String
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  resolver       User?        @relation("Resolver", fields: [resolverId], references: [id])
  resolverId     String?
  resolution     String?
  resolvedAt     DateTime?
  createdAt      DateTime     @default(now())
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation("Applicant", fields: [userId], references: [id])
  userId       String
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  wager        Int
  creator      User            @relation(fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation(fields: [opponentId], references: [id])
  opponentId   String?
  status       ChallengeStatus
  result       String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model Sport {
  id         String      @id
  name       String
  icon       String
  category   String
  challenges Challenge[]
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}

enum LfgLobbyType {
  GAME
  TRAINING
}

model LfgLobby {
  id           String       @id @default(cuid())
  type         LfgLobbyType
  sport        String
  location     String
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  comment      String
  creator      User         @relation(fields: [creatorId], references: [id])
  creatorId    String
  players      User[]
  createdAt    DateTime     @default(now())
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

model TrainingLog {
  id          String            @id @default(cuid())
  user        User              @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  workoutName String?
  status      TrainingLogStatus
  exercises   LoggedExercise[]
  mood        Mood?
  notes       String?
  coachNotes  String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model LoggedExercise {
  id                      String        @id @default(cuid())
  trainingLog             TrainingLog   @relation(fields: [trainingLogId], references: [id])
  trainingLogId           String
  exercise                Exercise      @relation(fields: [exerciseId], references: [id])
  exerciseId              String
  sets                    LoggedSet[]
  notes                   String?
  isSupersetWithPrevious  Boolean?
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Int?
  isCompleted      Boolean
}

model TrainingProgram {
  id              String             @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean            @default(false)
  weeklySplit     WorkoutDay[]
  proposals       TrainingProposal[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String     @id @default(cuid())
  workoutDay              WorkoutDay @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model Exercise {
  id             String           @id @default(cuid())
  name           String
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  logged         LoggedExercise[]
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model FoodItem {
  id          String        @id @default(cuid())
  name        String
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String
  createdAt  DateTime @default(now())
}

model Measurement {
  id      String   @id @default(cuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model TrainingProposal {
  id        String                 @id @default(cuid())
  from      User                   @relation("SentTrainingProposals", fields: [fromId], references: [id])
  fromId    String
  to        User                   @relation("ReceivedTrainingProposals", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  comment   String?
  program   TrainingProgram?       @relation(fields: [programId], references: [id])
  programId String?
  status    TrainingProposalStatus @default(PENDING)
  createdAt DateTime               @default(now())
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

model Quest {
  id          String    @id @default(cuid())
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  type        QuestType
  createdAt   DateTime  @default(now())
}

model Poll {
  id        String      @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  isActive  Boolean     @default(true)
  author    User?       @relation(fields: [authorId], references: [id])
  authorId  String?
  votes     PollVote[]
  createdAt DateTime    @default(now())
}

model PollOption {
  id        String     @id @default(cuid())
  text      String
  poll      Poll       @relation(fields: [pollId], references: [id])
  pollId    String
  votes     PollVote[]
}

model PollVote {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@unique([userId, pollId])
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model Activity {
  id           String       @id @default(cuid())
  type         ActivityType
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  metadata     Json
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  createdAt    DateTime     @default(now())
}

model UserAchievement {
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@id([userId, achievementId])
}

model Achievement {
  id          String            @id @default(cuid())
  name        String
  description String
  icon        String
  users       UserAchievement[]
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  tournaments Tournament[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int    @default(0)
  wins     Int    @default(0)
  losses   Int    @default(0)
  draws    Int    @default(0)
  points   Int    @default(0)

  @@unique([leagueId, teamId])
}
