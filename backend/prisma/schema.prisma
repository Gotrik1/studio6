// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  name                    String
  passwordHash            String
  role                    String
  status                  String                  @default("Активен")
  avatar                  String?
  xp                      Int                     @default(0)
  location                String?
  mainSport               String?
  dateOfBirth             DateTime?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  teamsAsCaptain          Team[]                  @relation("CaptainToTeam")
  teamsAsMember           Team[]                  @relation("TeamMembers")
  organizedTournaments    Tournament[]
  createdPlaygrounds      Playground[]
  organizedPromotions     Promotion[]
  createdTeams            Team[]                  @relation("CreatorToTeam")
  gallery                 GalleryItem[]
  careerHistory           CareerHistoryItem[]
  friends                 User[]                  @relation("Friendship")
  friendOf                User[]                  @relation("Friendship")
  sentFriendRequests      FriendRequest[]         @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]         @relation("ReceivedFriendRequests")
  coaching                User[]                  @relation("CoachToPlayer")
  coach                   User?                   @relation("CoachToPlayer", fields: [coachId], references: [id])
  coachId                 String?
  judgedMatches           Match[]                 @relation("JudgedMatches")
  measurements            Measurement[]
  trainingLogs            TrainingLog[]
  trainingProposalsSent   TrainingProposal[]      @relation("fromUser")
  trainingProposalsRecv   TrainingProposal[]      @relation("toUser")
  pollVotes               PollVote[]
  inventory               InventoryItem[]
  notifications           Notification[]
  foodLog                 FoodLogEntry[]
  messages                Message[]
  chats                   Chat[]                  @relation("ChatParticipants")
  createdLfgLobbies       LfgLobby[]
  joinedLfgLobbies        LfgLobby[]              @relation("LfgLobbyPlayers")
  activities              Activity[]
  coachProfile            CoachProfile?
  sponsorshipsAsCaptain   Sponsorship[]
  sponsorshipOffersAsTeam TeamSponsorshipOffer[]
  sponsorshipsAsSponsor   Sponsor[]
}

model Team {
  id                 String                 @id @default(cuid())
  name               String
  slug               String                 @unique
  game               String
  motto              String?
  logo               String?
  dataAiHint         String?
  homePlaygroundId   String?
  wins               Int                    @default(0)
  losses             Int                    @default(0)
  draws              Int                    @default(0)
  rank               Int                    @default(999)
  seekingSponsorship Boolean                @default(false)
  captain            User                   @relation("CaptainToTeam", fields: [captainId], references: [id])
  captainId          String
  members            User[]                 @relation("TeamMembers")
  creator            User                   @relation("CreatorToTeam", fields: [creatorId], references: [id])
  creatorId          String
  tournaments        Tournament[]
  matchesAsTeam1     Match[]                @relation("Team1ToMatch")
  matchesAsTeam2     Match[]                @relation("Team2ToMatch")
  sponsors           Sponsor[]              @relation("SponsorsToTeams")
  sponsorshipOffers  TeamSponsorshipOffer[]
}

model Tournament {
  id                      String      @id @default(cuid())
  name                    String
  slug                    String      @unique
  game                    String
  status                  String      @default("REGISTRATION") // REGISTRATION, ONGOING, FINISHED
  teams                   Team[]
  organizer               User        @relation(fields: [organizerId], references: [id])
  organizerId             String
  matches                 Match[]
  type                    String      @default("team") // team, individual
  format                  String      @default("single_elimination") // single_elimination, round_robin, groups
  category                String      @default("Киберспорт")
  location                String      @default("Онлайн")
  participantCount        Int         @default(16)
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
}

model Match {
  id              String      @id @default(cuid())
  team1           Team        @relation("Team1ToMatch", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team        @relation("Team2ToMatch", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus @default(PLANNED)
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournament      Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  leagueId        String?
  league          League?     @relation(fields: [leagueId], references: [id])
  referee         User?       @relation("JudgedMatches", fields: [refereeId], references: [id])
  refereeId       String?
  location        String?
  playgroundId    String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  refereeName     String?     @default("AI Judge")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Playground {
  id             String    @id @default(cuid())
  name           String
  address        String
  type           String
  coverImage     String?
  coverImageHint String?
  surface        String
  features       String[]
  rating         Float
  checkIns       Int
  status         String    @default("PENDING_MODERATION") // PENDING_MODERATION, APPROVED, REJECTED
  creator        User      @relation(fields: [creatorId], references: [id])
  creatorId      String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model GalleryItem {
  id         String   @id @default(cuid())
  src        String
  alt        String
  dataAiHint String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())
}

model CareerHistoryItem {
  id       String @id @default(cuid())
  teamName String
  period   String
  role     String
  review   String
  user     User   @relation(fields: [userId], references: [id])
  userId   String
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fromId, toId])
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  rating         Float    @default(5.0)
  price          Decimal  @default(1500)
}

model Sponsor {
  id          String   @id @default(cuid())
  name        String
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  teams       Team[]   @relation("SponsorsToTeams")
  promotions  Promotion[]
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?  @unique
}

model Sponsorship {
  id          String   @id @default(cuid())
  team        Team     @relation(fields: [teamId], references: [id])
  teamId      String
  captain     User     @relation(fields: [captainId], references: [id])
  captainId   String
  pitch       String
  needs       String[]
  status      String   @default("searching") // searching, in_talks, sponsored
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String

  @@index([chatId])
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         String // DIRECT, GROUP
  participants User[]    @relation("ChatParticipants")
  messages     Message[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String
  message   String
  href      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model StoreItem {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Decimal
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Exercise {
  id              String   @id @default(cuid())
  name            String   @unique
  description     String
  category        String // e.g. 'Грудь', 'Ноги', 'Valorant'
  equipment       String // e.g. 'Штанга', 'Собственный вес', 'Компьютер'
  image           String?
  imageHint       String?
  techniqueTips   String[]
  commonMistakes  String[]
  alternatives    String[]
  createdAt       DateTime @default(now())
}

model TrainingProgram {
  id             String          @id @default(cuid())
  name           String
  description    String
  goal           String
  daysPerWeek    Int
  splitType      String
  author         String
  coverImage     String
  coverImageHint String
  isAiGenerated  Boolean         @default(false)
  weeklySplit    WorkoutDay[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model WorkoutDay {
  id                String            @id @default(cuid())
  day               Int
  title             String
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  exercises         ExerciseInDay[]
}

model ExerciseInDay {
  id                       String      @id @default(cuid())
  workoutDay               WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId             String
  name                     String
  sets                     String
  reps                     String
  plannedWeight            String?
  isSupersetWithPrevious   Boolean?
  technique                String?
}

model TeamSponsorshipOffer {
  id         String   @id @default(cuid())
  team       Team     @relation(fields: [teamId], references: [id])
  teamId     String
  sponsor    Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId  String
  offer      String
  status     String   @default("pending") // pending, accepted, declined
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Promotion {
  id            String   @id @default(cuid())
  name          String
  description   String
  prize         String
  cost          String
  imageDataUri  String
  imageHint     String
  organizer     User     @relation(fields: [organizerId], references: [id])
  organizerId   String
  sponsor       Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId     String?
  endDate       DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String
  imageHint   String
  teams       LeagueTeam[]
  matches     Match[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int
  wins     Int
  losses   Int
  draws    Int
  points   Int

  @@unique([leagueId, teamId])
}

model Challenge {
  id          String          @id @default(cuid())
  title       String
  description String
  discipline  String
  wager       Int
  status      ChallengeStatus @default(OPEN)
  result      String?
  creator     User            @relation(fields: [creatorId], references: [id])
  creatorId   String
  opponent    User?           @relation(fields: [opponentId], references: [id])
  opponentId  String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model LfgLobby {
  id            String       @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  playgroundId  String?
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  creator       User         @relation("createdLfgLobbies", fields: [creatorId], references: [id])
  creatorId     String
  players       User[]       @relation("LfgLobbyPlayers")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

enum LfgLobbyType {
  GAME
  TRAINING
}

model Measurement {
  id      String    @id @default(cuid())
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

model TrainingProposal {
  id        String   @id @default(cuid())
  from      User     @relation("fromUser", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("toUser", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  comment   String?
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
}

model TrainingLog {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  workoutName String
  status    String // completed, planned, skipped
  mood      String? // great, good, ok, bad
  notes     String?
  coachNotes String?
  exercises LoggedExercise[]
}

model LoggedExercise {
  id            String      @id @default(cuid())
  trainingLog   TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId String
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  notes         String?
  sets          LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean        @default(false)
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  options   PollOption[]
  votes     PollVote[]
}

model PollOption {
  id        String     @id @default(cuid())
  poll      Poll       @relation(fields: [pollId], references: [id])
  pollId    String
  text      String
  votes     PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@unique([userId, pollId])
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String
  category    String
  image       String?
  imageHint   String?
  calories    Int
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String
  createdAt  DateTime @default(now())

  @@index([userId])
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

// Activity Model
model Activity {
  id        String       @id @default(cuid())
  type      ActivityType
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  metadata  Json
  timestamp DateTime     @default(now())

  @@index([userId])
}

enum ActivityType {
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
}

    