// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------
// ENUMS
// -------------------
enum Role {
  Игрок
  Капитан
  Тренер
  Организатор
  Судья
  Модератор
  Администратор
  Спонсор
  Болельщик
}

enum UserStatus {
  Активен
  Забанен
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum ReportSeverity {
  low
  medium
  high
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
}

enum TournamentType {
  team
  individual
}

enum TournamentFormat {
  single_elimination
  round_robin
  groups
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

// -------------------
// MODELS
// -------------------
model User {
  id                      String        @id @default(cuid())
  name                    String
  email                   String        @unique
  passwordHash            String
  avatar                  String?
  role                    Role
  status                  UserStatus    @default(Активен)
  xp                      Int           @default(0)
  location                String?
  mainSport               String?
  isVerified              Boolean       @default(false)
  dateOfBirth             DateTime?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  teamsAsMember           Team[]        @relation("TeamMembers")
  teamsAsCaptain          Team[]        @relation("TeamCaptain")
  teamsAsCreator          Team[]        @relation("TeamCreator")
  organizedTournaments    Tournament[]
  judgedMatches           Match[]
  reportsMade             Report[]      @relation("Reporter")
  reportsReceived         Report[]      @relation("ReportedUser")
  resolvedReports         Report[]      @relation("Resolver")
  playgroundsCreated      Playground[]
  reviews                 PlaygroundReview[]
  reportsAboutPlaygrounds PlaygroundReport[]
  friends                 User[]        @relation("Friends")
  friendOf                User[]        @relation("Friends")
  sentFriendRequests      FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[] @relation("ReceivedFriendRequests")
  messages                Message[]
  chats                   Chat[]        @relation("ChatParticipants")
  organizedPromotions     Promotion[]
  lfgCreated              LfgLobby[]
  lfgJoined               LfgLobby[]    @relation("LfgPlayers")
  challengesCreated       Challenge[]   @relation("ChallengeCreator")
  challengesAsOpponent    Challenge[]   @relation("ChallengeOpponent")
  trainingLogs            TrainingLog[]
  coachProfile            CoachProfile?
  coaching                User[]        @relation("CoachStudents")
  coachId                 String?
  coach                   User?         @relation("CoachStudents", fields: [coachId], references: [id])
  trainingProposalsSent   TrainingProposal[] @relation("SentTrainingProposals")
  trainingProposalsReceived TrainingProposal[] @relation("ReceivedTrainingProposals")
  inventory               InventoryItem[]
  measurements            Measurement[]
  foodLogEntries          FoodLogEntry[]
  pollVotes               PollVote[]
  sentAnnouncements       TournamentAnnouncement[]
}

model Team {
  id                 String                @id @default(cuid())
  name               String
  slug               String                @unique
  game               String
  motto              String?
  logo               String?
  dataAiHint         String?
  rank               Int                   @default(0)
  wins               Int                   @default(0)
  losses             Int                   @default(0)
  draws              Int                   @default(0)
  seekingSponsorship Boolean               @default(false)
  description        String?
  goals              String?
  homePlaygroundId   String?
  homePlayground     Playground?           @relation(fields: [homePlaygroundId], references: [id])
  creator            User                  @relation("TeamCreator", fields: [creatorId], references: [id])
  creatorId          String
  captain            User                  @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId          String
  members            User[]                @relation("TeamMembers")
  tournaments        Tournament[]
  team1Matches       Match[]               @relation("Team1Matches")
  team2Matches       Match[]               @relation("Team2Matches")
  sponsors           Sponsor[]
  chat               Chat?
  applications       TeamApplication[]
  practices          TeamPractice[]
  careerHistory      CareerHistory[]
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
}

model Match {
  id              String      @id @default(cuid())
  team1           Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  tournament      Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  league          League?     @relation(fields: [leagueId], references: [id])
  leagueId        String?
  events          MatchEvent[]
  scheduledAt     DateTime?
  startedAt       DateTime?
  finishedAt      DateTime?
  playground      Playground? @relation(fields: [playgroundId], references: [id])
  playgroundId    String?
  location        String?
  refereeName     String?
  judges          User[]
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  description             String?
  status                  TournamentStatus         @default(REGISTRATION)
  game                    String
  type                    TournamentType
  format                  TournamentFormat
  category                String?
  location                String?
  participantCount        Int
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  organizer               User                     @relation(fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
  announcements           TournamentAnnouncement[]
  sponsors                Sponsor[]                @relation("TournamentSponsors")
  judges                  User[]                   @relation("TournamentJudges")
  medicalPartners         MedicalPartner[]
  media                   TournamentMedia[]
  applications            TeamApplication[]
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
}

model Playground {
  id                 String             @id @default(cuid())
  name               String
  address            String
  type               String
  coverImage         String?
  coverImageHint     String?
  surface            String
  features           String[]
  rating             Float              @default(0)
  checkIns           Int                @default(0)
  status             String             @default("PENDING_MODERATION")
  creator            User               @relation(fields: [creatorId], references: [id])
  creatorId          String
  teamsWithHome      Team[]
  reviews            PlaygroundReview[]
  reports            PlaygroundReport[]
  matches            Match[]
  practices          TeamPractice[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model LfgLobby {
  id             String       @id @default(cuid())
  type           LfgLobbyType
  creator        User         @relation(fields: [creatorId], references: [id])
  creatorId      String
  sport          String
  location       String
  playgroundId   String?
  startTime      DateTime
  endTime        DateTime
  playersNeeded  Int
  comment        String
  players        User[]       @relation("LfgPlayers")
  status         LfgLobbyStatus @default(OPEN)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String   @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  playgroundId String
  reporter     User     @relation(fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     ReportSeverity
  summary      String
  status       ReportStatus
  resolution   String?
  resolverId   String?
  resolver     User?    @relation(fields: [resolverId], references: [id])
  resolvedAt   DateTime?
  createdAt    DateTime @default(now())
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@unique([fromId, toId])
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         String    @default("PRIVATE") // PRIVATE or GROUP
  messages     Message[]
  participants User[]    @relation("ChatParticipants")
  teamId       String?   @unique
  team         Team?     @relation(fields: [teamId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Activity {
  id           String       @id @default(cuid())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  type         ActivityType
  metadata     Json
  createdAt    DateTime     @default(now())
  playground   Playground?  @relation(fields: [playgroundId], references: [id], onDelete: SetNull)
  playgroundId String?
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  creator      User            @relation("ChallengeCreator", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("ChallengeOpponent", fields: [opponentId], references: [id])
  opponentId   String?
  status       ChallengeStatus @default(OPEN)
  result       String?
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model Measurement {
  id      String    @id @default(cuid())
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

model TrainingProposal {
  id        String   @id @default(cuid())
  from      User     @relation("SentTrainingProposals", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedTrainingProposals", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  program   TrainingProgram? @relation(fields: [programId], references: [id])
  programId String?
  comment   String?
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TrainingLog {
  id          String   @id @default(cuid())
  date        DateTime
  workoutName String?
  status      TrainingLogStatus @default(PLANNED)
  mood        Mood?
  notes       String?
  coachNotes  String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  exercises   LoggedExercise[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LoggedExercise {
  id                       String  @id @default(cuid())
  trainingLog              TrainingLog @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
  trainingLogId            String
  exercise                 Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId               String
  notes                    String?
  isSupersetWithPrevious   Boolean?   @default(false)
  sets                     LoggedSet[]
}

model LoggedSet {
  id                 String   @id @default(cuid())
  loggedExercise     LoggedExercise @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
  loggedExerciseId   String
  plannedReps        String?
  plannedWeight      String?
  loggedReps         Int?
  loggedWeight       Float?
  rpe                Int?
  isCompleted        Boolean  @default(false)
}

model Sponsor {
  id            String       @id @default(cuid())
  name          String
  logo          String?
  logoHint      String?
  description   String
  profileUrl    String
  interests     String[]
  tournaments   Tournament[] @relation("TournamentSponsors")
  teams         Team[]
  promotions    Promotion[]
}

model Promotion {
  id            String    @id @default(cuid())
  name          String
  description   String
  prize         String
  imageDataUri  String
  imageHint     String
  cost          String
  endDate       DateTime
  organizer     User      @relation(fields: [organizerId], references: [id])
  organizerId   String
  sponsor       Sponsor?  @relation(fields: [sponsorId], references: [id])
  sponsorId     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String @unique
  played   Int
  wins     Int
  draws    Int
  losses   Int
  points   Int
}

model Sport {
  id          String      @id
  name        String      @unique
  icon        String
  category    String
  challenges  Challenge[]
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  isActive  Boolean      @default(true)
  options   PollOption[]
  votes     PollVote[]
  createdAt DateTime     @default(now())
}

model PollOption {
  id        String     @id @default(cuid())
  text      String
  poll      Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId    String
  votes     PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@unique([userId, pollId])
}

model Quest {
  id          String   @id @default(cuid())
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  type        String
  createdAt   DateTime @default(now())
}

model InventoryItem {
  id             String   @id @default(cuid())
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model FoodItem {
  id           String         @id @default(cuid())
  name         String
  category     String
  image        String?
  imageHint    String?
  calories     Int
  protein      Float
  fat          Float
  carbs        Float
  description  String?
  logEntries   FoodLogEntry[]
}

model FoodLogEntry {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  foodItem    FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId  String
  grams       Int
  meal        String
  createdAt   DateTime @default(now())
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
}

model TournamentMedia {
  id          String     @id @default(cuid())
  tournament  Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId String
  type        String // IMAGE, VIDEO, AUDIO
  src         String
  description String?
  hint        String?
  createdAt   DateTime   @default(now())
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}

model Report {
  id               String       @id @default(cuid())
  reporter         User         @relation("Reporter", fields: [reporterId], references: [id])
  reporterId       String
  reportedUser     User         @relation("ReportedUser", fields: [reportedUserId], references: [id])
  reportedUserId   String
  reason           String
  context          String
  status           ReportStatus @default(PENDING)
  resolution       String?
  resolver         User?        @relation("Resolver", fields: [resolverId], references: [id])
  resolverId       String?
  resolvedAt       DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  rating         Float
  price          Decimal
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model CareerHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  startDate DateTime
  endDate   DateTime?
  role      String
  createdAt DateTime @default(now())
}

model TeamApplication {
  id           String   @id @default(cuid())
  team         Team     @relation(fields: [teamId], references: [id])
  teamId       String
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([teamId, userId, tournamentId])
}

model MatchEvent {
  id        String   @id @default(cuid())
  match     Match    @relation(fields: [matchId], references: [id])
  matchId   String
  time      String
  event     String
  player    String
  team      String
  createdAt DateTime @default(now())
}

model TrainingProgram {
  id                  String             @id
  name                String
  description         String
  goal                String
  daysPerWeek         Int
  splitType           String
  author              String
  coverImage          String
  coverImageHint      String
  isAiGenerated       Boolean            @default(false)
  weeklySplit         WorkoutDay[]
  trainingProposals   TrainingProposal[]
}

model WorkoutDay {
  id                String             @id @default(cuid())
  day               Int
  title             String
  trainingProgram   TrainingProgram    @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
  trainingProgramId String
  exercises         ExerciseDetail[]
}

model ExerciseDetail {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model Exercise {
  id             String           @id @default(cuid())
  name           String
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  loggedEntries  LoggedExercise[]
}
