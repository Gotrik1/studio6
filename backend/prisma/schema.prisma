// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS

enum UserRole {
  ADMINISTRATOR @map("Администратор")
  MODERATOR     @map("Модератор")
  CAPTAIN       @map("Капитан")
  PLAYER        @map("Игрок")
  COACH         @map("Тренер")
  JUDGE         @map("Судья")
  MANAGER       @map("Менеджер")
  ORGANIZER     @map("Организатор")
  SPONSOR       @map("Спонсор")
  FAN           @map("Болельщик")
}

enum UserStatus {
  ACTIVE    @map("Активен")
  BANNED    @map("Забанен")
  INACTIVE  @map("Неактивен")
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

enum ChatType {
  DIRECT
  GROUP
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  TEAM_INVITE
  TOURNAMENT_UPDATE
  ANNOUNCEMENT
  SYSTEM
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

enum TournamentType {
  team
  individual
}

enum TournamentFormat {
  single_elimination
  round_robin
  groups
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

// MODELS

model User {
  id                      String                   @id @default(cuid())
  name                    String
  email                   String                   @unique
  passwordHash            String
  avatar                  String?
  role                    UserRole                 @default(PLAYER)
  status                  UserStatus               @default(ACTIVE)
  xp                      Int                      @default(0)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  isVerified              Boolean                  @default(false)
  location                String?
  mainSport               String?
  dateOfBirth             DateTime?
  preferredSports         String[]
  telegram                String?
  discord                 String?

  teamsAsCaptain          Team[]                   @relation("Captain")
  teamsAsMember           Team[]                   @relation("TeamMembers")
  createdTeams            Team[]                   @relation("Creator")
  
  organizedTournaments    Tournament[]             @relation("Organizer")
  judgedTournaments       Tournament[]             @relation("Judges")
  
  createdPlaygrounds      Playground[]
  
  activities              Activity[]
  notifications           Notification[]
  
  friends                 User[]                   @relation("Friends")
  friendsOf               User[]                   @relation("Friends")
  
  sentFriendRequests      FriendRequest[]          @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]          @relation("ReceivedFriendRequests")

  createdChallenges       Challenge[]              @relation("CreatedChallenges")
  acceptedChallenges      Challenge[]              @relation("AcceptedChallenges")

  reportsMade             Report[]                 @relation("Reporter")
  reportsAgainst          Report[]                 @relation("Reported")
  reportsResolved         Report[]                 @relation("Resolver")

  teamApplications        TeamApplication[]
  
  trainingLogs            TrainingLog[]
  measurements            Measurement[]
  foodLogEntries          FoodLogEntry[]
  inventoryItems          InventoryItem[]
  
  coaching                User[]                   @relation("CoachTrainees")
  coaches                 User[]                   @relation("CoachTrainees")
  coachProfile            CoachProfile?
  
  createdProposals        TrainingProposal[]       @relation("CreatedProposals")
  receivedProposals       TrainingProposal[]       @relation("ReceivedProposals")
  
  matchEvents             MatchEvent[]
  
  userAchievements        UserAchievement[]
  
  pollVotes               PollVote[]
  authoredPolls           Poll[]

  chats                   Chat[]

  createdAnnouncements    TournamentAnnouncement[] @relation("SentAnnouncements")
  organizedPromotions     Promotion[]
  
  careerHistory           CareerHistory[]
}


model CareerHistory {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  teamName    String
  period      String
  role        String
  review      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Team {
  id                 String   @id @default(cuid())
  name               String
  slug               String   @unique
  motto              String?
  description        String?
  logo               String?
  dataAiHint         String?
  game               String
  rank               Int      @default(0)
  wins               Int      @default(0)
  losses             Int      @default(0)
  draws              Int      @default(0)
  seekingSponsorship Boolean  @default(false)
  pitch              String?  @default("Мы — перспективная команда, ищем поддержку для участия в турнирах и покупки экипировки.")

  captain   User   @relation("Captain", fields: [captainId], references: [id])
  captainId String
  creator   User   @relation("Creator", fields: [creatorId], references: [id])
  creatorId String

  members          User[]            @relation("TeamMembers")
  tournaments      Tournament[]
  team1Matches     Match[]           @relation("Team1")
  team2Matches     Match[]           @relation("Team2")
  matchEvents      MatchEvent[]
  homePlayground   Playground?       @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId String?
  practices        TeamPractice[]
  sponsors         Sponsor[]         @relation("SponsoredTeams")
  sponsorships     Sponsorship[]
  applications     TeamApplication[]
  chat             Chat?
  leagues          LeagueTeam[]
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model Tournament {
  id                      String             @id @default(cuid())
  name                    String
  slug                    String             @unique
  game                    String
  description             String?
  type                    TournamentType
  format                  TournamentFormat
  status                  TournamentStatus
  category                String
  location                String
  participantCount        Int
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?

  organizer               User                     @relation("Organizer", fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
  judges                  User[]                   @relation("Judges")
  sponsors                Sponsor[]                @relation("SponsoredTournaments")
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  applications            TeamApplication[]
  media                   TournamentMedia[]
}

model TournamentMedia {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type         String // "IMAGE", "VIDEO", "AUDIO"
  src          String
  description  String?
  hint         String?
  createdAt    DateTime   @default(now())
}

model Match {
  id              String         @id @default(cuid())
  team1           Team           @relation("Team1", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team           @relation("Team2", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournament      Tournament?    @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  round           Int?
  location        String?
  playgroundId    String?
  refereeName     String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  events          MatchEvent[]
  league          League?        @relation(fields: [leagueId], references: [id])
  leagueId        String?
}

model MatchEvent {
  id        String         @id @default(cuid())
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  type      MatchEventType
  timestamp DateTime       @default(now())
  team      Team           @relation(fields: [teamId], references: [id])
  teamId    String
  player    User           @relation(fields: [playerId], references: [id])
  playerId  String
  metadata  Json?
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
}

model Playground {
  id                 String               @id @default(cuid())
  name               String
  address            String
  type               String
  coverImage         String?
  coverImageHint     String?
  surface            String
  features           String[]
  rating             Float
  checkIns           Int
  status             PlaygroundStatus
  creator            User                 @relation(fields: [creatorId], references: [id])
  creatorId          String
  reviews            PlaygroundReview[]
  reports            PlaygroundReport[]
  homeForTeams       Team[]
  practices          TeamPractice[]
  lfgLobbies         LfgLobby[]
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User       @relation(fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus
  createdAt    DateTime   @default(now())
}

model Notification {
  id             String           @id @default(cuid())
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  type           NotificationType
  message        String
  href           String?
  isRead         Boolean          @default(false)
  createdAt      DateTime         @default(now())
  matchId        String?
  announcementId String?
  announcement   TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  createdAt    DateTime              @default(now())
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  wager        Int
  creator      User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  opponentId   String?
  status       ChallengeStatus @default(OPEN)
  result       String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Report {
  id               String       @id @default(cuid())
  reporter         User         @relation("Reporter", fields: [reporterId], references: [id])
  reporterId       String
  reportedUser     User         @relation("Reported", fields: [reportedUserId], references: [id])
  reportedUserId   String
  category         String
  description      String?
  status           ReportStatus @default(PENDING)
  resolver         User?        @relation("Resolver", fields: [resolverId], references: [id])
  resolverId       String?
  resolution       String?
  createdAt        DateTime     @default(now())
  resolvedAt       DateTime?
}

model Sport {
  id         String      @id @default(cuid())
  name       String      @unique
  icon       String
  category   String
  challenges Challenge[]
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]
  messages     Message[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime @default(now())
}

model UserAchievement {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([userId, achievementId])
}

model Achievement {
  id          String            @id @default(cuid())
  name        String
  description String
  icon        String
  users       UserAchievement[]
}

model Sponsor {
  id           String       @id @default(cuid())
  name         String       @unique
  logo         String?
  logoHint     String?
  description  String
  profileUrl   String
  interests    String[]
  tournaments  Tournament[] @relation("SponsoredTournaments")
  teams        Team[]       @relation("SponsoredTeams")
  promotions   Promotion[]
  sponsorships Sponsorship[]
}

model Sponsorship {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId String
  amount    Decimal
  signedAt  DateTime @default(now())
}

model Promotion {
  id           String   @id @default(cuid())
  name         String
  description  String
  prize        String
  sponsor      Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId    String?
  organizer    User     @relation(fields: [organizerId], references: [id])
  organizerId  String
  imageDataUri String
  imageHint    String
  cost         String
  endDate      DateTime
  createdAt    DateTime @default(now())
}

model League {
  id          String      @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id        String   @id @default(cuid())
  league    League   @relation(fields: [leagueId], references: [id])
  leagueId  String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  played    Int
  wins      Int
  draws     Int
  losses    Int
  points    Int
}

model LfgLobby {
  id           String       @id @default(cuid())
  creator      User         @relation(fields: [creatorId], references: [id])
  creatorId    String
  players      User[]
  type         LfgLobbyType
  sport        String
  location     String
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  comment      String
  status       LfgLobbyStatus @default(OPEN)
  createdAt    DateTime     @default(now())
}

model TrainingProgram {
  id               String                 @id
  name             String
  description      String
  goal             String
  daysPerWeek      Int
  splitType        String
  author           String
  coverImage       String
  coverImageHint   String
  isAiGenerated    Boolean                @default(false)
  weeklySplit      WorkoutDay[]
  assignedToUsers  UserTrainingProgram[]
  trainingProposals TrainingProposal[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
  trainingProgramId String
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model UserTrainingProgram {
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  program   TrainingProgram @relation(fields: [programId], references: [id])
  programId String
  assignedAt DateTime        @default(now())
  isActive   Boolean         @default(true)

  @@id([userId, programId])
}

model TrainingLog {
  id           String            @id @default(cuid())
  user         User              @relation(fields: [userId], references: [id])
  userId       String
  date         DateTime
  workoutName  String?
  status       TrainingLogStatus
  exercises    LoggedExercise[]
  mood         Mood?
  notes        String?
  coachNotes   String?
}

model LoggedExercise {
  id                    String        @id @default(cuid())
  trainingLog           TrainingLog   @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
  trainingLogId         String
  exercise              Exercise      @relation(fields: [exerciseId], references: [id])
  exerciseId            String
  notes                 String?
  sets                  LoggedSet[]
  isSupersetWithPrevious Boolean?
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean        @default(false)
}

model Exercise {
  id              String            @id @default(cuid())
  name            String            @unique
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json
  commonMistakes  Json
  alternatives    Json
  loggedExercises LoggedExercise[]
}

model TrainingProposal {
  id        String           @id @default(cuid())
  from      User             @relation("CreatedProposals", fields: [fromId], references: [id])
  fromId    String
  to        User             @relation("ReceivedProposals", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  comment   String?
  status    TrainingProposalStatus @default(PENDING)
  program   TrainingProgram? @relation(fields: [programId], references: [id])
  programId String?
  createdAt DateTime         @default(now())
}

model Poll {
  id         String     @id @default(cuid())
  title      String
  question   String
  isActive   Boolean    @default(true)
  author     User?      @relation(fields: [authorId], references: [id])
  authorId   String?
  options    PollOption[]
  votes      PollVote[]
  createdAt  DateTime   @default(now())
}

model PollOption {
  id    String     @id @default(cuid())
  text  String
  poll  Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String
  votes PollVote[]
}

model PollVote {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@id([userId, pollId])
}

model TournamentAnnouncement {
  id           String         @id @default(cuid())
  tournament   Tournament     @relation(fields: [tournamentId], references: [id])
  tournamentId String
  subject      String
  message      String
  sender       User           @relation("SentAnnouncements", fields: [senderId], references: [id])
  senderId     String
  sentTo       Int
  createdAt    DateTime       @default(now())
  Notification Notification[]
}

model Activity {
  id           String      @id @default(cuid())
  type         ActivityType
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  metadata     Json
  playground   Playground? @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  createdAt    DateTime    @default(now())
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}

model InventoryItem {
  id             String   @id @default(cuid())
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime @default(now())
}

model StoreItem {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model FoodItem {
  id           String        @id @default(cuid())
  name         String
  category     String
  image        String?
  imageHint    String?
  calories     Float
  protein      Float
  fat          Float
  carbs        Float
  description  String?
  logEntries   FoodLogEntry[]
}

model FoodLogEntry {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  foodItem    FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId  String
  grams       Int
  meal        String // Breakfast, Lunch, Dinner, Snack
  createdAt   DateTime @default(now())
}

model Measurement {
  id      String    @id @default(cuid())
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}
