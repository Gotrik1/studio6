generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums ---

enum UserStatus {
  ACTIVE
  BANNED
  DELETED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  SHOT
  SHOT_ON_TARGET
  CORNER
  FOUL
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

enum TournamentType {
  TEAM
  INDIVIDUAL
}

enum TournamentFormat {
  SINGLE_ELIMINATION
  ROUND_ROBIN
  GROUPS
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

enum ChatType {
  DIRECT
  GROUP
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
  REJECTED
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
  WITHDRAWN
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

// --- Models ---

// User and Profile related models
model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    String                   @default("Игрок")
  status                  UserStatus               @default(ACTIVE)
  xp                      Int                      @default(0)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  isVerified              Boolean                  @default(false)
  preferredSports         String[]                 @default([])
  telegram                String?
  discord                 String?
  friends                 User[]                   @relation("UserFriends")
  friendOf                User[]                   @relation("UserFriends")
  sentFriendRequests      FriendRequest[]          @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]          @relation("ReceivedFriendRequests")
  reportsSent             Report[]                 @relation("ReportsSent")
  reportsReceived         Report[]                 @relation("ReportsReceived")
  reportsResolved         Report[]                 @relation("ReportsResolved")
  careerHistory           CareerHistory[]
  coachProfile            CoachProfile?
  coaching                User[]                   @relation("CoachedBy")
  coachedBy               User?                    @relation("CoachedBy", fields: [coachId], references: [id])
  coachId                 String?
  sponsorships            Sponsorship[]
  organizedPromotions     Promotion[]
  createdChallenges       Challenge[]              @relation("CreatedChallenges")
  acceptedChallenges      Challenge[]              @relation("AcceptedChallenges")
  trainingProposalsSent   TrainingProposal[]       @relation("ProposalsSent")
  trainingProposalsRcvd   TrainingProposal[]       @relation("ProposalsReceived")
  pollsVoted              PollVote[]
  createdPlaygrounds      Playground[]
  playgroundReviews       PlaygroundReview[]
  checkIns                Activity[]
  trainingPrograms        UserTrainingProgram[]
  trainingLogs            TrainingLog[]
  notifications           Notification[]
  sentAnnouncements       TournamentAnnouncement[]
  inventory               InventoryItem[]
  foodLog                 FoodLogEntry[]
  measurements            Measurement[]
  teamMemberships         Team[]                   @relation("TeamMembers")
  captainedTeams          Team[]                   @relation("TeamCaptain")
  createdTeams            Team[]                   @relation("TeamCreator")
  organizedTournaments    Tournament[]             @relation("TournamentOrganizer")
  judgedTournaments       Tournament[]             @relation("JudgedTournaments")
  applications            TeamApplication[]
  matchEvents             MatchEvent[]             @relation("MatchEventPlayer")
  sentMessages            Message[]
  chats                   Chat[]                   @relation("ChatParticipants")
  lobbies                 LfgLobby[]
  reportedPlaygrounds     PlaygroundReport[]       @relation("PlaygroundReportsSent")
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@unique([fromId, toId])
}

model CareerHistory {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  teamName    String
  period      String
  role        String
  review      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CoachProfile {
  id             String    @id @default(cuid())
  user           User      @relation(fields: [userId], references: [id])
  userId         String    @unique
  specialization String
  description    String    @db.Text
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// Team and Tournament related models
model Team {
  id                 String             @id @default(cuid())
  name               String             @unique
  slug               String             @unique
  logo               String?
  dataAiHint         String?
  motto              String?
  description        String?
  game               String
  rank               Int                @default(1)
  wins               Int                @default(0)
  losses             Int                @default(0)
  draws              Int                @default(0)
  seekingSponsorship Boolean            @default(true)
  pitch              String?            @db.Text
  creator            User               @relation("TeamCreator", fields: [creatorId], references: [id])
  creatorId          String
  captain            User               @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId          String
  members            User[]             @relation("TeamMembers")
  tournaments        Tournament[]       @relation("TournamentTeams")
  matchesAsTeam1     Match[]            @relation("Team1Matches")
  matchesAsTeam2     Match[]            @relation("Team2Matches")
  matchEvents        MatchEvent[]
  chat               Chat?
  practices          TeamPractice[]
  applications       TeamApplication[]
  leagueTeams        LeagueTeam[]
  sponsorships       Sponsorship[]      @relation("SponsoredTeams")
  sponsorshipOffers  SponsorshipOffer[]
  homePlayground     Playground?        @relation("HomePlayground", fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?            @unique
  sponsors           Sponsor[]          @relation("SponsoredTeams")
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model TeamPractice {
  id           String      @id @default(cuid())
  team         Team        @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground? @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  createdAt    DateTime    @default(now())
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  message      String?               @db.Text
  status       TeamApplicationStatus @default(PENDING)
  createdAt    DateTime              @default(now())
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  game                  String
  description           String?                  @db.Text
  rules                 String?                  @db.Text
  format                TournamentFormat
  type                  TournamentType
  status                TournamentStatus
  prizePool             String?
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  bannerImage           String?
  bannerImageHint       String?
  organizer             User                     @relation("TournamentOrganizer", fields: [organizerId], references: [id])
  organizerId           String
  matches               Match[]
  teams                 Team[]                   @relation("TournamentTeams")
  judges                User[]                   @relation("JudgedTournaments")
  sponsors              Sponsor[]                @relation("SponsoredTournaments")
  medicalPartners       MedicalPartner[]
  applications          TeamApplication[]
  announcements         TournamentAnnouncement[]
  media                 TournamentMedia[]
  league                League?                  @relation(fields: [leagueId], references: [id])
  leagueId              String?                  @unique
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
}

model TournamentMedia {
  id          String     @id @default(cuid())
  type        MediaType
  src         String
  description String?
  hint        String?
  tournament  Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  createdAt   DateTime   @default(now())
}

model Match {
  id               String       @id @default(cuid())
  team1            Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id          String
  team2            Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id          String
  team1Score       Int?
  team2Score       Int?
  status           MatchStatus
  scheduledAt      DateTime
  finishedAt       DateTime?
  tournament       Tournament?  @relation(fields: [tournamentId], references: [id])
  tournamentId     String?
  playground       Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId     String?
  location         String?
  round            Int?
  refereeName      String?
  disputeReason    String?
  resolution       String?
  disputeOpenedAt  DateTime?
  notifications    Notification[]
  events           MatchEvent[]
  league           League?      @relation(fields: [leagueId], references: [id])
  leagueId         String?
}

model MatchEvent {
  id        String         @id @default(cuid())
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  team      Team           @relation(fields: [teamId], references: [id])
  teamId    String
  player    User           @relation("MatchEventPlayer", fields: [playerId], references: [id])
  playerId  String
  type      MatchEventType
  timestamp DateTime
  metadata  Json?
}

// Gamification and Monetization models
model Achievement {
  id                 String              @id @default(cuid())
  name               String              @unique
  description        String
  icon               String
  unlockedBy         UserAchievement[]
}

model UserAchievement {
  user          User       @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime   @default(now())
  @@id([userId, achievementId])
}

model Promotion {
  id              String   @id @default(cuid())
  name            String
  description     String   @db.Text
  prize           String
  cost            String
  imageDataUri    String
  imageHint       String
  organizer       User     @relation(fields: [organizerId], references: [id])
  organizerId     String
  sponsor         Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId       String?
  endDate         DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Sponsor {
  id           String        @id
  name         String
  logo         String?
  logoHint     String?
  description  String
  profileUrl   String
  interests    String[]
  promotions   Promotion[]
  teams        Team[]        @relation("SponsoredTeams")
  tournaments  Tournament[]  @relation("SponsoredTournaments")
  sponsorships Sponsorship[]
}

model Sponsorship {
  id        String   @id @default(cuid())
  team      Team     @relation("SponsoredTeams", fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId String
  amount    Int
  signedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SponsorshipOffer {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  sponsorId String
  offerText String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Playground related models
model Playground {
  id                   String               @id @default(cuid())
  name                 String
  address              String
  type                 String
  coverImage           String?
  coverImageHint       String?
  surface              String
  features             String[]
  rating               Float
  checkIns             Int
  status               PlaygroundStatus
  creator              User                 @relation(fields: [creatorId], references: [id])
  creatorId            String
  matches              Match[]
  activities           Activity[]
  reports              PlaygroundReport[]
  reviews              PlaygroundReview[]
  residentTeams        Team[]               @relation("HomePlayground")
  practices            TeamPractice[]
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  rating       Int
  comment      String     @db.Text
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model PlaygroundReport {
  id           String         @id @default(cuid())
  playground   Playground     @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User           @relation("PlaygroundReportsSent", fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String // "low", "medium", "high"
  status       ReportStatus
  createdAt    DateTime       @default(now())
}

// Training related models
model Exercise {
  id              String             @id @default(cuid())
  name            String             @unique
  description     String             @db.Text
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json
  commonMistakes  Json
  alternatives    Json
  loggedExercises LoggedExercise[]
}

model TrainingProgram {
  id              String                @id
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean
  weeklySplit     WorkoutDay[]
  assignedTo      UserTrainingProgram[]
  proposals       TrainingProposal[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  day               Int
  title             String
  exercises         WorkoutExercise[]
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
  trainingProgramId String
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
  workoutDayId            String
}

model UserTrainingProgram {
  user        User            @relation(fields: [userId], references: [id])
  userId      String
  program     TrainingProgram @relation(fields: [programId], references: [id])
  programId   String
  assignedAt  DateTime        @default(now())
  isActive    Boolean         @default(true)
  @@id([userId, programId])
}

model TrainingLog {
  id          String           @id @default(cuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  workoutName String?
  status      TrainingLogStatus
  exercises   LoggedExercise[]
  mood        Mood?
  notes       String?          @db.Text
  coachNotes  String?          @db.Text
}

model LoggedExercise {
  id                     String        @id @default(cuid())
  trainingLog            TrainingLog   @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
  trainingLogId          String
  exercise               Exercise      @relation(fields: [exerciseId], references: [id])
  exerciseId             String
  notes                  String?
  isSupersetWithPrevious Boolean?
  sets                   LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean
}

model Measurement {
  id      String    @id @default(cuid())
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

// Social and Communication Models
model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("ReportsSent", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  reportedUserId String
  category       String
  description    String?      @db.Text
  status         ReportStatus @default(PENDING)
  resolver       User?        @relation("ReportsResolved", fields: [resolverId], references: [id])
  resolverId     String?
  resolvedAt     DateTime?
  resolution     String?
  createdAt      DateTime     @default(now())
}

model TrainingProposal {
  id         String                 @id @default(cuid())
  from       User                   @relation("ProposalsSent", fields: [fromId], references: [id])
  fromId     String
  to         User                   @relation("ProposalsReceived", fields: [toId], references: [id])
  toId       String
  sport      String
  date       DateTime
  status     TrainingProposalStatus @default(PENDING)
  program    TrainingProgram?       @relation(fields: [programId], references: [id])
  programId  String?
  comment    String?
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  isActive  Boolean      @default(true)
  author    User?        @relation(fields: [authorId], references: [id])
  authorId  String?
  options   PollOption[]
  votes     PollVote[]
  createdAt DateTime     @default(now())
}

model PollOption {
  id        String     @id @default(cuid())
  text      String
  poll      Poll       @relation(fields: [pollId], references: [id])
  pollId    String
  votes     PollVote[]
}

model PollVote {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())
  @@id([userId, pollId])
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  subject      String
  message      String     @db.Text
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sentTo       Int
  createdAt    DateTime   @default(now())
  notifications Notification[]
}

model Notification {
  id             String                  @id @default(cuid())
  user           User                    @relation(fields: [userId], references: [id])
  userId         String
  type           NotificationType
  message        String
  href           String?
  isRead         Boolean                 @default(false)
  createdAt      DateTime                @default(now())
  match          Match?                  @relation(fields: [matchId], references: [id])
  matchId        String?
  announcement   TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
  announcementId String?
}

// Utility and other models
model Activity {
  id           String          @id @default(cuid())
  type         ActivityType
  user         User            @relation(fields: [userId], references: [id])
  userId       String
  metadata     Json
  playground   Playground?     @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  createdAt    DateTime        @default(now())
}

model LfgLobby {
  id           String         @id @default(cuid())
  type         LfgLobbyType
  sport        String
  location     String
  playgroundId String?
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  comment      String
  creator      User           @relation(fields: [creatorId], references: [id])
  creatorId    String
  players      User[]
  status       LfgLobbyStatus @default(OPEN)
}

model InventoryItem {
  id             String   @id @default(cuid())
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime @default(now())
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String
  createdAt  DateTime @default(now())
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
  tournaments Tournament[]
}

model LeagueTeam {
  league    League   @relation(fields: [leagueId], references: [id])
  leagueId  String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  played    Int      @default(0)
  wins      Int      @default(0)
  draws     Int      @default(0)
  losses    Int      @default(0)
  points    Int      @default(0)
  @@id([leagueId, teamId])
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}

model Sport {
  id       String    @id @unique
  name     String
  icon     String
  category String
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]    @relation("ChatParticipants")
  messages     Message[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  createdAt DateTime @default(now())
}
