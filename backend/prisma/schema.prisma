// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    String    @default("Игрок")
  status                  String    @default("Активен")
  xp                      Int       @default(0)
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  
  createdTeams            Team[]     @relation("CreatedTeams")
  captainedTeams          Team[]     @relation("CaptainedTeams")
  teamsAsMember           Team[]     @relation("TeamMembers")
  organizedTournaments    Tournament[] @relation("OrganizedTournaments")
  judgedMatches           Tournament[] @relation("TournamentJudges")
  coaching                User[]     @relation("CoachToPlayer")
  coach                   User?      @relation("CoachToPlayer", fields: [coachId], references: [id])
  coachId                 String?
  
  friends                 User[]     @relation("Friends")
  friendOf                User[]     @relation("Friends")
  sentFriendRequests      FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[] @relation("ReceivedFriendRequests")

  inventoryItems          InventoryItem[]
  trainingLogs            TrainingLog[]
  measurements            Measurement[]
  sentTrainingProposals   TrainingProposal[] @relation("SentTrainingProposals")
  receivedTrainingProposals TrainingProposal[] @relation("ReceivedTrainingProposals")
  
  foodLogEntries          FoodLogEntry[]
  
  playgrounds             Playground[]
  playgroundReviews       PlaygroundReview[]
  playgroundReports       PlaygroundReport[] @relation("ReportedBy")
  
  chatParticipants        Chat[]     @relation("ChatParticipants")
  messages                Message[]
  
  sentReports             Report[]   @relation("SentReports")
  receivedReports         Report[]   @relation("ReceivedReports")
  resolvedReports         Report[]   @relation("ResolvedBy")
  
  notifications           Notification[]
  
  organizedPromotions     Promotion[]
  
  pollVotes               PollVote[]

  createdTournamentsAsOrganizer Tournament[] @relation("CreatedTournamentsAsOrganizer")
  
  sentAnnouncements       TournamentAnnouncement[]
  
  medicalPartner          MedicalPartner[]
  
  teamApplications        TeamApplication[]

  activities              Activity[]
}

model Team {
  id                 String  @id @default(cuid())
  name               String
  slug               String  @unique
  motto              String?
  logo               String?
  dataAiHint         String?
  game               String
  rank               Int     @default(5)
  wins               Int     @default(0)
  losses             Int     @default(0)
  draws              Int     @default(0)
  seekingSponsorship Boolean @default(false)
  goals              String? @db.Text

  creator   User   @relation("CreatedTeams", fields: [creatorId], references: [id])
  creatorId String

  captain   User   @relation("CaptainedTeams", fields: [captainId], references: [id])
  captainId String

  members          User[]          @relation("TeamMembers")
  tournaments      Tournament[]    @relation("TeamTournaments")
  sponsors         Sponsor[]       @relation("TeamSponsors")
  matchesAsTeam1   Match[]         @relation("Team1Matches")
  matchesAsTeam2   Match[]         @relation("Team2Matches")
  applications     TeamApplication[]
  teamPractices    TeamPractice[]
  homePlayground   Playground?     @relation("HomeTeams", fields: [homePlaygroundId], references: [id])
  homePlaygroundId String?

  chat             Chat?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Match {
  id              String   @id @default(cuid())
  team1           Team     @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team     @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  location        String?
  refereeName     String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  
  tournament      Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId    String?

  league          League?     @relation(fields: [leagueId], references: [id])
  leagueId        String?
  
  playground      Playground? @relation(fields: [playgroundId], references: [id])
  playgroundId    String?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Tournament {
  id                      String   @id @default(cuid())
  name                    String
  slug                    String   @unique
  game                    String
  description             String?  @db.Text
  type                    String
  format                  String
  category                String
  location                String
  participantCount        Int
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  prizePool               String?
  rules                   String?  @db.Text
  bannerImage             String?
  bannerImageHint         String?
  status                  String
  
  organizer               User        @relation("OrganizedTournaments", fields: [organizerId], references: [id])
  organizerId             String
  
  creator                 User        @relation("CreatedTournamentsAsOrganizer", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId               String
  
  teams                   Team[]      @relation("TeamTournaments")
  matches                 Match[]
  judges                  User[]      @relation("TournamentJudges")
  sponsors                Sponsor[]   @relation("TournamentSponsors")
  medicalPartners         MedicalPartner[]
  
  applications            TeamApplication[]
  announcements           TournamentAnnouncement[]
  
  media                   TournamentMedia[]

  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model TournamentMedia {
  id          String     @id @default(cuid())
  type        String     // IMAGE, VIDEO, AUDIO
  src         String
  description String?
  hint        String?
  tournament  Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId String
  createdAt   DateTime   @default(now())
}

model TeamApplication {
  id           String @id @default(cuid())
  team         Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId       String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  
  tournament   Tournament? @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId String?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@unique([teamId, userId, tournamentId])
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())

  @@unique([fromId, toId])
}

model Chat {
  id           String   @id
  type         String // PRIVATE or GROUP
  name         String?
  participants User[]   @relation("ChatParticipants")
  messages     Message[]
  
  // For one-to-one mapping with Team for group chats
  team         Team?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  text      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  createdAt DateTime @default(now())
}


model Challenge {
  id            String          @id @default(cuid())
  title         String
  description   String
  discipline    Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId  String
  wager         Int             @default(0)
  status        ChallengeStatus @default(OPEN)
  result        String?
  
  creator       User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId     String
  
  opponent      User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  opponentId    String?

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Sport {
  id        String      @id
  name      String      @unique
  icon      String
  category  String      // Командный, Некомандный, Киберспорт
  
  challenges Challenge[]
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Playground {
  id              String      @id @default(cuid())
  name            String
  address         String
  type            String      // e.g., Футбол, Баскетбол
  coverImage      String?
  coverImageHint  String?
  surface         String
  features        String[]
  rating          Float       @default(0)
  checkIns        Int         @default(0)
  
  status          PlaygroundStatus @default(PENDING_MODERATION)
  
  creator         User        @relation(fields: [creatorId], references: [id])
  creatorId       String
  
  homeTeams       Team[]      @relation("HomeTeams")
  matches         Match[]
  practices       TeamPractice[]
  reviews         PlaygroundReview[]
  reports         PlaygroundReport[]
  lobbies         LfgLobby[]

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
  REJECTED
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String     @db.Text
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id            String       @id @default(cuid())
  playground    Playground   @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  playgroundId  String
  reporter      User         @relation("ReportedBy", fields: [reporterId], references: [id])
  reporterId    String
  category      String
  comment       String       @db.Text
  status        ReportStatus @default(PENDING) // Reuse status from user reports
  severity      String?      // low, medium, high
  summary       String?
  
  createdAt     DateTime     @default(now())
}


model CoachProfile {
  id             String @id @default(cuid())
  user           User   @relation(fields: [userId], references: [id])
  userId         String @unique
  specialization String
  description    String @db.Text
  tags           String[]
  rating         Float  @default(0)
  price          Decimal @default(0)
  reviewCount    Int    @default(0)
}

model Sponsor {
  id           String       @id @default(cuid())
  name         String
  logo         String?
  logoHint     String?
  description  String
  profileUrl   String
  interests    String[]
  
  tournaments  Tournament[] @relation("TournamentSponsors")
  teams        Team[]       @relation("TeamSponsors")
  promotions   Promotion[]
}

model Notification {
  id       String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  type     String
  message  String
  href     String?
  isRead   Boolean  @default(false)
  createdAt DateTime @default(now())
}

model StoreItem {
    id          String   @id @default(cuid())
    name        String
    description String
    price       Float
    image       String?
    imageHint   String?
    category    String
    isRealMoney Boolean  @default(false)
}

model InventoryItem {
    id             String   @id @default(cuid())
    user           User     @relation(fields: [userId], references: [id])
    userId         String
    name           String
    category       String
    type           String
    purchaseDate   DateTime
    lifespanMonths Int
    image          String?
    imageHint      String?
    
    createdAt DateTime @default(now())
}

model Exercise {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String           @db.Text
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json
  commonMistakes  Json
  alternatives    Json
  
  loggedExercises LoggedExercise[]
}

model TrainingProgram {
    id              String        @id
    name            String
    description     String
    goal            String
    daysPerWeek     Int
    splitType       String
    author          String
    coverImage      String
    coverImageHint  String
    isAiGenerated   Boolean       @default(false)
    weeklySplit     WorkoutDay[]
    
    assignedTo      User[]
    trainingLogs    TrainingLog[]
}

model WorkoutDay {
    id              String              @id @default(cuid())
    program         TrainingProgram     @relation(fields: [programId], references: [id])
    programId       String
    day             Int
    title           String
    exercises       ExerciseDetail[]
}

model ExerciseDetail {
    id                       String     @id @default(cuid())
    day                      WorkoutDay @relation(fields: [dayId], references: [id])
    dayId                    String
    name                     String
    sets                     String
    reps                     String
    plannedWeight            String?
    isSupersetWithPrevious   Boolean?   @default(false)
    technique                String?
}

model TrainingLog {
  id            String           @id @default(cuid())
  user          User             @relation(fields: [userId], references: [id])
  userId        String
  program       TrainingProgram? @relation(fields: [programId], references: [id])
  programId     String?
  date          DateTime
  workoutName   String
  status        String           // planned, completed, skipped
  mood          String?          // great, good, ok, bad
  notes         String?
  coachNotes    String?
  
  exercises     LoggedExercise[]
}

model LoggedExercise {
    id             String         @id @default(cuid())
    trainingLog    TrainingLog    @relation(fields: [trainingLogId], references: [id])
    trainingLogId  String
    exercise       Exercise       @relation(fields: [exerciseId], references: [id])
    exerciseId     String
    notes          String?
    sets           LoggedSet[]
}

model LoggedSet {
    id               String         @id @default(cuid())
    loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
    loggedExerciseId String
    plannedReps      String
    plannedWeight    String?
    loggedReps       Int?
    loggedWeight     Int?
    rpe              Int?
    isCompleted      Boolean        @default(false)
}

model Promotion {
  id             String   @id @default(cuid())
  name           String
  description    String
  prize          String
  cost           String
  imageDataUri   String   @db.Text
  imageHint      String
  endDate        DateTime
  
  organizer      User     @relation(fields: [organizerId], references: [id])
  organizerId    String
  
  sponsor        Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId      String?
  
  createdAt      DateTime @default(now())
}

model League {
    id          String        @id @default(cuid())
    name        String
    description String
    game        String
    image       String?
    imageHint   String?
    
    teams       LeagueTeam[]
    matches     Match[]
}

model LeagueTeam {
    id       String @id @default(cuid())
    league   League @relation(fields: [leagueId], references: [id])
    leagueId String
    team     Team   @relation(fields: [teamId], references: [id])
    teamId   String
    played   Int    @default(0)
    wins     Int    @default(0)
    losses   Int    @default(0)
    draws    Int    @default(0)
    points   Int    @default(0)
    
    @@unique([leagueId, teamId])
}

model LfgLobby {
    id            String   @id @default(cuid())
    type          LfgLobbyType
    sport         String
    location      String
    startTime     DateTime
    endTime       DateTime
    playersNeeded Int
    comment       String
    
    creator       User     @relation(fields: [creatorId], references: [id])
    creatorId     String
    
    players       User[]
    
    playground    Playground? @relation(fields: [playgroundId], references: [id])
    playgroundId  String?
}

enum LfgLobbyType {
    GAME
    TRAINING
}

model Measurement {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    date      DateTime
    weight    Float
    bodyFat   Float?
    chest     Float?
    waist     Float?
    hips      Float?
    biceps    Float?
    thigh     Float?
}

model TrainingProposal {
    id        String       @id @default(cuid())
    from      User         @relation("SentTrainingProposals", fields: [fromId], references: [id])
    fromId    String
    to        User         @relation("ReceivedTrainingProposals", fields: [toId], references: [id])
    toId      String
    sport     String
    date      DateTime
    comment   String?
    status    String       @default("PENDING") // PENDING, ACCEPTED, DECLINED
    
    program   TrainingProgram? @relation(fields: [programId], references: [id])
    programId String?

    createdAt DateTime     @default(now())
}

model FoodItem {
    id          String   @id @default(cuid())
    name        String   @unique
    category    String
    image       String?
    imageHint   String?
    calories    Float
    protein     Float
    fat         Float
    carbs       Float
    description String?
    
    logEntries FoodLogEntry[]
}

model FoodLogEntry {
    id          String   @id @default(cuid())
    user        User     @relation(fields: [userId], references: [id])
    userId      String
    foodItem    FoodItem @relation(fields: [foodItemId], references: [id])
    foodItemId  String
    grams       Int
    meal        String
    createdAt   DateTime @default(now())
}

model FaqItem {
    id        String   @id @default(cuid())
    category  String
    question  String
    answer    String
    createdAt DateTime @default(now())
}

model Poll {
    id        String        @id @default(cuid())
    title     String
    question  String
    isActive  Boolean       @default(true)
    options   PollOption[]
    votes     PollVote[]
    createdAt DateTime      @default(now())
}

model PollOption {
    id        String     @id @default(cuid())
    poll      Poll       @relation(fields: [pollId], references: [id])
    pollId    String
    text      String
    votes     PollVote[]
}

model PollVote {
    id           String     @id @default(cuid())
    user         User       @relation(fields: [userId], references: [id])
    userId       String
    poll         Poll       @relation(fields: [pollId], references: [id])
    pollId       String
    pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
    pollOptionId String

    @@unique([userId, pollId])
}

model TournamentAnnouncement {
    id            String     @id @default(cuid())
    tournament    Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
    tournamentId  String
    sender        User       @relation(fields: [senderId], references: [id])
    senderId      String
    subject       String
    message       String     @db.Text
    sentTo        Int        @default(0)
    createdAt     DateTime   @default(now())
}

model MedicalPartner {
    id             String @id @default(cuid())
    name           String
    specialization String
    contact        String
    avatar         String?
    avatarHint     String?
    
    tournaments    Tournament[]
}

model Report {
    id          String       @id @default(cuid())
    reporter    User         @relation("SentReports", fields: [reporterId], references: [id])
    reporterId  String
    reportedUser User        @relation("ReceivedReports", fields: [reportedUserId], references: [id])
    reportedUserId String
    reason      String
    context     String       @db.Text
    status      ReportStatus @default(PENDING)
    
    resolver    User?        @relation("ResolvedBy", fields: [resolverId], references: [id])
    resolverId  String?
    resolution  String?      @db.Text
    resolvedAt  DateTime?

    createdAt   DateTime     @default(now())
}

enum ReportStatus {
    PENDING
    RESOLVED
    DISMISSED
}

model Activity {
    id           String       @id @default(cuid())
    type         ActivityType
    user         User         @relation(fields: [userId], references: [id])
    userId       String
    metadata     Json
    timestamp    DateTime     @default(now())

    playground   Playground? @relation(fields: [playgroundId], references: [id])
    playgroundId String?
}

enum ActivityType {
    STATUS_POSTED
    MATCH_PLAYED
    TEAM_JOINED
    TOURNAMENT_REGISTERED
    ACHIEVEMENT_UNLOCKED
    PLAYGROUND_CHECK_IN
}

// User-defined relations for Prisma
relation CreatedChallenges on User {
  fields: [id]
  references: [creatorId]
}

relation AcceptedChallenges on User {
  fields: [id]
  references: [opponentId]
}
