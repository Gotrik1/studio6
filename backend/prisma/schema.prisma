// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String @id @default(cuid())
  email        String @unique
  name         String
  passwordHash String
  role         String
  xp           Int    @default(0)
  status       String

  // Optional fields for profile completeness
  avatar            String?
  dateOfBirth       DateTime?
  location          String?
  mainSport         String?
  preferredSports   String[]  @default([])
  telegram          String?
  discord           String?

  captainOf Team?  @relation("Captain")
  teams     Team[] @relation("TeamMembers")

  createdTeams       Team[]       @relation("Creator")
  createdChallenges  Challenge[]  @relation("Creator")
  acceptedChallenges Challenge[]  @relation("Opponent")
  createdPlaygrounds Playground[]

  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")

  friends  User[] @relation("Friends")
  friendOf User[] @relation("Friends")
  
  activities Activity[]

  messages Message[]

  notifications Notification[]
}

model Team {
  id        String  @id @default(cuid())
  name      String  @unique
  slug      String  @unique
  motto     String?
  game      String
  logo      String?
  dataAiHint String?
  rank      Int     @default(0)
  wins      Int     @default(0)
  losses    Int     @default(0)
  draws     Int     @default(0)

  captainId String
  captain   User   @relation("Captain", fields: [captainId], references: [id])

  members User[] @relation("TeamMembers")

  tournaments Tournament[] @relation("TeamInTournament")
  matchesAsTeam1 Match[] @relation("Team1")
  matchesAsTeam2 Match[] @relation("Team2")

  homePlaygroundId String?
  
  creatorId String?
  creator   User?   @relation("Creator", fields: [creatorId], references: [id])
}

model Tournament {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  game      String
  status    String // REGISTRATION, ONGOING, FINISHED
  type      String // team, individual
  format    String // single_elimination, round_robin, groups
  category  String // e.g., open, male, female
  location  String // e.g., online, city, international
  participantCount Int
  prizePool String?
  rules     String?
  
  bannerImage     String?
  bannerImageHint String?
  
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime

  organizerId String
  organizer   User   @relation(fields: [organizerId], references: [id])
  
  teams   Team[]   @relation("TeamInTournament")
  matches Match[]
}

model Match {
  id           String      @id @default(cuid())
  team1Id      String
  team2Id      String
  team1Score   Int?
  team2Score   Int?
  status       MatchStatus
  scheduledAt  DateTime
  finishedAt   DateTime?
  location     String?
  refereeName  String?
  
  tournamentId String?
  tournament   Tournament?  @relation(fields: [tournamentId], references: [id])
  
  team1 Team @relation("Team1", fields: [team1Id], references: [id])
  team2 Team @relation("Team2", fields: [team2Id], references: [id])
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Challenge {
  id          String          @id @default(cuid())
  title       String
  description String
  discipline  String
  wager       Int
  status      ChallengeStatus
  result      String?
  
  creatorId String
  creator   User   @relation("Creator", fields: [creatorId], references: [id])
  
  opponentId String?
  opponent   User?   @relation("Opponent", fields: [opponentId], references: [id])

  createdAt DateTime @default(now())
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Playground {
  id              String  @id @default(cuid())
  name            String
  address         String
  type            String
  surface         String
  features        String[]
  coverImage      String?
  coverImageHint  String?
  rating          Float
  checkIns        Int
  
  status          String // PENDING_MODERATION, APPROVED, REJECTED
  
  creatorId       String
  creator         User    @relation(fields: [creatorId], references: [id])
}

model FriendRequest {
  id        String   @id @default(cuid())
  fromId    String
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())

  from User @relation("SentFriendRequests", fields: [fromId], references: [id])
  to   User @relation("ReceivedFriendRequests", fields: [toId], references: [id])

  @@unique([fromId, toId])
}

model Activity {
  id        String    @id @default(cuid())
  type      ActivityType
  timestamp DateTime  @default(now())
  metadata  Json
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

enum ActivityType {
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
}

model Message {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  
  chatId String // Can be a teamId or a compound ID for user-to-user chat
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  href      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  
  // To categorize notifications
  type String @default("FRIEND_REQUEST")
}
