// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String        @id @default(cuid())
  email                String        @unique
  passwordHash         String
  name                 String
  role                 String        @default("Игрок")
  avatar               String?
  bannerImage          String?
  bannerImageHint      String?
  status               String        @default("Активен")
  xp                   Int           @default(0)
  location             String?
  mainSport            String?
  dateOfBirth          String?
  preferredSports      String[]
  telegram             String?
  discord              String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  teamsAsCreator       Team[]        @relation("CreatedTeams")
  teamsAsCaptain       Team[]        @relation("CaptainOfTeam")
  teamsAsMember        Team[]        @relation("TeamMembers")
  organizedTournaments Tournament[]
  createdPlaygrounds   Playground[]
  createdChallenges    Challenge[]   @relation("CreatedChallenges")
  acceptedChallenges   Challenge[]   @relation("AcceptedChallenges")
  friends              User[]        @relation("Friends")
  friendOf             User[]        @relation("Friends")
  sentFriendRequests   FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
  notifications        Notification[]
  activities           Activity[]
  coachProfile         CoachProfile?
  gallery              GalleryItem[]
  careerHistory        CareerHistoryItem[]
}

model Team {
  id                 String       @id @default(cuid())
  name               String       @unique
  slug               String       @unique
  logo               String?
  dataAiHint         String?
  motto              String?
  game               String
  rank               Int          @default(5)
  wins               Int          @default(0)
  losses             Int          @default(0)
  draws              Int          @default(0)
  seekingSponsorship Boolean      @default(false)
  homePlaygroundId   String?
  creatorId          String
  captainId          String       @unique
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  creator            User         @relation("CreatedTeams", fields: [creatorId], references: [id])
  captain            User         @relation("CaptainOfTeam", fields: [captainId], references: [id])
  members            User[]       @relation("TeamMembers")
  tournaments        Tournament[]
  sponsors           Sponsor[]
  team1Matches       Match[]      @relation("Team1Matches")
  team2Matches       Match[]      @relation("Team2Matches")
  leagueTeams        LeagueTeam[]
}

model Match {
  id            String      @id @default(cuid())
  team1Id       String
  team2Id       String
  team1Score    Int?
  team2Score    Int?
  status        MatchStatus @default(PLANNED)
  scheduledAt   DateTime
  finishedAt    DateTime?
  tournamentId  String?
  location      String?
  refereeName   String?
  team1         Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team2         Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  tournament    Tournament? @relation(fields: [tournamentId], references: [id])
  leagueId      String?
  league        League?     @relation("LeagueMatches", fields: [leagueId], references: [id])
}

model Tournament {
  id                    String   @id @default(cuid())
  name                  String
  slug                  String   @unique
  game                  String
  description           String?
  type                  String   @default("team")
  format                String   @default("single_elimination")
  category              String?
  location              String?
  participantCount      Int      @default(16)
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  prizePool             String?
  rules                 String?
  status                String   @default("REGISTRATION")
  bannerImage           String?
  bannerImageHint       String?
  organizerId           String
  organizer             User     @relation(fields: [organizerId], references: [id])
  teams                 Team[]
  matches               Match[]
}

model Challenge {
  id          String          @id @default(cuid())
  title       String
  description String
  discipline  String
  wager       Int             @default(0)
  status      ChallengeStatus @default(OPEN)
  result      String?
  creatorId   String
  opponentId  String?
  creator     User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  opponent    User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Playground {
  id             String   @id @default(cuid())
  name           String
  address        String
  type           String
  surface        String
  features       String[]
  coverImage     String?
  coverImageHint String?
  rating         Float
  checkIns       Int
  status         String   @default("PENDING_MODERATION")
  creatorId      String
  creator        User     @relation(fields: [creatorId], references: [id])
}

model FriendRequest {
  id        String   @id @default(cuid())
  fromId    String
  toId      String
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])

  @@unique([fromId, toId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String
  message   String
  href      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Activity {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      ActivityType
  metadata  Json
  timestamp DateTime @default(now())
}

model CoachProfile {
  id             String @id @default(cuid())
  userId         String @unique
  user           User   @relation(fields: [userId], references: [id])
  specialization String
  description    String
  tags           String[]
  rating         Float
  price          Decimal @db.Decimal(9, 2)
}

model Sponsor {
  id          String      @id @default(cuid())
  name        String      @unique
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  teams       Team[]
  promotions  Promotion[]
}

model Promotion {
  id          String   @id @default(cuid())
  name        String
  description String
  prize       String
  cost        String
  imageDataUri String
  imageHint   String
  endDate     DateTime
  organizerId String
  organizer   User     @relation(fields: [organizerId], references: [id])
  sponsorId   String?
  sponsor     Sponsor? @relation(fields: [sponsorId], references: [id])
  createdAt   DateTime @default(now())
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String  @unique
  description String
  price       Decimal @db.Decimal(9, 2)
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)
}

model Exercise {
  id             String   @id @default(cuid())
  name           String   @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  techniqueTips  String[]
  commonMistakes String[]
  alternatives   String[]
}

model LfgLobby {
    id            String    @id @default(cuid())
    type          String    // GAME or TRAINING
    sport         String
    location      String
    playgroundId  String?
    startTime     DateTime
    endTime       DateTime
    playersNeeded Int
    playersJoined Int
    comment       String
    creatorId     String
    creator       User      @relation(fields: [creatorId], references: [id])
}

model FaqItem {
    id        String @id @default(cuid())
    question  String
    answer    String
    category  String
}

model Message {
    id        String @id @default(cuid())
    text      String
    chatId    String // e.g. "team-1" or "user1-user2"
    authorId  String
    author    User @relation(fields: [authorId], references: [id])
    createdAt DateTime @default(now())
}

model GalleryItem {
  id        String   @id @default(cuid())
  src       String
  alt       String
  dataAiHint String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model CareerHistoryItem {
  id        String   @id @default(cuid())
  teamName  String
  period    String
  role      String
  review    String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model League {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]      @relation("LeagueMatches")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model LeagueTeam {
  id        String  @id @default(cuid())
  leagueId  String
  teamId    String
  played    Int     @default(0)
  wins      Int     @default(0)
  draws     Int     @default(0)
  losses    Int     @default(0)
  points    Int     @default(0)

  league    League  @relation(fields: [leagueId], references: [id])
  team      Team    @relation(fields: [teamId], references: [id])

  @@unique([leagueId, teamId])
}


enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum ActivityType {
  MATCH_PLAYED
  ACHIEVEMENT_UNLOCKED
  TRAINING_COMPLETED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
}
