datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums for roles and statuses for better data integrity
enum Role {
  ИГРОК
  КАПИТАН
  ТРЕНЕР
  ОРГАНИЗАТОР
  СУДЬЯ
  МЕНЕДЖЕР
  СПОНСОР
  БОЛЕЛЬЩИК
  МОДЕРАТОР
  АДМИНИСТРАТОР
}

enum UserStatus {
  АКТИВЕН
  ЗАБАНЕН
  ОЖИДАЕТ_ПОДТВЕРЖДЕНИЯ
}


model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    Role                   @default(ИГРОК)
  status                  UserStatus             @default(АКТИВЕН)
  xp                      Int                    @default(0)
  location                String?
  mainSport               String?
  isVerified              Boolean                @default(false)
  dateOfBirth             DateTime?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt

  teamsAsCaptain          Team[]                 @relation("Captain")
  teamsAsMember           Team[]                 @relation("Members")
  createdTeams            Team[]                 @relation("Creator")
  organizedTournaments    Tournament[]
  judgedMatches           Match[]                @relation("Referee")
  organizedPromotions     Promotion[]
  createdPlaygrounds      Playground[]
  reviews                 PlaygroundReview[]
  activities              Activity[]
  
  coaching                User[]                 @relation("CoachToPlayer")
  coach                   User?                  @relation("CoachToPlayer", fields: [coachId], references: [id])
  coachId                 String?

  sentFriendRequests      FriendRequest[]        @relation("SentRequests")
  receivedFriendRequests  FriendRequest[]        @relation("ReceivedRequests")
  friends                 User[]                 @relation("Friends")
  friendsOf               User[]                 @relation("Friends")

  messages                Message[]
  createdLobbies          LfgLobby[]             @relation("createdLobbies")
  joinedLobbies           LfgLobby[]             @relation("LobbyPlayers")
  inventory               InventoryItem[]
  measurements            Measurement[]
  sentTrainingProposals   TrainingProposal[]     @relation("FromUser")
  receivedTrainingProposals TrainingProposal[]   @relation("ToUser")
  pollVotes               PollVote[]
  reportsSent             Report[]               @relation("Reporter")
  reportsReceived         Report[]               @relation("Reported")
  announcementsSent       TournamentAnnouncement[]
  coachProfile            CoachProfile?
  trainingLogs            TrainingLog[]
}

model Team {
  id                 String               @id @default(cuid())
  name               String
  slug               String               @unique
  game               String
  motto              String?
  description        String?
  logo               String?
  dataAiHint         String?
  rank               Int                  @default(1)
  wins               Int                  @default(0)
  losses             Int                  @default(0)
  draws              Int                  @default(0)
  seekingSponsorship Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  
  captain            User                 @relation("Captain", fields: [captainId], references: [id])
  captainId          String
  members            User[]               @relation("Members")
  creator            User                 @relation("Creator", fields: [creatorId], references: [id])
  creatorId          String
  
  tournaments        Tournament[]
  matchesAsTeam1     Match[]              @relation("Team1")
  matchesAsTeam2     Match[]              @relation("Team2")
  applications       TeamApplication[]
  sponsors           Sponsor[]
  homePlayground     Playground?          @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?
  practices          TeamPractice[]
  chat               Chat?                @relation(fields: [chatId], references: [id])
  chatId             String?              @unique
}

model Match {
  id             String      @id @default(cuid())
  team1          Team        @relation("Team1", fields: [team1Id], references: [id])
  team1Id        String
  team2          Team        @relation("Team2", fields: [team2Id], references: [id])
  team2Id        String
  team1Score     Int?
  team2Score     Int?
  status         MatchStatus @default(PLANNED)
  scheduledAt    DateTime
  finishedAt     DateTime?
  disputeReason  String?
  disputeOpenedAt DateTime?
  resolution     String?
  
  tournament     Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId   String?
  league         League?     @relation(fields: [leagueId], references: [id])
  leagueId       String?
  playground     Playground? @relation(fields: [playgroundId], references: [id])
  playgroundId   String?
  location       String?
  
  referee        User?       @relation("Referee", fields: [refereeId], references: [id])
  refereeId      String?
  refereeName    String?
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  description             String?
  game                    String
  type                    String                   // "team" or "individual"
  format                  String                   // "single_elimination", etc.
  category                String
  location                String
  participantCount        Int
  prizePool               String?
  rules                   String?
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  status                  String                   // "REGISTRATION", "ONGOING", "FINISHED"
  bannerImage             String?
  bannerImageHint         String?
  
  organizer               User                     @relation(fields: [organizerId], references: [id])
  organizerId             String
  
  teams                   Team[]
  matches                 Match[]
  applications            TeamApplication[]
  judges                  User[]
  sponsors                Sponsor[]
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  media                   TournamentMedia[]
}

model Playground {
  id                 String               @id @default(cuid())
  name               String
  address            String
  type               String
  surface            String
  features           String[]
  coverImage         String?
  coverImageHint     String?
  rating             Float                @default(0)
  checkIns           Int                  @default(0)
  status             PlaygroundStatus     @default(PENDING_MODERATION)
  
  creator            User                 @relation(fields: [creatorId], references: [id])
  creatorId          String
  reviews            PlaygroundReview[]
  matches            Match[]
  reports            PlaygroundReport[]
  activities         Activity[]
  homeForTeams       Team[]
  lobbies            LfgLobby[]
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

model PlaygroundReview {
    id           String     @id @default(cuid())
    playground   Playground @relation(fields: [playgroundId], references: [id])
    playgroundId String
    author       User       @relation(fields: [authorId], references: [id])
    authorId     String
    rating       Int
    comment      String
    createdAt    DateTime   @default(now())
}

model TeamApplication {
  id             String                @id @default(cuid())
  team           Team                  @relation(fields: [teamId], references: [id])
  teamId         String
  user           User                  @relation(fields: [userId], references: [id])
  userId         String
  status         TeamApplicationStatus @default(PENDING)
  message        String?
  tournament     Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId   String?
  createdAt      DateTime              @default(now())
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

model Activity {
  id           String       @id @default(cuid())
  type         ActivityType
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  metadata     Json
  timestamp    DateTime     @default(now())
  
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId String?
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  ACHIEVEMENT_UNLOCKED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  PLAYGROUND_CHECK_IN
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  rating         Float    @default(5.0)
  price          Decimal  @default(0)
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model Sponsor {
  id          String       @id @default(cuid())
  name        String
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  tournaments Tournament[]
  teams       Team[]
  promotions  Promotion[]  @relation("SponsorPromotions")
}

model Promotion {
  id            String    @id @default(cuid())
  name          String
  description   String
  prize         String
  imageDataUri  String
  imageHint     String
  endDate       DateTime
  cost          String
  organizer     User      @relation(fields: [organizerId], references: [id])
  organizerId   String
  sponsor       Sponsor?  @relation("SponsorPromotions", fields: [sponsorId], references: [id])
  sponsorId     String?
  createdAt     DateTime  @default(now())
}

model Chat {
  id           String    @id @default(cuid())
  type         ChatType
  name         String? // for group chats
  participants User[]
  messages     Message[]
  team         Team?
  createdAt    DateTime  @default(now())
}

enum ChatType {
  DIRECT
  GROUP
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  text      String
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String   // FRIEND_REQUEST, MATCH_RESULT, ANNOUNCEMENT
  message   String
  href      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model StoreItem {
    id          String   @id @default(cuid())
    name        String
    description String
    price       Float
    image       String?
    imageHint   String?
    category    String
    isRealMoney Boolean  @default(false)
}

model TrainingProgram {
  id             String         @id @default(cuid())
  name           String
  description    String
  goal           String
  daysPerWeek    Int
  splitType      String
  author         String
  coverImage     String
  coverImageHint String
  isAiGenerated  Boolean        @default(false)
  weeklySplit    WorkoutDay[]
  proposals      TrainingProposal[]
}

model WorkoutDay {
  id              String             @id @default(cuid())
  program         TrainingProgram    @relation(fields: [programId], references: [id])
  programId       String
  day             Int
  title           String
  exercises       ExerciseDetail[]
}

model ExerciseDetail {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?    @default(false)
  technique               String?
}

model Exercise {
  id              String              @id @default(cuid())
  name            String              @unique
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   String[]
  commonMistakes  String[]
  alternatives    String[]
  loggedExercises LoggedExercise[]
}

model TrainingLog {
  id           String           @id @default(cuid())
  user         User             @relation(fields: [userId], references: [id])
  userId       String
  date         DateTime
  workoutName  String
  status       String // planned, completed, skipped
  mood         String? // great, good, ok, bad
  notes        String?
  coachNotes   String?
  exercises    LoggedExercise[]
}

model LoggedExercise {
  id            String      @id @default(cuid())
  trainingLog   TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId String
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  notes         String?
  sets          LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Int?
  isCompleted      Boolean        @default(false)
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String @unique
  played   Int
  wins     Int
  losses   Int
  draws    Int
  points   Int
}

model LfgLobby {
    id              String          @id @default(cuid())
    type            LfgLobbyType
    sport           String
    location        String
    playground      Playground?     @relation(fields: [playgroundId], references: [id])
    playgroundId    String?
    startTime       DateTime
    endTime         DateTime
    playersNeeded   Int
    comment         String
    creator         User            @relation("createdLobbies", fields: [creatorId], references: [id])
    creatorId       String
    players         User[]          @relation("LobbyPlayers")
    createdAt       DateTime        @default(now())
}

enum LfgLobbyType {
    GAME
    TRAINING
}

model Measurement {
    id      String    @id @default(cuid())
    user    User      @relation(fields: [userId], references: [id])
    userId  String
    date    DateTime
    weight  Float
    bodyFat Float?
    chest   Float?
    waist   Float?
    hips    Float?
    biceps  Float?
    thigh   Float?
}

model TrainingProposal {
    id        String          @id @default(cuid())
    from      User            @relation("FromUser", fields: [fromId], references: [id])
    fromId    String
    to        User            @relation("ToUser", fields: [toId], references: [id])
    toId      String
    sport     String
    date      DateTime
    comment   String?
    program   TrainingProgram? @relation(fields: [programId], references: [id])
    programId String?
    status    String          @default("PENDING") // PENDING, ACCEPTED, DECLINED
    createdAt DateTime        @default(now())
}

model Poll {
    id          String      @id @default(cuid())
    title       String
    question    String
    isActive    Boolean     @default(true)
    createdAt   DateTime    @default(now())
    options     PollOption[]
    votes       PollVote[]
}

model PollOption {
    id          String      @id @default(cuid())
    poll        Poll        @relation(fields: [pollId], references: [id])
    pollId      String
    text        String
    votes       PollVote[]
}

model PollVote {
    id           String     @id @default(cuid())
    poll         Poll       @relation(fields: [pollId], references: [id])
    pollId       String
    pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
    pollOptionId String
    user         User       @relation(fields: [userId], references: [id])
    userId       String

    @@unique([userId, pollId])
}

model Quest {
    id          String    @id @default(cuid())
    type        QuestType
    title       String
    description String
    reward      Int
    goal        Int
    href        String
    createdAt   DateTime  @default(now())
}

enum QuestType {
    DAILY
    WEEKLY
    SPECIAL
}

model InventoryItem {
    id             String   @id @default(cuid())
    user           User     @relation(fields: [userId], references: [id])
    userId         String
    name           String
    category       String // e.g. "Обувь", "Одежда", "Аксессуары", "Периферия"
    type           String // e.g. "Футбольные бутсы", "Игровая мышь"
    purchaseDate   DateTime
    lifespanMonths Int // estimated lifespan in months
    image          String?
    imageHint      String?
    createdAt      DateTime @default(now())
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model TournamentMedia {
  id          String     @id @default(cuid())
  type        String // IMAGE, VIDEO, AUDIO
  src         String
  description String?
  hint        String?
  tournament  Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  createdAt   DateTime   @default(now())
}

model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("Reporter", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("Reported", fields: [reportedUserId], references: [id])
  reportedUserId String
  reason         String
  context        String
  status         ReportStatus @default(PENDING)
  createdAt      DateTime     @default(now())
  resolvedAt     DateTime?
  resolverId     String?
  resolution     String?
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model PlaygroundReport {
  id           String           @id @default(cuid())
  playground   Playground       @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User             @relation(fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String // low, medium, high
  summary      String
  status       ReportStatus     @default(PENDING)
  createdAt    DateTime         @default(now())
  resolvedAt   DateTime?
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
}

model MedicalPartner {
  id          String       @id @default(cuid())
  name        String
  specialization String
  contact     String
  avatar      String?
  avatarHint  String?
  tournaments Tournament[]
}
