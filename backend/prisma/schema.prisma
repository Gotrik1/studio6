// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------------------------------------
// Enums
// -------------------------------------------------

enum UserRole {
  ADMINISTRATOR @map("Администратор")
  MODERATOR     @map("Модератор")
  CAPTAIN       @map("Капитан")
  PLAYER        @map("Игрок")
  COACH         @map("Тренер")
  JUDGE         @map:("Судья")
  MANAGER       @map("Менеджер")
  ORGANIZER     @map("Организатор")
  SPONSOR       @map("Спонсор")
  FAN           @map("Болельщик")
}

enum UserStatus {
  ACTIVE    @map("Активен")
  BANNED    @map("Забанен")
  INACTIVE  @map("Неактивен")
}

// -------------------------------------------------
// Models
// -------------------------------------------------

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    UserRole                 @default(PLAYER)
  status                  UserStatus               @default(ACTIVE)
  xp                      Int                      @default(0)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  isVerified              Boolean                  @default(false)
  preferredSports         String[]
  telegram                String?
  discord                 String?
  organizedTournaments      Tournament[]             @relation("OrganizedTournaments")
  createdTeams              Team[]                   @relation("CreatedTeams")
  captainOfTeams            Team[]                   @relation("CaptainOfTeams")
  teamsAsMember             Team[]                   @relation("TeamMembers")
  createdPlaygrounds        Playground[]
  judgingTournaments        Tournament[]             @relation("JudgedTournaments")
  refereedMatches           Match[]                  @relation("RefereeMatches")
  trainingLogs              TrainingLog[]
  createdChallenges         Challenge[]              @relation("CreatedChallenges")
  acceptedChallenges        Challenge[]              @relation("AcceptedChallenges")
  achievements              UserAchievement[]
  notifications             Notification[]
  reportsSent               PlaygroundReport[]       @relation("ReportsSent")
  reportsReceived           PlaygroundReport[]       @relation("ReportsReceived")
  userReportsSent           Report[]                 @relation("UserReportsSent")
  userReportsReceived       Report[]                 @relation("UserReportsReceived")
  resolvedReports           Report[]                 @relation("ResolvedReports")
  careerHistory             CareerHistory[]
  coachProfile              CoachProfile?
  coaching                  User[]                   @relation("CoachingRelations")
  coachedBy                 User?                    @relation("CoachingRelations", fields: [coachId], references: [id])
  coachId                   String?
  sponsorships              Sponsorship[]
  sponsorshipOffers         SponsorshipOffer[]
  measurements              Measurement[]
  trainingProposalsSent     TrainingProposal[]       @relation("SentProposals")
  trainingProposalsReceived TrainingProposal[]       @relation("ReceivedProposals")
  polls                     Poll[]
  pollVotes                 PollVote[]
  chats                     Chat[]                   @relation("UserChats")
  messages                  Message[]
  activities                Activity[]
  trainingPrograms          UserTrainingProgram[]
  inventory                 InventoryItem[]
  foodLog                   FoodLogEntry[]
}

model Team {
  id                 String              @id @default(cuid())
  name               String
  slug               String              @unique
  motto              String?
  logo               String?
  dataAiHint         String?
  game               String
  rank               Int                 @default(1)
  wins               Int                 @default(0)
  losses             Int                 @default(0)
  draws              Int                 @default(0)
  pitch              String?
  seekingSponsorship Boolean             @default(false)
  goals              String?
  homePlayground     Playground?         @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?
  creator            User                @relation("CreatedTeams", fields: [creatorId], references: [id])
  creatorId          String
  captain            User                @relation("CaptainOfTeams", fields: [captainId], references: [id])
  captainId          String
  members            User[]              @relation("TeamMembers")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]             @relation("Team1Matches")
  matchesAsTeam2     Match[]             @relation("Team2Matches")
  matchEvents        MatchEvent[]
  applications       TeamApplication[]
  sponsorships       Sponsorship[]
  sponsors           Sponsor[]           @relation("SponsoredTeams")
  practices          TeamPractice[]
  chat               Chat?
  leagues            LeagueTeam[]
}

model TeamPractice {
    id String @id @default(cuid())
    team Team @relation(fields: [teamId], references: [id])
    teamId String
    title String
    description String?
    date DateTime
    playground Playground @relation(fields: [playgroundId], references: [id])
    playgroundId String
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  description             String?
  game                    String
  format                  String
  type                    String
  category                String
  location                String
  participantCount        Int
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  status                  String
  organizer               User                     @relation("OrganizedTournaments", fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
  judges                  User[]                   @relation("JudgedTournaments")
  sponsors                Sponsor[]                @relation("SponsoredTournaments")
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  applications            TeamApplication[]
}

model Match {
  id              String         @id @default(cuid())
  team1           Team           @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team           @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  location        String?
  playgroundId    String?
  tournament      Tournament?    @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  round           Int?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  referee         User?          @relation("RefereeMatches", fields: [refereeId], references: [id])
  refereeId       String?
  events          MatchEvent[]
  notifications   Notification[]
  league          League?        @relation(fields: [leagueId], references: [id])
  leagueId        String?
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model MatchEvent {
  id        String         @id @default(cuid())
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  team      Team           @relation(fields: [teamId], references: [id])
  teamId    String
  player    User           @relation(fields: [playerId], references: [id])
  playerId  String
  timestamp DateTime       @default(now())
  type      MatchEventType
  metadata  Json?
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  SHOT
  SHOT_ON_TARGET
  CORNER
  FOUL
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

model Notification {
  id             String                  @id @default(cuid())
  user           User                    @relation(fields: [userId], references: [id])
  userId         String
  type           NotificationType
  message        String
  href           String?
  isRead         Boolean                 @default(false)
  createdAt      DateTime                @default(now())
  match          Match?                  @relation(fields: [matchId], references: [id])
  matchId        String?
  announcement   TournamentAnnouncement? @relation("AnnouncementNotifications", fields: [announcementId], references: [id])
  announcementId String?
  challenge      Challenge?              @relation(fields: [challengeId], references: [id])
  challengeId    String?
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  TEAM_INVITE
  CHALLENGE
  SYSTEM
}

model Sponsor {
  id           String       @id @default(cuid())
  name         String       @unique
  logo         String?
  logoHint     String?
  description  String
  profileUrl   String
  interests    String[]
  tournaments  Tournament[] @relation("SponsoredTournaments")
  teams        Team[]       @relation("SponsoredTeams")
  promotions   Promotion[]
  sponsorships Sponsorship[]
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  creator      User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  opponentId   String?
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  status       ChallengeStatus
  result       String?
  createdAt    DateTime        @default(now())
  notifications Notification[]
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Sport {
  id        String      @id @unique
  name      String      @unique
  icon      String
  category  String
  challenges Challenge[]
}

model Playground {
  id                  String             @id @default(cuid())
  name                String
  address             String
  type                String
  coverImage          String?
  coverImageHint      String?
  surface             String
  features            String[]
  rating              Float
  status              PlaygroundStatus
  checkIns            Int
  creatorId           String
  creator             User               @relation(fields: [creatorId], references: [id])
  reviews             PlaygroundReview[]
  reports             PlaygroundReport[]
  teams               Team[]
  teamPractices       TeamPractice[]
  lfgLobbies          LfgLobby[]
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User       @relation("ReportsSent", fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus
  createdAt    DateTime   @default(now())
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]    @relation("UserChats")
  messages     Message[]
  teamId       String?   @unique
  team         Team?     @relation(fields: [teamId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum ChatType {
  DIRECT
  GROUP
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime @default(now())
}

model FriendRequest {
  id        String             @id @default(cuid())
  from      User               @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User               @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime           @default(now())

  @@unique([fromId, toId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Sponsorship {
    id String @id @default(cuid())
    team Team @relation(fields: [teamId], references: [id])
    teamId String
    sponsor Sponsor @relation(fields: [sponsorId], references: [id])
    sponsorId String
    amount Decimal
    signedAt DateTime @default(now())
    user User @relation(fields: [userId], references: [id])
    userId String
}

model LfgLobby {
    id String @id @default(cuid())
    creator User @relation("CreatedLobbies", fields: [creatorId], references: [id])
    creatorId String
    players User[] @relation("JoinedLobbies")
    type LfgLobbyType
    sport String
    location String
    playground Playground? @relation(fields: [playgroundId], references: [id])
    playgroundId String?
    startTime DateTime
    endTime DateTime
    playersNeeded Int
    comment String
    status LfgLobbyStatus @default(OPEN)
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

model UserAchievement {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([userId, achievementId])
}

model Achievement {
  id          String            @id @default(cuid())
  name        String            @unique
  description String
  icon        String
  users       UserAchievement[]
}

model Report {
  id              String       @id @default(cuid())
  reporter        User         @relation("UserReportsSent", fields: [reporterId], references: [id])
  reporterId      String
  reportedUser    User         @relation("UserReportsReceived", fields: [reportedUserId], references: [id])
  reportedUserId  String
  category        String
  description     String?
  status          ReportStatus @default(PENDING)
  resolution      String?
  resolver        User?        @relation("ResolvedReports", fields: [resolverId], references: [id])
  resolverId      String?
  createdAt       DateTime     @default(now())
  resolvedAt      DateTime?
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model UserTrainingProgram {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    program TrainingProgram @relation(fields: [programId], references: [id])
    programId String
    assignedAt DateTime @default(now())
    isActive Boolean @default(true)

    @@unique([userId, programId])
}


model TrainingProgram {
  id               String                @id @default(cuid())
  name             String
  description      String
  goal             String
  daysPerWeek      Int
  splitType        String
  author           String
  coverImage       String
  coverImageHint   String
  isAiGenerated    Boolean               @default(false)
  weeklySplit      WorkoutDay[]
  assignedToUsers  UserTrainingProgram[]
  trainingProposals TrainingProposal[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String
  imageHint   String
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id        String   @id @default(cuid())
  league    League   @relation(fields: [leagueId], references: [id])
  leagueId  String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  played    Int
  wins      Int
  draws     Int
  losses    Int
  points    Int

  @@unique([leagueId, teamId])
}

model CareerHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  isActive  Boolean      @default(true)
  author    User?        @relation(fields: [authorId], references: [id])
  authorId  String?
  createdAt DateTime     @default(now())
  votes     PollVote[]
}

model PollOption {
  id        String     @id @default(cuid())
  poll      Poll       @relation(fields: [pollId], references: [id])
  pollId    String
  text      String
  votes     PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@unique([userId, pollId])
}

model TournamentAnnouncement {
    id String @id @default(cuid())
    tournament Tournament @relation(fields: [tournamentId], references: [id])
    tournamentId String
    sender User @relation(fields: [senderId], references: [id])
    senderId String
    subject String
    message String
    sentTo Int
    createdAt DateTime @default(now())
    notifications Notification[] @relation("AnnouncementNotifications")
}

model Activity {
    id String @id @default(cuid())
    type ActivityType
    user User @relation(fields: [userId], references: [id])
    userId String
    metadata Json?
    playground Playground? @relation(fields: [playgroundId], references: [id])
    playgroundId String?
    createdAt DateTime @default(now())
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model TeamApplication {
  id           String                  @id @default(cuid())
  team         Team                    @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                    @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?             @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  message      String?
  status       TeamApplicationStatus   @default(PENDING)
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model SponsorshipOffer {
    id String @id @default(cuid())
    sponsor Sponsor @relation(fields: [sponsorId], references: [id])
    sponsorId String
    team Team @relation(fields: [teamId], references: [id])
    teamId String
    offerText String
    status SponsorshipOfferStatus @default(PENDING)
    user User @relation(fields: [userId], references: [id])
    userId String
}

enum SponsorshipOfferStatus {
    PENDING
    ACCEPTED
    DECLINED
}

model MedicalPartner {
    id String @id @default(cuid())
    name String
    specialization String
    contact String
    avatar String?
    avatarHint String?
    tournaments Tournament[]
}

model TrainingProposal {
    id String @id @default(cuid())
    from User @relation("SentProposals", fields: [fromId], references: [id])
    fromId String
    to User @relation("ReceivedProposals", fields: [toId], references: [id])
    toId String
    sport String
    date DateTime
    comment String?
    status TrainingProposalStatus @default(PENDING)
    program TrainingProgram? @relation(fields: [programId], references: [id])
    programId String?
    createdAt DateTime @default(now())
}

enum TrainingProposalStatus {
    PENDING
    ACCEPTED
    DECLINED
}

model Quest {
    id String @id @default(cuid())
    title String
    description String
    reward Int
    goal Int
    href String
    type QuestType
    createdAt DateTime @default(now())
}

enum QuestType {
    DAILY
    WEEKLY
    SPECIAL
}

model InventoryItem {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    name String
    category String
    type String
    purchaseDate DateTime
    lifespanMonths Int
    image String?
    imageHint String?
    createdAt DateTime @default(now())
}

model StoreItem {
    id String @id @default(cuid())
    name String
    description String
    price Float
    image String?
    imageHint String?
    category String
    isRealMoney Boolean @default(false)
}

model FoodItem {
    id String @id @default(cuid())
    name String @unique
    category String
    image String?
    imageHint String?
    calories Float
    protein Float
    fat Float
    carbs Float
    description String?
    logEntries FoodLogEntry[]
}

model FoodLogEntry {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    foodItem FoodItem @relation(fields: [foodItemId], references: [id])
    foodItemId String
    grams Int
    meal String
    createdAt DateTime @default(now())
}

model Measurement {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    date DateTime
    weight Float
    bodyFat Float?
    chest Float?
    waist Float?
    hips Float?
    biceps Float?
    thigh Float?
}

model TrainingLog {
  id              String             @id @default(cuid())
  user            User               @relation(fields: [userId], references: [id])
  userId          String
  date            DateTime
  workoutName     String?
  status          TrainingLogStatus  @default(PLANNED)
  exercises       LoggedExercise[]
  mood            Mood?
  notes           String?
  coachNotes      String?
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

model LoggedExercise {
  id                      String          @id @default(cuid())
  trainingLog             TrainingLog     @relation(fields: [trainingLogId], references: [id])
  trainingLogId           String
  exercise                Exercise        @relation(fields: [exerciseId], references: [id])
  exerciseId              String
  notes                   String?
  isSupersetWithPrevious  Boolean?
  sets                    LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean
}

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  logged         LoggedExercise[]
}
