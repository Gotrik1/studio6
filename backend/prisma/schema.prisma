// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------
// User & Auth Models
// -------------------

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    String                   @default("Игрок")
  status                  String                   @default("Активен")
  xp                      Int                      @default(0)
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  preferredSports         String[]                 @default([])
  isVerified              Boolean                  @default(false)
  telegram                String?                  @unique
  discord                 String?                  @unique
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  // Relations
  createdTeams            Team[]                   @relation("CreatedTeams")
  captainOfTeams          Team[]                   @relation("CaptainOfTeams")
  teamsAsMember           Team[]                   @relation("TeamMembers")
  organizedTournaments    Tournament[]             @relation("OrganizedTournaments")
  judgedMatches           Match[]                  @relation("JudgedMatches")
  judgedTournaments       Tournament[]             @relation("JudgedTournaments")
  createdPlaygrounds      Playground[]
  reportsSent             Report[]                 @relation("ReportsSent")
  reportsReceived         Report[]                 @relation("ReportsReceived")
  reportsResolved         Report[]                 @relation("ReportsResolved")
  careerHistory           CareerHistory[]
  coachProfile            CoachProfile?
  coaching                User[]                   @relation("Coaches")
  coach                   User?                    @relation("Coaches", fields: [coachId], references: [id])
  coachId                 String?
  sponsorships            Sponsorship[]
  sponsorshipOffers       SponsorshipOffer[]       @relation("CreatorSponsorshipOffers")
  measurements            Measurement[]
  trainingProposalsSent   TrainingProposal[]       @relation("ProposalsSent")
  trainingProposalsRcvd   TrainingProposal[]       @relation("ProposalsReceived")
  pollsVoted              PollVote[]
  sentFriendRequests      FriendRequest[]          @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]          @relation("ReceivedFriendRequests")
  friends                 User[]                   @relation("Friends")
  friendOf                User[]                   @relation("Friends")
  playgroundReviews       PlaygroundReview[]
  sentAnnouncements       TournamentAnnouncement[]
  notifications           Notification[]
  trainingLogs            TrainingLog[]
  assignedPrograms        UserTrainingProgram[]
  inventory               InventoryItem[]
  foodLog                 FoodLogEntry[]
  activities              Activity[]
  sentTeamApplications    TeamApplication[]        @relation("SentTeamApplications")
  applicationsAsMember    TeamApplication[]        @relation("ApplicationsAsMember")
  createdChallenges       Challenge[]              @relation("CreatedChallenges")
  acceptedChallenges      Challenge[]              @relation("AcceptedChallenges")
  events                  MatchEvent[]
  organizedPromotions     Promotion[]
}

model CareerHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING) // PENDING, ACCEPTED, DECLINED
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

// -------------------
// Team Models
// -------------------

model Team {
  id                 String             @id @default(cuid())
  name               String
  motto              String?
  logo               String?
  dataAiHint         String?
  game               String
  slug               String             @unique
  pitch              String?
  seekingSponsorship Boolean            @default(true)
  rank               Int                @default(999)
  wins               Int                @default(0)
  losses             Int                @default(0)
  draws              Int                @default(0)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  // Relations
  creator            User               @relation("CreatedTeams", fields: [creatorId], references: [id])
  creatorId          String
  captain            User               @relation("CaptainOfTeams", fields: [captainId], references: [id])
  captainId          String
  members            User[]             @relation("TeamMembers")
  tournaments        Tournament[]       @relation("TournamentTeams")
  matchesAsTeam1     Match[]            @relation("Team1Matches")
  matchesAsTeam2     Match[]            @relation("Team2Matches")
  sponsorships       Sponsorship[]      @relation("SponsoredTeams")
  sponsorshipOffers  SponsorshipOffer[]
  homePlayground     Playground?        @relation("ResidentTeams", fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?
  events             MatchEvent[]
  chat               Chat?
  applications       TeamApplication[]  @relation("ReceivedTeamApplications")
  practices          TeamPractice[]
  leagueTeams        LeagueTeam[]
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model TeamApplication {
  id           String                  @id @default(cuid())
  team         Team                    @relation("ReceivedTeamApplications", fields: [teamId], references: [id])
  teamId       String
  user         User                    @relation("SentTeamApplications", fields: [userId], references: [id])
  userId       String
  message      String?
  status       TeamApplicationStatus   @default(PENDING)
  tournament   Tournament?             @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  members      User[]                  @relation("ApplicationsAsMember")
}

// -------------------
// Tournament & Match Models
// -------------------

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  game                  String
  description           String?
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  status                TournamentStatus
  format                TournamentFormat
  type                  TournamentType
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  // Relations
  organizer             User                     @relation("OrganizedTournaments", fields: [organizerId], references: [id])
  organizerId           String
  teams                 Team[]                   @relation("TournamentTeams")
  matches               Match[]                  @relation(name: "TournamentMatches")
  judges                User[]                   @relation("JudgedTournaments")
  sponsors              Sponsor[]                @relation("SponsoredTournaments")
  medicalPartners       MedicalPartner[]
  announcements         TournamentAnnouncement[]
  applications          TeamApplication[]
  league                League?                  @relation(fields: [leagueId], references: [id])
  leagueId              String?
  media                 TournamentMedia[]
}

model TournamentMedia {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type         MediaType
  src          String
  description  String?
  hint         String?
  createdAt    DateTime   @default(now())
}

model Match {
  id               String       @id @default(cuid())
  team1            Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id          String
  team2            Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id          String
  team1Score       Int?
  team2Score       Int?
  status           MatchStatus
  scheduledAt      DateTime
  finishedAt       DateTime?
  round            Int?
  disputeReason    String?
  disputeOpenedAt  DateTime?
  resolution       String?
  refereeName      String?
  location         String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  // Relations
  tournament       Tournament?  @relation(name: "TournamentMatches", fields: [tournamentId], references: [id])
  tournamentId     String?
  playground       Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId     String?
  events           MatchEvent[]
  notifications    Notification[]
  league           League?      @relation(fields: [leagueId], references: [id])
  leagueId         String?
  judge            User?        @relation("JudgedMatches", fields: [judgeId], references: [id])
  judgeId          String?
}

model MatchEvent {
  id        String         @id @default(cuid())
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  team      Team           @relation(fields: [teamId], references: [id])
  teamId    String
  player    User           @relation(fields: [playerId], references: [id])
  playerId  String
  type      MatchEventType
  timestamp DateTime       @default(now())
}

// -------------------
// Playground Models
// -------------------

model Playground {
  id             String               @id @default(cuid())
  name           String
  address        String
  type           String
  coverImage     String?
  coverImageHint String?
  surface        String
  features       String[]
  rating         Float
  checkIns       Int                  @default(0)
  status         PlaygroundStatus
  creator        User                 @relation(fields: [creatorId], references: [id])
  creatorId      String
  // Relations
  matches        Match[]
  practices      TeamPractice[]
  reviews        PlaygroundReview[]
  reports        PlaygroundReport[]
  activities     Activity[]
  residentTeams  Team[]               @relation("ResidentTeams")
  lobbies        LfgLobby[]
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String       @id @default(cuid())
  playground   Playground   @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User         @relation(fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus
  createdAt    DateTime     @default(now())
}


// -------------------
// Sponsor & Promotion Models
// -------------------

model Sponsor {
  id          String       @id
  name        String
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  // Relations
  promotions  Promotion[]
  teams       Team[]       @relation("SponsoredTeams")
  tournaments Tournament[] @relation("SponsoredTournaments")
  offers      SponsorshipOffer[]
}

model Sponsorship {
  id        String   @id @default(cuid())
  team      Team     @relation("SponsoredTeams", fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId String
  amount    Float
  signedAt  DateTime @default(now())
  endsAt    DateTime
  creator   User     @relation(fields: [creatorId], references: [id])
  creatorId String
}

model SponsorshipOffer {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId String
  offerText String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  creator   User     @relation("CreatorSponsorshipOffers", fields: [creatorId], references: [id])
  creatorId String
  createdAt DateTime @default(now())
}

model Promotion {
  id            String    @id @default(cuid())
  name          String
  description   String
  prize         String
  cost          String
  imageDataUri  String
  imageHint     String
  endDate       DateTime
  // Relations
  organizer     User      @relation(fields: [organizerId], references: [id])
  organizerId   String
  sponsor       Sponsor?  @relation(fields: [sponsorId], references: [id])
  sponsorId     String?
  createdAt     DateTime  @default(now())
}

// -------------------
// Report & Moderation
// -------------------

model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("ReportsSent", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  reportedUserId String
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  resolution     String?
  resolver       User?        @relation("ReportsResolved", fields: [resolverId], references: [id])
  resolverId     String?
  createdAt      DateTime     @default(now())
  resolvedAt     DateTime?
}

// -------------------
// Training & Nutrition
// -------------------

model Exercise {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json
  commonMistakes  Json
  alternatives    Json
  // Relations
  loggedExercises LoggedExercise[]
}

model LoggedExercise {
  id                       String          @id @default(cuid())
  trainingLog              TrainingLog     @relation(fields: [trainingLogId], references: [id])
  trainingLogId            String
  exercise                 Exercise        @relation(fields: [exerciseId], references: [id])
  exerciseId               String
  notes                    String?
  sets                     LoggedSet[]
  isSupersetWithPrevious   Boolean?
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Int?
  isCompleted      Boolean        @default(false)
}

model TrainingLog {
  id          String           @id @default(cuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  workoutName String?
  status      TrainingLogStatus
  exercises   LoggedExercise[]
  mood        Mood?
  notes       String?
  coachNotes  String?
}

model TrainingProgram {
  id               String                  @id
  name             String
  description      String
  goal             String // "Набор массы", "Снижение веса", "Рельеф", "Сила"
  daysPerWeek      Int
  splitType        String // "Full-body", "Split", "Upper/Lower"
  author           String
  coverImage       String
  coverImageHint   String
  isAiGenerated    Boolean                 @default(false)
  weeklySplit      WorkoutDay[]
  assignedTo       UserTrainingProgram[]
  proposals        TrainingProposal[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                     String      @id @default(cuid())
  workoutDay             WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId           String
  name                   String
  sets                   String
  reps                   String
  plannedWeight          String?
  isSupersetWithPrevious Boolean?
  technique              String?
}

model UserTrainingProgram {
  user       User            @relation(fields: [userId], references: [id])
  userId     String
  program    TrainingProgram @relation(fields: [programId], references: [id])
  programId  String
  assignedAt DateTime        @default(now())
  isActive   Boolean         @default(true)

  @@id([userId, programId])
}

model TrainingProposal {
  id         String                 @id @default(cuid())
  from       User                   @relation("ProposalsSent", fields: [fromId], references: [id])
  fromId     String
  to         User                   @relation("ProposalsReceived", fields: [toId], references: [id])
  toId       String
  sport      String
  date       DateTime
  comment    String?
  status     TrainingProposalStatus @default(PENDING)
  program    TrainingProgram?       @relation(fields: [programId], references: [id])
  programId  String?
  createdAt  DateTime               @default(now())
}

model Measurement {
  id      String    @id @default(cuid())
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String
  category    String // "Продукты", "Спортивное питание"
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String // "Завтрак", "Обед", etc.
  createdAt  DateTime @default(now())
}

// -------------------
// Misc Models
// -------------------

model LfgLobby {
  id            String         @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  status        LfgLobbyStatus @default(OPEN)
  // Relations
  creator       User           @relation(fields: [creatorId], references: [id])
  creatorId     String
  players       User[]
  playground    Playground?    @relation(fields: [playgroundId], references: [id])
  playgroundId  String?
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  status       ChallengeStatus @default(OPEN)
  result       String?
  createdAt    DateTime        @default(now())
  // Relations
  creator      User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  opponentId   String?
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
}

model Sport {
  id         String      @id
  name       String
  icon       String
  category   String
  // Relations
  challenges Challenge[]
}

model Notification {
  id             String                  @id @default(cuid())
  user           User                    @relation(fields: [userId], references: [id])
  userId         String
  type           NotificationType
  message        String
  href           String?
  isRead         Boolean                 @default(false)
  createdAt      DateTime                @default(now())
  // Optional relations to link notifications to specific entities
  match          Match?                  @relation(fields: [matchId], references: [id])
  matchId        String?
  announcement   TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
  announcementId String?
}

model TournamentAnnouncement {
  id            String         @id @default(cuid())
  tournament    Tournament     @relation(fields: [tournamentId], references: [id])
  tournamentId  String
  sender        User           @relation(fields: [senderId], references: [id])
  senderId      String
  subject       String
  message       String
  sentTo        Int
  createdAt     DateTime       @default(now())
  notifications Notification[]
}

model Achievement {
  id          String              @id @default(cuid())
  name        String
  description String
  icon        String
  users       UserAchievement[]
}

model UserAchievement {
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@id([userId, achievementId])
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

model Poll {
  id        String       @id
  title     String
  question  String
  options   PollOption[]
  votes     PollVote[]
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  author    User?        @relation(fields: [authorId], references: [id])
  authorId  String?
}

model PollOption {
  id     String     @id
  text   String
  poll   Poll       @relation(fields: [pollId], references: [id])
  pollId String
  votes  PollVote[]
}

model PollVote {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  votedAt      DateTime   @default(now())

  @@id([userId, pollId])
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String // 'Обувь', 'Одежда', 'Аксессуары', 'Периферия'
  type           String // e.g., "Футбольные бутсы"
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  tournaments Tournament[]
  matches     Match[]
}

model LeagueTeam {
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int
  wins     Int
  draws    Int
  losses   Int
  points   Int

  @@id([leagueId, teamId])
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]
  messages     Message[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
}

model Message {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  content   String
  createdAt DateTime @default(now())
}

model Activity {
  id           String       @id @default(cuid())
  type         ActivityType
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  metadata     Json
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

// -------------------
// Enums
// -------------------

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

enum TournamentFormat {
  single_elimination
  round_robin
  groups
}

enum TournamentType {
  team
  individual
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  SHOT
  SHOT_ON_TARGET
  CORNER
  FOUL
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  SYSTEM
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

enum ChatType {
  PRIVATE
  GROUP
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum PlaygroundStatus {
  PENDING_MODERATION
  APPROVED
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}
