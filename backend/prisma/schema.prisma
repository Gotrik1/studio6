generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===================
// Enums
// ===================

enum MatchEventType {
  SHOT
  SHOT_ON_TARGET
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  CORNER
  FOUL
  SUBSTITUTION
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

enum UserStatus {
  ACTIVE
  BANNED
  DEACTIVATED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

enum TournamentFormat {
  single_elimination
  round_robin
  groups
}

enum TournamentType {
  team
  individual
}

enum ChatType {
  DIRECT
  GROUP
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  TEAM_APPLICATION
  SPONSORSHIP_OFFER
  CHALLENGE
  LFG_JOIN
  TRAINING_PROPOSAL
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}


// ===================
// Main Models
// ===================

model User {
  id                       String                     @id @default(cuid())
  email                    String                     @unique
  name                     String
  passwordHash             String
  avatar                   String?
  role                     String                     @default("Игрок")
  status                   String                     @default("Активен")
  xp                       Int                        @default(0)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  isVerified               Boolean                    @default(false)
  dateOfBirth              DateTime?
  location                 String?
  mainSport                String?
  preferredSports          String[]
  telegram                 String?
  discord                  String?
  createdTeams             Team[]                     @relation("CreatedTeams")
  teamsAsMember            Team[]                     @relation("TeamMembers")
  teamsAsCaptain           Team[]                     @relation("TeamCaptain")
  organizedTournaments     Tournament[]               @relation("OrganizedTournaments")
  judgedMatches            Match[]                    @relation("JudgedMatches")
  resolvedDisputes         Match[]                    @relation("ResolvedDisputes")
  friends                  User[]                     @relation("Friends")
  friendOf                 User[]                     @relation("Friends")
  friendRequestsSent       FriendRequest[]            @relation("SentFriendRequests")
  friendRequestsReceived   FriendRequest[]            @relation("ReceivedFriendRequests")
  notifications            Notification[]
  careerHistory            CareerHistory[]
  coachProfile             CoachProfile?
  createdChallenges        Challenge[]                @relation("ChallengesCreated")
  acceptedChallenges       Challenge[]                @relation("ChallengesAccepted")
  matchEvents              MatchEvent[]
  reportsMade              Report[]                   @relation("ReportsMade")
  reportsAgainst           Report[]                   @relation("ReportsAgainst")
  resolvedReports          Report[]                   @relation("ReportsResolved")
  organizedPromotions      Promotion[]                @relation("OrganizedPromotions")
  createdPlaygrounds       Playground[]
  authoredReviews          PlaygroundReview[]
  trainingLogs             TrainingLog[]
  trainingPrograms         UserTrainingProgram[]
  inventory                InventoryItem[]
  foodLog                  FoodLogEntry[]
  measurements             Measurement[]
  sentTrainingProposals    TrainingProposal[]         @relation("SentTrainingProposals")
  recdTrainingProposals    TrainingProposal[]         @relation("ReceivedTrainingProposals")
  pollVotes                PollVote[]
  createdLobbies           LfgLobby[]                 @relation("CreatedLobbies")
  joinedLobbies            LfgLobby[]                 @relation("JoinedLobbies")
  teamApplications         TeamApplication[]
  sentMessages             Message[]
  sentAnnouncements        TournamentAnnouncement[]   @relation("SentAnnouncements")
  sponsorships             Sponsorship[]
  sponsorshipOffers        SponsorshipOffer[]         @relation("SponsorOffers")
}

model Team {
  id                   String                 @id @default(cuid())
  name                 String
  slug                 String                 @unique
  motto                String?
  logo                 String?
  dataAiHint           String?
  game                 String
  rank                 Int                    @default(1)
  wins                 Int                    @default(0)
  losses               Int                    @default(0)
  draws                Int                    @default(0)
  seekingSponsorship   Boolean                @default(false)
  pitch                String?
  creator              User                   @relation("CreatedTeams", fields: [creatorId], references: [id])
  creatorId            String
  captain              User                   @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId            String
  members              User[]                 @relation("TeamMembers")
  tournaments            Tournament[]
  matchesAsTeam1         Match[]                @relation("Team1Matches")
  matchesAsTeam2         Match[]                @relation("Team2Matches")
  matchEvents            MatchEvent[]
  homePlayground         Playground?            @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId       String?
  chat                   Chat?
  teamApplications       TeamApplication[]
  sponsorships           Sponsorship[]
  sponsorshipOffers      SponsorshipOffer[]     @relation("TeamSponsorshipOffers")
  teamPractices          TeamPractice[]
  TrainingPlanAssignment TrainingPlanAssignment[]
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  game                    String
  status                  TournamentStatus         @default(REGISTRATION)
  format                  TournamentFormat         @default(single_elimination)
  type                    TournamentType           @default(team)
  category                String?
  location                String?
  participantCount        Int                      @default(16)
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  prizePool               String?
  rules                   String?                  @db.Text
  bannerImage             String?
  bannerImageHint         String?
  organizer               User                     @relation("OrganizedTournaments", fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
  judges                  User[]                   @relation("JudgedTournaments")
  media                   TournamentMedia[]
  sponsors                Sponsor[]
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  applications            TeamApplication[]
  leagueId                String?
  league                  League?                  @relation(fields: [leagueId], references: [id])
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
}

model Match {
  id               String       @id @default(cuid())
  team1            Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id          String
  team2            Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id          String
  team1Score       Int?
  team2Score       Int?
  status           MatchStatus  @default(PLANNED)
  scheduledAt      DateTime
  finishedAt       DateTime?
  tournament       Tournament?  @relation(fields: [tournamentId], references: [id])
  tournamentId     String?
  playgroundId     String?
  location         String?
  refereeName      String?
  disputeReason    String?
  disputeOpenedAt  DateTime?
  resolution       String?
  resolver         User?        @relation("ResolvedDisputes", fields: [resolverId], references: [id])
  resolverId       String?
  events           MatchEvent[]
  leagueId         String?
  league           League?      @relation(fields: [leagueId], references: [id])
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model MatchEvent {
  id        String         @id @default(cuid())
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  player    User?          @relation(fields: [playerId], references: [id])
  playerId  String?
  team      Team?          @relation(fields: [teamId], references: [id])
  teamId    String?
  type      MatchEventType
  timestamp DateTime       @default(now())
}

model UserAchievement {
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  createdAt     DateTime    @default(now())

  @@id([userId, achievementId])
}

model Achievement {
  id          String            @id @default(cuid())
  name        String            @unique
  description String
  icon        String
  users       UserAchievement[]
}

model Playground {
  id                     String                 @id @default(cuid())
  name                   String
  address                String
  type                   String
  coverImage             String?
  coverImageHint         String?
  surface                String
  features               String[]
  rating                 Float
  status                 PlaygroundStatus       @default(PENDING_MODERATION)
  checkIns               Int                    @default(0)
  creator                User                   @relation(fields: [creatorId], references: [id])
  creatorId              String
  homeForTeams           Team[]
  reviews                PlaygroundReview[]
  reports                PlaygroundReport[]
  LfgLobby               LfgLobby[]
  teamPractices          TeamPractice[]
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
  REJECTED
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  rating       Int
  comment      String     @db.Text
  createdAt    DateTime   @default(now())
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId       String
  title        String
  description  String?    @db.Text
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  playgroundId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model LfgLobby {
  id            String       @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  playgroundId  String?
  playground    Playground?  @relation(fields: [playgroundId], references: [id])
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  status        LfgLobbyStatus @default(OPEN)
  creator       User         @relation("CreatedLobbies", fields: [creatorId], references: [id])
  creatorId     String
  players       User[]       @relation("JoinedLobbies")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Promotion {
  id          String   @id @default(cuid())
  name        String
  description String
  prize       String
  cost        String
  imageDataUri String   @db.Text
  imageHint   String
  sponsor     Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId   String?
  organizer   User     @relation("OrganizedPromotions", fields: [organizerId], references: [id])
  organizerId String
  endDate     DateTime
  createdAt   DateTime @default(now())
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  createdAt    DateTime              @default(now())
}

model Sport {
  id         String      @id @unique
  name       String
  icon       String
  category   String
  challenges Challenge[]
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  wager        Int
  status       ChallengeStatus @default(OPEN)
  creator      User            @relation("ChallengesCreated", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("ChallengesAccepted", fields: [opponentId], references: [id])
  opponentId   String?
  winnerId     String?
  result       String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  author    User?        @relation(fields: [authorId], references: [id])
  authorId  String?
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  options   PollOption[]
  votes     PollVote[]
}

model PollOption {
  id     String     @id @default(cuid())
  poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String
  text   String
  votes  PollVote[]
}

model PollVote {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@id([userId, pollId])
}

model StoreItem {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

model PromotionParticipant {
  userId      String
  promotionId String
  joinedAt    DateTime @default(now())

  @@id([userId, promotionId])
}

model Sponsor {
  id                String             @id @unique
  name              String
  logo              String?
  logoHint          String?
  description       String
  profileUrl        String
  interests         String[]
  promotions        Promotion[]
  teams             Team[]
  tournaments       Tournament[]
  sponsorshipOffers SponsorshipOffer[] @relation("SponsorSponsorshipOffers")
}

model Sponsorship {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  sponsor   User     @relation(fields: [sponsorId], references: [id], onDelete: Cascade)
  sponsorId String
  amount    Decimal
  signedAt  DateTime @default(now())
}

model SponsorshipOffer {
  id        String                @id @default(cuid())
  team      Team                  @relation("TeamSponsorshipOffers", fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  sponsor   Sponsor               @relation("SponsorSponsorshipOffers", fields: [sponsorId], references: [id], onDelete: Cascade)
  sponsorId String
  offerText String
  status    TeamApplicationStatus @default(PENDING) // Reusing status enum
  createdAt DateTime              @default(now())
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String?
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
  createdAt   DateTime     @default(now())
}

model LeagueTeam {
  league   League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId   String
  played   Int    @default(0)
  wins     Int    @default(0)
  draws    Int    @default(0)
  losses   Int    @default(0)
  points   Int    @default(0)

  @@id([leagueId, teamId])
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}

model TrainingProgram {
  id                String                @id @default(cuid())
  name              String
  description       String
  goal              String
  daysPerWeek       Int
  splitType         String
  author            String
  coverImage        String?
  coverImageHint    String?
  isAiGenerated     Boolean               @default(false)
  weeklySplit       WorkoutDay[]
  assignedTo        UserTrainingProgram[]
  trainingProposals TrainingProposal[]
  createdAt         DateTime              @default(now())
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
  trainingProgramId String
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                     String      @id @default(cuid())
  workoutDay             WorkoutDay  @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
  workoutDayId           String
  name                   String
  sets                   String
  reps                   String
  plannedWeight          String?
  isSupersetWithPrevious Boolean?    @default(false)
  technique              String?
}

model UserTrainingProgram {
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  program   TrainingProgram @relation(fields: [programId], references: [id])
  programId String
  assignedAt DateTime        @default(now())
  isActive   Boolean         @default(true)

  @@id([userId, programId])
}

model TrainingLog {
  id          String           @id @default(cuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  workoutName String?
  status      TrainingLogStatus
  exercises   LoggedExercise[]
  mood        Mood?
  notes       String?
  coachNotes  String?
  createdAt   DateTime         @default(now())
}

model LoggedExercise {
  id                     String      @id @default(cuid())
  trainingLog            TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId          String
  exercise               Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId             String
  notes                  String?
  isSupersetWithPrevious Boolean?
  sets                   LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Int?
  isCompleted      Boolean        @default(false)
}

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  logged         LoggedExercise[]
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String
  createdAt  DateTime @default(now())
}

model Measurement {
  id      String    @id @default(cuid())
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

model TrainingProposal {
  id        String                 @id @default(cuid())
  from      User                   @relation("SentTrainingProposals", fields: [fromId], references: [id])
  fromId    String
  to        User                   @relation("ReceivedTrainingProposals", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  comment   String?
  status    TrainingProposalStatus @default(PENDING)
  program   TrainingProgram?       @relation(fields: [programId], references: [id])
  programId String?
  createdAt DateTime               @default(now())
}

// ===================
// Core Models
// ===================

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]
  messages     Message[]
  teamId       String?   @unique
  team         Team?     @relation(fields: [teamId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
}

model Notification {
  id             String                  @id @default(cuid())
  user           User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  type           NotificationType
  message        String
  href           String?
  isRead         Boolean                 @default(false)
  createdAt      DateTime                @default(now())
  matchId        String?
  announcement   TournamentAnnouncement? @relation("AnnouncementNotifications", fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String?
}

model Activity {
  id           String       @id @default(cuid())
  type         ActivityType
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  metadata     Json
  playgroundId String?
  createdAt    DateTime     @default(now())
}


model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id], onDelete: Cascade)
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id], onDelete: Cascade)
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @unique
  specialization String
  description    String   @db.Text
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
}

model CareerHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("ReportsMade", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportsAgainst", fields: [reportedUserId], references: [id])
  reportedUserId String
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  resolvedAt     DateTime?
  resolver       User?        @relation("ReportsResolved", fields: [resolverId], references: [id])
  resolverId     String?
  resolution     String?
  createdAt      DateTime     @default(now())
}

model PlaygroundReport {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporterId   String
  category     String
  comment      String
  severity     String
  status       ReportStatus
  createdAt    DateTime   @default(now())
}

model TournamentMedia {
  id           String     @id @default(cuid())
  type         MediaType
  src          String
  description  String?
  hint         String?
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  createdAt    DateTime   @default(now())
}

model TournamentAnnouncement {
  id            String         @id @default(cuid())
  tournament    Tournament     @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId  String
  sender        User           @relation("SentAnnouncements", fields: [senderId], references: [id], onDelete: Cascade)
  senderId      String
  subject       String
  message       String         @db.Text
  sentTo        Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[] @relation("AnnouncementNotifications")
}
