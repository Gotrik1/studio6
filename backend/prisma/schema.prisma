// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================================================================
// Core Models: User, Team, Tournament, Match
// ==============================================================================

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String
  passwordHash   String
  avatar         String?
  xp             Int       @default(0)
  role           String    @default("Игрок")
  status         String    @default("Активен")
  dateOfBirth    DateTime?
  location       String?
  mainSport      String?
  preferredSports String[]
  isVerified     Boolean   @default(false)
  telegram       String?
  discord        String?
  lastOnline     DateTime? @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teamsAsCaptain       Team[]             @relation("Captain")
  teamsAsMember        Team[]             @relation("TeamMembers")
  organizedTournaments Tournament[]       @relation("Organizer")
  judgedMatches        Match[]            @relation("Referee")
  createdTeams         Team[]             @relation("Creator")
  sentFriendRequests   FriendRequest[]    @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[]  @relation("ReceivedFriendRequests")
  friends              User[]             @relation("Friends")
  friendsOf            User[]             @relation("Friends")
  sentMessages         Message[]          @relation("SentMessages")
  teamApplications     TeamApplication[]
  coaching             User[]             @relation("Coach")
  coach                User?              @relation("Coach", fields: [coachId], references: [id])
  coachId              String?
  coachProfile         CoachProfile?
  careerHistory        CareerHistory[]
  notifications        Notification[]
  organizedPromotions  Promotion[]
  createdPlaygrounds   Playground[]
  reviews              PlaygroundReview[]
  reportsAsReporter    Report[]           @relation("Reporter")
  reportsAsReported    Report[]           @relation("ReportedUser")
  reportsAsResolver    Report[]           @relation("Resolver")
  achievements         UserAchievement[]
  trainingLogs         TrainingLog[]
  createdLfgLobbies    LfgLobby[]         @relation("CreatedLfgLobbies")
  joinedLfgLobbies     LfgLobby[]         @relation("JoinedLfgLobbies")
  measurements         Measurement[]
  sentTrainingProposals   TrainingProposal[] @relation("SentTrainingProposals")
  receivedTrainingProposals TrainingProposal[] @relation("ReceivedTrainingProposals")
  pollVotes            PollVote[]
  inventory            InventoryItem[]
  foodLog              FoodLogEntry[]
  chats                Chat[]
}

model Team {
  id               String            @id @default(cuid())
  name             String
  slug             String            @unique
  logo             String?
  dataAiHint       String?
  motto            String?
  description      String?
  game             String
  rank             Int               @default(999)
  wins             Int               @default(0)
  losses           Int               @default(0)
  draws            Int               @default(0)
  seekingSponsorship Boolean           @default(false)
  homePlaygroundId String?
  
  goals            String?

  captain   User   @relation("Captain", fields: [captainId], references: [id])
  captainId String
  creator   User   @relation("Creator", fields: [creatorId], references: [id])
  creatorId String
  members   User[] @relation("TeamMembers")

  tournaments          Tournament[]
  matchesAsTeam1       Match[]             @relation("Team1")
  matchesAsTeam2       Match[]             @relation("Team2")
  events               MatchEvent[]
  applications         TeamApplication[]
  sponsors             Sponsor[]
  practices            TeamPractice[]
  leagues              LeagueTeam[]
  chat                 Chat?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tournament {
  id                      String                    @id @default(cuid())
  name                    String
  slug                    String                    @unique
  description             String?
  game                    String
  type                    String
  format                  String
  category                String
  location                String
  participantCount        Int
  prizePool               String?
  rules                   String?
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  status                  String
  bannerImage             String?
  bannerImageHint         String?

  organizer               User                      @relation("Organizer", fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
  judges                  User[]
  sponsors                Sponsor[]
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  media                   TournamentMedia[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Match {
  id             String      @id @default(cuid())
  team1          Team        @relation("Team1", fields: [team1Id], references: [id])
  team1Id        String
  team2          Team        @relation("Team2", fields: [team2Id], references: [id])
  team2Id        String
  team1Score     Int?
  team2Score     Int?
  status         MatchStatus
  scheduledAt    DateTime
  finishedAt     DateTime?
  round          Int?
  disputeReason  String?
  disputeOpenedAt DateTime?
  resolution     String?
  refereeName    String?
  playgroundId   String?
  location       String?
  
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  events       MatchEvent[]
  referee      User?       @relation("Referee", fields: [refereeId], references: [id])
  refereeId    String?

  league League? @relation(fields: [leagueId], references: [id])
  leagueId String?
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

// ==============================================================================
// Relational & Supporting Models
// ==============================================================================

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([fromId, toId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model TeamApplication {
  id           String      @id @default(cuid())
  team         Team        @relation(fields: [teamId], references: [id])
  teamId       String
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  
  // This is a special field for tournament applications
  tournamentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teamId, userId, tournamentId])
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}


model MatchEvent {
  id        String      @id @default(cuid())
  match     Match       @relation(fields: [matchId], references: [id])
  matchId   String
  team      Team        @relation(fields: [teamId], references: [id])
  teamId    String
  player    User?       @relation(fields: [playerId], references: [id])
  playerId  String?
  type      MatchEventType
  timestamp DateTime
  metadata  Json?
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  SHOT
  SHOT_ON_TARGET
  CORNER
  FOUL
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
}

model CareerHistory {
    id        String @id @default(cuid())
    user      User @relation(fields: [userId], references: [id])
    userId    String
    teamName  String
    period    String
    role      String
    review    String
    createdAt DateTime @default(now())
}


// ==============================================================================
// Gamification & Social
// ==============================================================================

model Achievement {
  id          String            @id @default(cuid())
  name        String            @unique
  description String
  icon        String
  users       UserAchievement[]
}

model UserAchievement {
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@id([userId, achievementId])
}

model Notification {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  message   String
  href      String?
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  NEW_MESSAGE
  ANNOUNCEMENT
  DISPUTE_RESOLVED
}

model Chat {
  id           String      @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]
  messages     Message[]
  team         Team?       @relation(fields: [teamId], references: [id])
  teamId       String?     @unique
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

enum ChatType {
  PRIVATE
  GROUP
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation("SentMessages", fields: [authorId], references: [id])
  authorId  String
}


// ==============================================================================
// Playgrounds
// ==============================================================================

model Playground {
  id             String             @id @default(cuid())
  name           String
  address        String
  type           String
  surface        String
  coverImage     String?
  coverImageHint String?
  features       String[]
  rating         Float
  checkIns       Int                @default(0)
  status         PlaygroundStatus   @default(PENDING_MODERATION)

  creator   User               @relation(fields: [creatorId], references: [id])
  creatorId String
  reviews   PlaygroundReview[]
  reports   PlaygroundReport[]
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}


// ==============================================================================
// Admin & Moderation
// ==============================================================================

model Report {
  id             String   @id @default(cuid())
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  resolution     String?

  reporter       User @relation("Reporter", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User @relation("ReportedUser", fields: [reportedUserId], references: [id])
  reportedUserId String
  resolver       User? @relation("Resolver", fields: [resolverId], references: [id])
  resolverId     String?

  createdAt DateTime @default(now())
  resolvedAt DateTime?
}

model PlaygroundReport {
    id           String   @id @default(cuid())
    playground   Playground @relation(fields: [playgroundId], references: [id])
    playgroundId String
    reporter     User @relation(fields: [reporterId], references: [id])
    reporterId   String
    category     String
    comment      String
    severity     String
    summary      String
    status       ReportStatus @default(PENDING)

    createdAt DateTime @default(now())
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

// ==============================================================================
// Sponsorship & Monetization
// ==============================================================================

model Sponsor {
  id           String   @id @default(cuid())
  name         String   @unique
  logo         String?
  logoHint     String?
  description  String
  profileUrl   String   @unique
  interests    String[]
  teams        Team[]
  tournaments  Tournament[]
  promotions   Promotion[]
}

model Promotion {
    id            String @id @default(cuid())
    name          String
    description   String
    prize         String
    cost          String
    imageDataUri  String
    imageHint     String
    endDate       String
    organizer     User @relation(fields: [organizerId], references: [id])
    organizerId   String
    sponsor       Sponsor? @relation(fields: [sponsorId], references: [id])
    sponsorId     String?
    
    createdAt DateTime @default(now())
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)
}

// ==============================================================================
// Training & Physical Prep
// ==============================================================================

model TrainingProgram {
  id            String          @id @default(cuid())
  name          String
  description   String
  goal          String // e.g., "Набор массы", "Снижение веса"
  daysPerWeek   Int
  splitType     String // e.g., "Full-body", "Split"
  author        String // "ProDvor Team", "Coach Anna", "ProDvor AI", or user name
  coverImage    String
  coverImageHint String
  isAiGenerated Boolean         @default(false)
  
  weeklySplit   WorkoutDay[]
  proposals     TrainingProposal[]
}

model WorkoutDay {
  id        String   @id @default(cuid())
  program   TrainingProgram @relation(fields: [programId], references: [id])
  programId String
  day       Int // Day of the week (1-7)
  title     String
  exercises WorkoutExercise[]
}

model WorkoutExercise {
  id                      String   @id @default(cuid())
  workoutDay              WorkoutDay @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model Exercise {
  id             String          @id @default(cuid())
  name           String          @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  loggedExercises LoggedExercise[]
}


model TrainingLog {
  id          String           @id @default(cuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  workoutName String?
  status      TrainingLogStatus @default(PLANNED)
  mood        Mood?
  notes       String?
  coachNotes  String?

  exercises LoggedExercise[]
}

enum TrainingLogStatus {
  COMPLETED
  PLANNED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

model LoggedExercise {
  id              String      @id @default(cuid())
  trainingLog     TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId   String
  exercise        Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId      String
  notes           String?
  sets            LoggedSet[]
}

model LoggedSet {
  id               String          @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean         @default(false)
}

// ==============================================================================
// Misc Features
// ==============================================================================

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

model LfgLobby {
  id            String         @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  playgroundId  String?
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  status        LfgLobbyStatus @default(OPEN)

  creatorId String
  creator   User   @relation("CreatedLfgLobbies", fields: [creatorId], references: [id])
  players   User[] @relation("JoinedLfgLobbies")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LfgLobbyType {
  GAME
  TRAINING
}

model Challenge {
  id            String          @id @default(cuid())
  title         String
  description   String
  wager         Int
  status        ChallengeStatus @default(OPEN)
  result        String?
  
  discipline    Sport @relation(fields: [disciplineId], references: [id])
  disciplineId  String
  
  creator       User   @relation(fields: [creatorId], references: [id])
  creatorId     String
  opponent      User?  @relation(fields: [opponentId], references: [id])
  opponentId    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Sport {
    id String @id @unique
    name String
    icon String
    category String
    challenges Challenge[]
}

model MedicalPartner {
  id              String   @id @default(cuid())
  name            String
  specialization  String
  contact         String
  avatar          String?
  avatarHint      String?
  tournaments     Tournament[]
}

model Measurement {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  weight    Float
  bodyFat   Float?
  chest     Float?
  waist     Float?
  hips      Float?
  biceps    Float?
  thigh     Float?
}

model TrainingProposal {
  id          String   @id @default(cuid())
  from        User     @relation("SentTrainingProposals", fields: [fromId], references: [id])
  fromId      String
  to          User     @relation("ReceivedTrainingProposals", fields: [toId], references: [id])
  toId        String
  sport       String
  date        DateTime
  program     TrainingProgram? @relation(fields: [programId], references: [id])
  programId   String?
  comment     String?
  status      TrainingProposalStatus @default(PENDING)

  createdAt DateTime @default(now())
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Poll {
    id          String @id @default(cuid())
    title       String
    question    String
    options     PollOption[]
    authorId    String?
    author      User? @relation(fields: [authorId], references: [id])
    isActive    Boolean @default(true)
    createdAt   DateTime @default(now())
    votes       PollVote[]
}

model PollOption {
    id      String @id @default(cuid())
    text    String
    poll    Poll @relation(fields: [pollId], references: [id])
    pollId  String
    votes   PollVote[]
}

model PollVote {
    id              String @id @default(cuid())
    user            User @relation(fields: [userId], references: [id])
    userId          String
    poll            Poll @relation(fields: [pollId], references: [id])
    pollId          String
    pollOption      PollOption @relation(fields: [pollOptionId], references: [id])
    pollOptionId    String
    createdAt       DateTime @default(now())
    @@unique([userId, pollId])
}


model Quest {
    id          String @id @default(cuid())
    title       String
    description String
    reward      Int
    goal        Int
    href        String
    type        QuestType
    createdAt   DateTime @default(now())
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

model InventoryItem {
    id             String   @id @default(cuid())
    user           User     @relation(fields: [userId], references: [id])
    userId         String
    name           String
    category       String
    type           String
    purchaseDate   DateTime
    lifespanMonths Int
    image          String?
    imageHint      String?
    createdAt      DateTime @default(now())
}

model FoodItem {
    id          String   @id @default(cuid())
    name        String   @unique
    category    String
    image       String?
    imageHint   String?
    calories    Float
    protein     Float
    fat         Float
    carbs       Float
    description String?
    logEntries  FoodLogEntry[]
}

model FoodLogEntry {
    id          String @id @default(cuid())
    user        User @relation(fields: [userId], references: [id])
    userId      String
    foodItem    FoodItem @relation(fields: [foodItemId], references: [id])
    foodItemId  String
    grams       Int
    meal        String
    createdAt   DateTime @default(now())
}

model TournamentMedia {
  id          String      @id @default(cuid())
  tournament  Tournament  @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type        String // "IMAGE", "VIDEO", "AUDIO"
  src         String
  description String?
  hint        String?
  createdAt   DateTime @default(now())
}

model TournamentAnnouncement {
  id            String     @id @default(cuid())
  tournament    Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId  String
  sender        User       @relation(fields: [senderId], references: [id])
  senderId      String
  subject       String
  message       String
  sentTo        Int
  createdAt     DateTime   @default(now())
}

model Activity {
    id            String @id @default(cuid())
    type          ActivityType
    userId        String
    user          User @relation(fields: [userId], references: [id])
    playgroundId  String?
    metadata      Json?
    createdAt     DateTime @default(now())
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model League {
    id String @id @default(cuid())
    name String
    description String
    game String
    image String?
    imageHint String?
    teams LeagueTeam[]
    matches Match[]
}

model LeagueTeam {
    league   League @relation(fields: [leagueId], references: [id])
    leagueId String
    team     Team @relation(fields: [teamId], references: [id])
    teamId   String
    played   Int @default(0)
    wins     Int @default(0)
    losses   Int @default(0)
    draws    Int @default(0)
    points   Int @default(0)
    @@id([leagueId, teamId])
}

