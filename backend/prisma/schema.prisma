// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================================================================
// Enums
// =================================================================

enum Role {
  ADMIN // Администратор
  MODERATOR // Модератор
  JUDGE // Судья
  ORGANIZER // Организатор
  COACH // Тренер
  MANAGER // Менеджер
  SPONSOR // Спонсор
  PLAYER // Игрок
  CAPTAIN // Капитан
  FAN // Болельщик
}

enum UserStatus {
  ACTIVE
  BANNED
  DEACTIVATED
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

enum TournamentType {
  TEAM
  INDIVIDUAL
}

enum TournamentFormat {
  SINGLE_ELIMINATION
  ROUND_ROBIN
  GROUPS
}

enum ReportSeverity {
  LOW
  MEDIUM
  HIGH
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TEAM_LEFT
  TOURNAMENT_REGISTERED
  TOURNAMENT_WON
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

// =================================================================
// Core Models
// =================================================================

model User {
  id                       String                @id @default(cuid())
  name                     String
  email                    String                @unique
  passwordHash             String
  avatar                   String?
  role                     Role                  @default(PLAYER)
  status                   UserStatus            @default(ACTIVE)
  xp                       Int                   @default(0)
  location                 String?
  mainSport                String?
  isVerified               Boolean               @default(false)
  dateOfBirth              DateTime?
  preferredSports          String[]
  telegram                 String?
  discord                  String?
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
  organizedTournaments     Tournament[]          @relation("Organizer")
  teamsAsMember            Team[]                @relation("TeamMembers")
  teamsAsCaptain           Team[]                @relation("TeamCaptain")
  teamsAsCreator           Team[]                @relation("TeamCreator")
  organizedPromotions      Promotion[]
  gallery                  GalleryItem[]
  careerHistory            CareerHistoryItem[]
  judgedMatches            Match[]               @relation("JudgedMatches")
  coaching                 User[]                @relation("CoachToPlayer")
  coachId                  String?
  coach                    User?                 @relation("CoachToPlayer", fields: [coachId], references: [id])
  challengesAsCreator      Challenge[]           @relation("CreatorChallenges")
  challengesAsOpponent     Challenge[]           @relation("OpponentChallenges")
  friends                  User[]                @relation("Friends")
  friendOf                 User[]                @relation("Friends")
  sentFriendRequests       FriendRequest[]       @relation("sentFriendRequests")
  receivedFriendRequests   FriendRequest[]       @relation("receivedFriendRequests")
  createdPlaygrounds       Playground[]          @relation("PlaygroundCreator")
  playgroundReviews        PlaygroundReview[]
  reportedPlaygrounds      PlaygroundReport[]    @relation("PlaygroundReporter")
  resolvedPlaygroundReport PlaygroundReport[]    @relation("PlaygroundReportResolver")
  reportsSent              Report[]              @relation("Reporter")
  reportsReceived          Report[]              @relation("ReportedUser")
  reportsResolved          Report[]              @relation("Resolver")
  trainingLogs             TrainingLog[]
  measurements             Measurement[]
  foodLogEntries           FoodLogEntry[]
  inventoryItems           InventoryItem[]
  activities               Activity[]
  sentTrainingProposals    TrainingProposal[]    @relation("SentProposals")
  receivedTrainingProposals TrainingProposal[]    @relation("ReceivedProposals")
  pollVotes                PollVote[]
  notifications            Notification[]
  tournamentApplications   TeamApplication[]
  tournamentAnnouncements  TournamentAnnouncement[]
}

model Team {
  id                   String                @id @default(cuid())
  name                 String
  slug                 String                @unique
  game                 String
  motto                String?
  logo                 String?
  dataAiHint           String?
  rank                 Int                   @default(0)
  wins                 Int                   @default(0)
  losses               Int                   @default(0)
  draws                Int                   @default(0)
  seekingSponsorship   Boolean               @default(false)
  description          String?
  goals                String?
  homePlaygroundId     String?
  homePlayground       Playground?           @relation(fields: [homePlaygroundId], references: [id])
  creator              User                  @relation("TeamCreator", fields: [creatorId], references: [id])
  creatorId            String
  captain              User                  @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId            String
  members              User[]                @relation("TeamMembers")
  tournaments          Tournament[]          @relation("TournamentTeams")
  sponsors             Sponsor[]             @relation("TeamSponsors")
  matchesAsTeam1       Match[]               @relation("Team1Matches")
  matchesAsTeam2       Match[]               @relation("Team2Matches")
  chat                 Chat?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  teamApplications     TeamApplication[]
  leagueTeams          LeagueTeam[]
  practices            TeamPractice[]
}

model Match {
  id                String       @id @default(cuid())
  team1             Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id           String
  team2             Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id           String
  team1Score        Int?
  team2Score        Int?
  status            MatchStatus
  tournamentId      String?
  tournament        Tournament?  @relation(fields: [tournamentId], references: [id])
  events            Json[] // Simplified for now
  scheduledAt       DateTime?
  startedAt         DateTime?
  finishedAt        DateTime?
  location          String?
  playgroundId      String?
  playground        Playground?  @relation(fields: [playgroundId], references: [id])
  judges            User[]       @relation("JudgedMatches")
  disputeReason     String?
  disputeOpenedAt   DateTime?
  resolution        String?
  refereeName       String?      // Simple field for now
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  leagueId          String?
  league            League?      @relation(fields: [leagueId], references: [id])
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  description             String?
  status                  TournamentStatus         @default(REGISTRATION)
  game                    String
  type                    TournamentType
  format                  TournamentFormat
  category                String
  location                String
  participantCount        Int
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  organizer               User                     @relation("Organizer", fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]                   @relation("TournamentTeams")
  matches                 Match[]
  announcements           TournamentAnnouncement[]
  sponsors                Sponsor[]                @relation("TournamentSponsors")
  judges                  User[]                   @relation("TournamentJudges")
  medicalPartners         MedicalPartner[]
  media                   TournamentMedia[]
  applications            TeamApplication[]
}

model Playground {
  id          String             @id @default(cuid())
  name        String
  address     String
  type        String
  coverImage  String?
  coverImageHint String?
  surface     String
  features    String[]
  rating      Float              @default(0)
  checkIns    Int                @default(0)
  status      ReportStatus       @default(PENDING) // Re-using ReportStatus
  creator     User               @relation("PlaygroundCreator", fields: [creatorId], references: [id])
  creatorId   String
  reviews     PlaygroundReview[]
  reports     PlaygroundReport[]
  matches     Match[]
  lobbies     LfgLobby[]
  homeForTeams Team[]
}

model LfgLobby {
  id             String         @id @default(cuid())
  type           LfgLobbyType
  creator        User           @relation(fields: [creatorId], references: [id])
  creatorId      String
  sport          String
  location       String
  playgroundId   String?
  playground     Playground?    @relation(fields: [playgroundId], references: [id])
  startTime      DateTime
  endTime        DateTime
  playersNeeded  Int
  comment        String
  status         LfgLobbyStatus @default(OPEN)
  players        User[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String?
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String         @id @default(cuid())
  playground   Playground     @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User           @relation("PlaygroundReporter", fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     ReportSeverity
  summary      String
  status       ReportStatus   @default(PENDING)
  resolver     User?          @relation("PlaygroundReportResolver", fields: [resolverId], references: [id])
  resolverId   String?
  resolution   String?
  resolvedAt   DateTime?
  createdAt    DateTime       @default(now())
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("sentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("receivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@unique([fromId, toId])
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  wager        Int
  creator      User            @relation("CreatorChallenges", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("OpponentChallenges", fields: [opponentId], references: [id])
  opponentId   String?
  status       ChallengeStatus @default(OPEN)
  result       String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model Sport {
  id         String      @id @unique
  name       String
  icon       String
  category   String
  challenges Challenge[]
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  createdAt    DateTime              @default(now())
}

model Chat {
  id            String    @id @default(cuid())
  name          String?
  type          String // "GROUP" or "DIRECT"
  teamId        String?   @unique
  team          Team?     @relation(fields: [teamId], references: [id])
  participants  User[]
  messages      Message[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  text      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  createdAt DateTime @default(now())
}

// =================================================================
// Extended Features
// =================================================================

model TrainingProgram {
  id              String           @id @default(cuid())
  name            String
  description     String
  goal            String // "mass_gain", "fat_loss", "strength"
  daysPerWeek     Int
  splitType       String // "fullbody", "split"
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean          @default(false)
  weeklySplit     WorkoutDay[]
  proposals       TrainingProposal[]
}

model WorkoutDay {
  id                String              @id @default(cuid())
  trainingProgram   TrainingProgram     @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String     @id @default(cuid())
  workoutDay              WorkoutDay @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?   @default(false)
  technique               String?
}

model TrainingLog {
  id          String           @id @default(cuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  workoutName String
  status      String // "completed", "skipped", "planned"
  mood        String?
  notes       String?
  coachNotes  String?
  exercises   LoggedExercise[]
}

model LoggedExercise {
  id            String      @id @default(cuid())
  trainingLog   TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId String
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  notes         String?
  sets          LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String
  plannedWeight    String
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Int?
  isCompleted      Boolean
}

model Exercise {
  id              String           @id @default(cuid())
  name            String
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json
  commonMistakes  Json
  alternatives    Json
  loggedExercises LoggedExercise[]
}

model Measurement {
  id       String    @id @default(cuid())
  user     User      @relation(fields: [userId], references: [id])
  userId   String
  date     DateTime
  weight   Float
  bodyFat  Float?
  chest    Float?
  waist    Float?
  hips     Float?
  biceps   Float?
  thigh    Float?
}

model NutritionPlan {
  id             String    @id @default(cuid())
  userId         String    @unique
  dailyCalories  Int
  protein        Int
  fat            Int
  carbs          Int
  mealPlan       Json
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String         @unique
  category    String
  image       String?
  imageHint   String?
  calories    Int
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  foodItem    FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId  String
  grams       Int
  meal        String
  createdAt   DateTime @default(now())
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model TrainingProposal {
  id        String           @id @default(cuid())
  from      User             @relation("SentProposals", fields: [fromId], references: [id])
  fromId    String
  to        User             @relation("ReceivedProposals", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  comment   String?
  program   TrainingProgram? @relation(fields: [programId], references: [id])
  programId String?
  status    String           @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Poll {
  id        String      @id @default(cuid())
  title     String
  question  String
  isActive  Boolean     @default(true)
  options   PollOption[]
  votes     PollVote[]
  createdAt DateTime    @default(now())
}

model PollOption {
  id        String     @id @default(cuid())
  poll      Poll       @relation(fields: [pollId], references: [id])
  pollId    String
  text      String
  votes     PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String

  @@unique([userId, pollId])
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

model Activity {
  id           String       @id @default(cuid())
  type         ActivityType
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  metadata     Json
  timestamp    DateTime     @default(now())
  playgroundId String?
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  type      String
  isRead    Boolean  @default(false)
  href      String?
  createdAt DateTime @default(now())
}

// =================================================================
// Gamification & Economy
// =================================================================

model StoreItem {
  id          String  @id @default(cuid())
  name        String  @unique
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)
}

model Promotion {
  id           String   @id @default(cuid())
  name         String
  description  String
  prize        String
  cost         String
  imageDataUri String
  imageHint    String
  organizer    User     @relation(fields: [organizerId], references: [id])
  organizerId  String
  sponsorId    String?
  sponsor      Sponsor? @relation(fields: [sponsorId], references: [id])
  endDate      DateTime
  createdAt    DateTime @default(now())
}

model Sponsor {
  id           String       @id @default(cuid())
  name         String       @unique
  logo         String?
  logoHint     String?
  description  String
  profileUrl   String
  interests    String[]
  teams        Team[]       @relation("TeamSponsors")
  promotions   Promotion[]
  tournaments  Tournament[] @relation("TournamentSponsors")
}

// =================================================================
// Administration & Moderation
// =================================================================

model Report {
  id               String       @id @default(cuid())
  reporter         User         @relation("Reporter", fields: [reporterId], references: [id])
  reporterId       String
  reportedUser     User         @relation("ReportedUser", fields: [reportedUserId], references: [id])
  reportedUserId   String
  reason           String
  context          String
  status           ReportStatus @default(PENDING)
  resolver         User?        @relation("Resolver", fields: [resolverId], references: [id])
  resolverId       String?
  resolution       String?
  resolvedAt       DateTime?
  createdAt        DateTime     @default(now())
}

// =================================================================
// Tournament Management
// =================================================================

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int    @default(0)
  wins     Int    @default(0)
  losses   Int    @default(0)
  draws    Int    @default(0)
  points   Int    @default(0)

  @@unique([leagueId, teamId])
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
}

model MedicalPartner {
  id           String       @id @default(cuid())
  name         String
  specialization String
  contact      String
  avatar       String?
  avatarHint   String?
  tournaments  Tournament[]
}

model TournamentMedia {
  id          String     @id @default(cuid())
  tournament  Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type        String // "IMAGE", "VIDEO", "AUDIO"
  src         String
  description String?
  hint        String?
  createdAt   DateTime   @default(now())
}

// =================================================================
// User Profile Extensions
// =================================================================

model CareerHistoryItem {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model GalleryItem {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  src        String
  alt        String
  dataAiHint String
  createdAt  DateTime @default(now())
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}
