// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String                    @id @default(cuid())
  email                     String                    @unique
  name                      String
  passwordHash              String
  avatar                    String?
  role                      String                    @default("Игрок")
  status                    String                    @default("Активен")
  xp                        Int                       @default(0)
  location                  String?
  mainSport                 String?
  isVerified                Boolean                   @default(false)
  dateOfBirth               DateTime?
  preferredSports           String[]
  telegram                  String?
  discord                   String?
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  teamsAsCaptain            Team[]                    @relation("CaptainToTeam")
  teamsAsCreator            Team[]                    @relation("CreatorToTeam")
  teamsAsMember             Team[]                    @relation("TeamMembers")
  organizedTournaments      Tournament[]
  organizedPromotions       Promotion[]
  createdPlaygrounds        Playground[]
  reviews                   PlaygroundReview[]
  reportsAsReporter         Report[]                  @relation("Reporter")
  reportsAsReported         Report[]                  @relation("Reported")
  resolvedReports           Report[]                  @relation("Resolver")
  messages                  Message[]
  chats                     Chat[]
  achievements              AchievementUnlock[]
  friends                   User[]                    @relation("Friends")
  friendsOf                 User[]                    @relation("Friends")
  friendRequestsSent        FriendRequest[]           @relation("SentRequests")
  friendRequestsReceived    FriendRequest[]           @relation("ReceivedRequests")
  challengesAsCreator       Challenge[]               @relation("ChallengeCreator")
  challengesAsOpponent      Challenge[]               @relation("ChallengeOpponent")
  coachProfile              CoachProfile?
  coaching                  User[]                    @relation("CoachToStudent")
  coachedBy                 User?                     @relation("CoachToStudent", fields: [coachId], references: [id])
  coachId                   String?
  judgedMatches             Match[]                   @relation("RefereeToMatch")
  careerHistory             CareerHistoryItem[]
  gallery                   GalleryItem[]
  inventory                 InventoryItem[]
  measurements              Measurement[]
  foodLogEntries            FoodLogEntry[]
  trainingLogs              TrainingLog[]
  assignedTrainingPrograms  UserTrainingProgram[]
  trainingProposalsSent     TrainingProposal[]        @relation("SentTrainingProposals")
  trainingProposalsReceived TrainingProposal[]        @relation("ReceivedTrainingProposals")
  pollVotes                 PollVote[]
  resolvedPlaygroundReports PlaygroundReport[]        @relation("PlaygroundReportResolver")
  submittedPlaygroundReports PlaygroundReport[]        @relation("PlaygroundReporter")
}

model Team {
  id                   String              @id @default(cuid())
  name                 String
  slug                 String              @unique
  motto                String?
  logo                 String?
  dataAiHint           String?
  game                 String
  rank                 Int                 @default(0)
  wins                 Int                 @default(0)
  losses               Int                 @default(0)
  draws                Int                 @default(0)
  captain              User                @relation("CaptainToTeam", fields: [captainId], references: [id])
  captainId            String
  creator              User                @relation("CreatorToTeam", fields: [creatorId], references: [id])
  creatorId            String
  members              User[]              @relation("TeamMembers")
  tournaments          Tournament[]
  homePlaygroundId     String?
  seekingSponsorship   Boolean             @default(false)
  sponsors             Sponsor[]
  applications         TeamApplication[]
  matchesAsTeam1       Match[]             @relation("Team1Matches")
  matchesAsTeam2       Match[]             @relation("Team2Matches")
  chat                 Chat?
  practices            TeamPractice[]
  careerHistory        CareerHistoryItem[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model Match {
  id                String       @id @default(cuid())
  team1             Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id           String
  team2             Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id           String
  team1Score        Int?
  team2Score        Int?
  status            MatchStatus
  scheduledAt       DateTime
  finishedAt        DateTime?
  tournamentId      String?
  tournament        Tournament?  @relation(fields: [tournamentId], references: [id])
  leagueId          String?
  league            League?      @relation(fields: [leagueId], references: [id])
  playgroundId      String?
  location          String?
  disputeReason     String?
  disputeOpenedAt   DateTime?
  resolution        String?
  referee           User?        @relation("RefereeToMatch", fields: [refereeId], references: [id])
  refereeId         String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Tournament {
  id                      String                     @id @default(cuid())
  name                    String
  slug                    String                     @unique
  game                    String
  description             String?
  status                  TournamentStatus
  type                    TournamentType
  format                  TournamentFormat
  category                String
  location                String
  participantCount        Int
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  organizer               User                       @relation(fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
  announcements           TournamentAnnouncement[]
  sponsors                Sponsor[]                  @relation("TournamentSponsors")
  judges                  User[]
  medicalPartners         MedicalPartner[]
  media                   TournamentMedia[]
  applications            TeamApplication[]
  createdAt               DateTime                   @default(now())
  updatedAt               DateTime                   @updatedAt
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
}

enum TournamentType {
  team
  individual
}

enum TournamentFormat {
  single_elimination
  round_robin
  groups
}

model Playground {
  id                   String               @id @default(cuid())
  name                 String
  address              String
  type                 String
  surface              String
  features             String[]
  coverImage           String?
  coverImageHint       String?
  rating               Float
  checkIns             Int
  status               PlaygroundStatus
  creator              User                 @relation(fields: [creatorId], references: [id])
  creatorId            String
  reviews              PlaygroundReview[]
  reports              PlaygroundReport[]
  activities           Activity[]
  practices            TeamPractice[]
  lobbies              LfgLobby[]
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

model LfgLobby {
  id             String       @id @default(cuid())
  creator        User         @relation(fields: [creatorId], references: [id])
  creatorId      String
  sport          String
  location       String
  comment        String
  type           LfgLobbyType
  playersNeeded  Int
  startTime      DateTime
  endTime        DateTime
  status         LfgLobbyStatus @default(OPEN)
  playgroundId   String?
  playground     Playground?  @relation(fields: [playgroundId], references: [id])
  players        User[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String           @id @default(cuid())
  playground   Playground       @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  playgroundId String
  reporter     User             @relation("PlaygroundReporter", fields: [reporterId], references: [id], onDelete: Cascade)
  reporterId   String
  category     String
  comment      String
  severity     ReportSeverity
  summary      String
  status       ReportStatus     @default(PENDING)
  resolver     User?            @relation("PlaygroundReportResolver", fields: [resolverId], references: [id], onDelete: SetNull)
  resolverId   String?
  resolution   String?
  resolvedAt   DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

enum ReportSeverity {
  low
  medium
  high
}

model Challenge {
  id            String          @id @default(cuid())
  title         String
  description   String
  creator       User            @relation("ChallengeCreator", fields: [creatorId], references: [id])
  creatorId     String
  opponent      User?           @relation("ChallengeOpponent", fields: [opponentId], references: [id])
  opponentId    String?
  discipline    Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId  String
  wager         Int             @default(0)
  status        ChallengeStatus
  result        String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

model Activity {
  id           String      @id @default(cuid())
  type         ActivityType
  metadata     Json
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  playground   Playground? @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  playgroundId String?
  createdAt    DateTime    @default(now())
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime @default(now())
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  messages     Message[]
  participants User[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum ChatType {
  DIRECT
  GROUP
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Report {
  id                 String       @id @default(cuid())
  reporter           User         @relation("Reporter", fields: [reporterId], references: [id])
  reporterId         String
  reportedUser       User         @relation("Reported", fields: [reportedUserId], references: [id])
  reportedUserId     String
  reason             String
  context            String
  status             ReportStatus @default(PENDING)
  resolver           User?        @relation("Resolver", fields: [resolverId], references: [id])
  resolverId         String?
  resolution         String?
  resolvedAt         DateTime?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model Achievement {
  id          String              @id @default(cuid())
  name        String
  description String
  icon        String
  unlocks     AchievementUnlock[]
}

model AchievementUnlock {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  experience     String   @default("Нет данных")
  tags           String[]
  rating         Float    @default(5.0)
  price          Decimal  @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Sponsor {
  id          String       @id @default(cuid())
  name        String
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  website     String
  teams       Team[]
  promotions  Promotion[]
  tournaments Tournament[] @relation("TournamentSponsors")
}

model Promotion {
  id            String   @id @default(cuid())
  name          String
  description   String
  prize         String
  imageDataUri  String
  imageHint     String
  endDate       DateTime
  cost          String
  organizer     User     @relation(fields: [organizerId], references: [id])
  organizerId   String
  sponsor       Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId     String?
  createdAt     DateTime @default(now())
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int    @default(0)
  wins     Int    @default(0)
  draws    Int    @default(0)
  losses   Int    @default(0)
  points   Int    @default(0)
}

model Sport {
  id       String      @id @unique
  name     String
  icon     String
  category String
  challenges Challenge[]
}

model StoreItem {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CareerHistoryItem {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model GalleryItem {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  src        String
  alt        String
  dataAiHint String
  createdAt  DateTime @default(now())
}

model Measurement {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  weight    Float
  bodyFat   Float?
  chest     Float?
  waist     Float?
  hips      Float?
  biceps    Float?
  thigh     Float?
  createdAt DateTime  @default(now())
}

model TrainingProposal {
  id            String             @id @default(cuid())
  from          User               @relation("SentTrainingProposals", fields: [fromId], references: [id])
  fromId        String
  to            User               @relation("ReceivedTrainingProposals", fields: [toId], references: [id])
  toId          String
  sport         String
  date          DateTime
  comment       String?
  status        TrainingProposalStatus @default(PENDING)
  program       TrainingProgram?   @relation(fields: [programId], references: [id])
  programId     String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String
  category    String
  image       String?
  imageHint   String?
  calories    Int
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  foodItem    FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId  String
  grams       Int
  meal        String
  createdAt   DateTime @default(now())
}

model TrainingProgram {
  id              String                @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean               @default(false)
  weeklySplit     WorkoutDay[]
  assignedTo      UserTrainingProgram[]
  trainingProposals TrainingProposal[]
}

model UserTrainingProgram {
  user              User            @relation(fields: [userId], references: [id])
  userId            String
  trainingProgram   TrainingProgram @relation(fields: [programId], references: [id])
  programId         String
  assignedAt        DateTime        @default(now())
  @@id([userId, programId])
}

model WorkoutDay {
  id                String            @id @default(cuid())
  day               Int
  title             String
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  exercises         ExerciseDetail[]
}

model ExerciseDetail {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model TrainingLog {
  id            String            @id @default(cuid())
  user          User              @relation(fields: [userId], references: [id])
  userId        String
  date          DateTime
  workoutName   String?
  status        TrainingLogStatus
  exercises     LoggedExercise[]
  mood          Mood?
  notes         String?
  coachNotes    String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

enum TrainingLogStatus {
  planned
  completed
  skipped
}

enum Mood {
  great
  good
  ok
  bad
}

model LoggedExercise {
  id              String      @id @default(cuid())
  trainingLog     TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId   String
  exercise        Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId      String
  notes           String?
  isSupersetWithPrevious Boolean?
  sets            LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Int?
  isCompleted      Boolean        @default(false)
}

model Exercise {
  id               String           @id @default(cuid())
  name             String
  description      String
  category         String
  equipment        String
  image            String?
  imageHint        String?
  videoUrl         String?
  techniqueTips    Json
  commonMistakes   Json
  alternatives     Json
  loggedExercises  LoggedExercise[]
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model Poll {
  id        String      @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  votes     PollVote[]
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
}

model PollOption {
  id      String     @id @default(cuid())
  poll    Poll       @relation(fields: [pollId], references: [id])
  pollId  String
  text    String
  votes   PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime   @default(now())
  @@unique([userId, pollId])
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  title        String
  description  String?
  date         DateTime
  createdAt    DateTime   @default(now())
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
}

model TournamentMedia {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type         String // IMAGE, VIDEO, AUDIO
  src          String
  description  String?
  hint         String?
  createdAt    DateTime   @default(now())
}

model MedicalPartner {
  id              String       @id @default(cuid())
  name            String
  specialization  String
  contact         String
  avatar          String?
  avatarHint      String?
  tournaments     Tournament[]
}
