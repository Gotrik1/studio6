// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id @default(cuid())
  name                    String
  email                   String                  @unique
  passwordHash            String
  avatar                  String?
  role                    String                  @default("Игрок")
  status                  String                  @default("Активен")
  xp                      Int                     @default(0)
  location                String?
  mainSport               String?
  isVerified              Boolean                 @default(false)
  dateOfBirth             DateTime?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  teamsAsCaptain          Team[]                  @relation("Captain")
  teamsAsCreator          Team[]                  @relation("Creator")
  teamsAsMember           Team[]                  @relation("TeamMembers")
  organizedTournaments    Tournament[]
  challengesAsCreator     Challenge[]             @relation("Creator")
  challengesAsOpponent    Challenge[]             @relation("Opponent")
  playgroundsCreated      Playground[]
  playgroundsReported     PlaygroundReport[]
  reviews                 PlaygroundReview[]
  lfgCreated              LfgLobby[]
  lfgJoined               LfgLobby[]              @relation("LfgPlayers")
  measurements            Measurement[]
  trainingProposalsSent   TrainingProposal[]      @relation("FromUser")
  trainingProposalsRecv   TrainingProposal[]      @relation("ToUser")
  assignedTrainingLogs    TrainingLog[]
  foodLogEntries          FoodLogEntry[]
  inventoryItems          InventoryItem[]
  friends                 User[]                  @relation("Friends")
  friendOf                User[]                  @relation("Friends")
  sentFriendRequests      FriendRequest[]         @relation("SentRequests")
  receivedFriendRequests  FriendRequest[]         @relation("ReceivedRequests")
  authoredMessages        Message[]
  activities              Activity[]
  organizedPromotions     Promotion[]
  judgedMatches           Match[]                 @relation("JudgedMatches")
  coachProfile            CoachProfile?
  coaching                User[]                  @relation("CoachStudents")
  coach                   User?                   @relation("CoachStudents", fields: [coachId], references: [id])
  coachId                 String?
  pollVotes               PollVote[]
  authoredAnnouncements   TournamentAnnouncement[]
  notifications           Notification[]
  reportsSent             Report[]                @relation("Reporter")
  reportsReceived         Report[]                @relation("ReportedUser")
  reportsResolved         Report[]                @relation("Resolver")
}

model Team {
  id                   String            @id @default(cuid())
  name                 String
  slug                 String            @unique
  game                 String
  motto                String?
  logo                 String?
  dataAiHint           String?
  rank                 Int               @default(0)
  wins                 Int               @default(0)
  losses               Int               @default(0)
  draws                Int               @default(0)
  seekingSponsorship   Boolean           @default(true)
  description          String?
  goals                String?
  homePlaygroundId     String?
  creator              User              @relation("Creator", fields: [creatorId], references: [id])
  creatorId            String
  captain              User              @relation("Captain", fields: [captainId], references: [id])
  captainId            String
  members              User[]            @relation("TeamMembers")
  tournaments          Tournament[]      @relation("TournamentTeams")
  matchesAsTeam1       Match[]           @relation("Team1Matches")
  matchesAsTeam2       Match[]           @relation("Team2Matches")
  leagues              LeagueTeam[]
  applications         TeamApplication[]
  sponsors             Sponsor[]         @relation("TeamSponsors")
  chat                 Chat?
  practices            TeamPractice[]
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
}

model Match {
  id               String      @id @default(cuid())
  team1            Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id          String
  team2            Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id          String
  team1Score       Int?
  team2Score       Int?
  status           MatchStatus @default(PLANNED)
  scheduledAt      DateTime
  finishedAt       DateTime?
  tournamentId     String?
  tournament       Tournament? @relation(fields: [tournamentId], references: [id])
  leagueId         String?
  league           League?     @relation(fields: [leagueId], references: [id])
  playgroundId     String?
  location         String?
  disputeReason    String?
  disputeOpenedAt  DateTime?
  resolution       String?
  referee          User?       @relation("JudgedMatches", fields: [refereeId], references: [id])
  refereeId        String?
  refereeName      String?
  createdAt        DateTime    @default(now())
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  game                    String
  format                  String
  type                    String
  category                String
  location                String
  participantCount        Int
  prizePool               String?
  rules                   String?
  description             String?
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  status                  TournamentStatus         @default(REGISTRATION)
  bannerImage             String?
  bannerImageHint         String?
  organizer               User                     @relation(fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]                   @relation("TournamentTeams")
  matches                 Match[]
  judges                  User[]
  sponsors                Sponsor[]                @relation("TournamentSponsors")
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  teamApplications        TeamApplication[]
  media                   TournamentMedia[]
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
}

model Playground {
  id                   String             @id @default(cuid())
  name                 String
  address              String
  type                 String
  surface              String
  features             String[]
  coverImage           String?
  coverImageHint       String?
  rating               Float              @default(0)
  checkIns             Int                @default(0)
  status               PlaygroundStatus   @default(PENDING_MODERATION)
  creator              User               @relation(fields: [creatorId], references: [id])
  creatorId            String
  reports              PlaygroundReport[]
  reviews              PlaygroundReview[]
  teamPractices        TeamPractice[]
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

model PlaygroundReport {
  id           String         @id @default(cuid())
  playground   Playground     @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User           @relation(fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus
  createdAt    DateTime       @default(now())
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model Challenge {
  id           String         @id @default(cuid())
  title        String
  description  String
  wager        Int
  disciplineId String
  discipline   Sport          @relation(fields: [disciplineId], references: [id])
  status       ChallengeStatus @default(OPEN)
  result       String?
  creator      User           @relation("Creator", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?          @relation("Opponent", fields: [opponentId], references: [id])
  opponentId   String?
  createdAt    DateTime       @default(now())
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model LfgLobby {
  id            String       @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  playgroundId  String?
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  creator       User         @relation(fields: [creatorId], references: [id])
  creatorId     String
  players       User[]       @relation("LfgPlayers")
  createdAt     DateTime     @default(now())
}

enum LfgLobbyType {
  GAME
  TRAINING
}

model Sport {
  id          String      @id @unique
  name        String
  icon        String
  category    String
  challenges  Challenge[]
}

model League {
  id          String        @id @default(cuid())
  name        String
  description String?
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int    @default(0)
  wins     Int    @default(0)
  losses   Int    @default(0)
  draws    Int    @default(0)
  points   Int    @default(0)
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  createdAt    DateTime              @default(now())
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

model CoachProfile {
  id             String  @id @default(cuid())
  user           User    @relation(fields: [userId], references: [id])
  userId         String  @unique
  specialization String
  description    String
  tags           String[]
  rating         Float   @default(5.0)
  price          Float   @default(50.0)
}

model Sponsor {
  id          String       @id @default(cuid())
  name        String
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  teams       Team[]       @relation("TeamSponsors")
  tournaments Tournament[] @relation("TournamentSponsors")
  promotions  Promotion[]
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
  participants User[]
  messages     Message[]
  createdAt    DateTime  @default(now())
}

enum ChatType {
  DIRECT
  GROUP
}

model Message {
  id        String   @id @default(cuid())
  text      String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  message   String
  href      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)
}

model Promotion {
  id            String    @id @default(cuid())
  name          String
  description   String
  prize         String
  cost          String
  imageDataUri  String
  imageHint     String
  endDate       DateTime
  organizer     User      @relation(fields: [organizerId], references: [id])
  organizerId   String
  sponsor       Sponsor?  @relation(fields: [sponsorId], references: [id])
  sponsorId     String?
  createdAt     DateTime  @default(now())
}

model Exercise {
  id              String   @id @default(cuid())
  name            String   @unique
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json
  commonMistakes  Json
  alternatives    Json
}

model TrainingProgram {
  id              String              @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean             @default(false)
  weeklySplit     WorkoutDay[]
  trainingLogs    TrainingLog[]
  trainingProposals TrainingProposal[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  day               Int
  title             String
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model TrainingLog {
  id                 String             @id @default(cuid())
  user               User               @relation(fields: [userId], references: [id])
  userId             String
  trainingProgram    TrainingProgram?   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId  String?
  date               DateTime
  workoutName        String
  status             String             // "planned", "completed", "skipped"
  mood               String?
  notes              String?
  coachNotes         String?
  exercises          LoggedExercise[]
}

model LoggedExercise {
  id            String        @id @default(cuid())
  trainingLog   TrainingLog   @relation(fields: [trainingLogId], references: [id])
  trainingLogId String
  exercise      Exercise      @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  notes         String?
  sets          LoggedSet[]
}

model LoggedSet {
  id                String         @id @default(cuid())
  loggedExercise    LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId  String
  plannedReps       String
  plannedWeight     String
  loggedReps        Int?
  loggedWeight      Float?
  rpe               Int?
  isCompleted       Boolean
}

model Measurement {
  id      String    @id @default(cuid())
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

model TrainingProposal {
  id        String          @id @default(cuid())
  from      User            @relation("FromUser", fields: [fromId], references: [id])
  fromId    String
  to        User            @relation("ToUser", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  comment   String?
  program   TrainingProgram? @relation(fields: [programId], references: [id])
  programId String?
  status    String          @default("PENDING")
  createdAt DateTime        @default(now())
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  isActive  Boolean      @default(true)
  options   PollOption[]
  votes     PollVote[]
  createdAt DateTime     @default(now())
}

model PollOption {
  id        String     @id @default(cuid())
  text      String
  poll      Poll       @relation(fields: [pollId], references: [id])
  pollId    String
  votes     PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@unique([userId, pollId])
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String         @unique
  category    String
  image       String?
  imageHint   String?
  calories    Int
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String
  createdAt  DateTime @default(now())
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
}

model MedicalPartner {
  id           String       @id @default(cuid())
  name         String
  specialization String
  contact      String
  avatar       String?
  avatarHint   String?
  tournaments  Tournament[]
}

model TournamentMedia {
  id          String     @id @default(cuid())
  tournament  Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type        String // IMAGE, VIDEO, AUDIO
  src         String
  description String?
  hint        String?
  createdAt   DateTime   @default(now())
}

model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("Reporter", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportedUser", fields: [reportedUserId], references: [id])
  reportedUserId String
  reason         String
  context        String
  status         ReportStatus @default(PENDING)
  resolver       User?        @relation("Resolver", fields: [resolverId], references: [id])
  resolverId     String?
  resolution     String?
  resolvedAt     DateTime?
  createdAt      DateTime     @default(now())
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model Activity {
  id           String     @id @default(cuid())
  type         ActivityType
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  metadata     Json
  playgroundId String?
  timestamp    DateTime   @default(now())
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}
