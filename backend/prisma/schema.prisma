// /backend/prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ENUMS

enum UserRole {
  ADMINISTRATOR @map("Администратор")
  MODERATOR     @map("Модератор")
  CAPTAIN       @map("Капитан")
  PLAYER        @map("Игрок")
  JUDGE         @map("Судья")
  MANAGER       @map("Менеджер")
  ORGANIZER     @map("Организатор")
  SPONSOR       @map("Спонсор")
  FAN           @map("Болельщик")
  COACH         @map("Тренер")
}

enum UserStatus {
  ACTIVE   @map("Активен")
  BANNED   @map("Забанен")
  PENDING  @map("Ожидает")
  DELETED  @map("Удален")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum TournamentType {
  TEAM
  INDIVIDUAL
}

enum TournamentFormat {
  SINGLE_ELIMINATION
  ROUND_ROBIN
  GROUPS
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
  REJECTED
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum ChatType {
  PRIVATE
  GROUP
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}


// MODELS

model User {
  id                        String                   @id @default(cuid())
  email                     String                   @unique
  name                      String
  passwordHash              String
  avatar                    String?
  role                      UserRole                 @default(PLAYER)
  status                    UserStatus               @default(ACTIVE)
  xp                        Int                      @default(0)
  dateOfBirth               DateTime?
  location                  String?
  mainSport                 String?
  isVerified                Boolean                  @default(false)
  preferredSports           String[]
  telegram                  String?
  discord                   String?
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  teamsAsCaptain            Team[]                   @relation("TeamCaptains")
  teamsAsCreator            Team[]                   @relation("TeamCreators")
  teamsAsMember             Team[]                   @relation("TeamMembers")
  organizedTournaments      Tournament[]
  judgedMatches             Match[]                  @relation("RefereeMatches")
  createdPlaygrounds        Playground[]
  reportsSent               Report[]                 @relation("ReportsSent")
  reportsReceived           Report[]                 @relation("ReportsReceived")
  reportsResolved           Report[]                 @relation("ReportsResolved")
  careerHistory             CareerHistory[]
  coachProfile              CoachProfile?
  coaching                  User[]                   @relation("CoachedBy")
  coachedBy                 User?                    @relation("CoachedBy", fields: [coachId], references: [id])
  coachId                   String?
  sponsorships              Sponsorship[]
  sponsorshipOffers         SponsorshipOffer[]
  measurements              Measurement[]
  trainingProposalsSent     TrainingProposal[]       @relation("ProposalsSent")
  trainingProposalsRcvd     TrainingProposal[]       @relation("ProposalsReceived")
  pollsVoted                PollVote[]
  createdPolls              Poll[]
  achievements              UserAchievement[]
  playgroundReviews         PlaygroundReview[]
  reportedOnPlaygrounds     PlaygroundReport[]
  notifications             Notification[]
  sentAnnouncements         TournamentAnnouncement[]
  createdLobbies            LfgLobby[]               @relation("CreatedLobbies")
  joinedLobbies             LfgLobby[]               @relation("JoinedLobbies")
  inventory                 InventoryItem[]
  foodLog                   FoodLogEntry[]
  trainingLogs              TrainingLog[]
  assignedTrainingPrograms  UserTrainingProgram[]
  friends                   User[]                   @relation("Friends")
  friendOf                  User[]                   @relation("Friends")
  sentFriendRequests        FriendRequest[]          @relation("SentFriendRequests")
  receivedFriendRequests    FriendRequest[]          @relation("ReceivedFriendRequests")
  matchEvents               MatchEvent[]
  teamApplications          TeamApplication[]
  judgedTournaments         Tournament[]             @relation("JudgedTournaments")
  
  @@map("users")
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@unique([fromId, toId])
  @@map("friend_requests")
}

model Team {
  id                 String             @id @default(cuid())
  name               String
  slug               String             @unique
  logo               String?
  dataAiHint         String?
  motto              String?
  description        String?
  game               String
  rank               Int                @default(1)
  wins               Int                @default(0)
  losses             Int                @default(0)
  draws              Int                @default(0)
  seekingSponsorship Boolean            @default(false)
  pitch              String?
  creator            User               @relation("TeamCreators", fields: [creatorId], references: [id])
  creatorId          String
  captain            User               @relation("TeamCaptains", fields: [captainId], references: [id])
  captainId          String
  members            User[]             @relation("TeamMembers")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]            @relation("Team1Matches")
  matchesAsTeam2     Match[]            @relation("Team2Matches")
  chat               Chat?
  practices          TeamPractice[]
  leagueTeams        LeagueTeam[]
  sponsorships       Sponsorship[]      @relation("SponsoredTeams")
  sponsorshipOffers  SponsorshipOffer[]
  applications       TeamApplication[]
  matchEvents        MatchEvent[]
  homePlayground     Playground?        @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  @@map("teams")
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  description           String?
  game                  String
  type                  TournamentType
  format                TournamentFormat
  status                TournamentStatus         @default(REGISTRATION)
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  organizer             User                     @relation(fields: [organizerId], references: [id])
  organizerId           String
  teams                 Team[]
  matches               Match[]
  judges                User[]                   @relation("JudgedTournaments")
  sponsors              Sponsor[]                @relation("SponsoredTournaments")
  medicalPartners       MedicalPartner[]
  announcements         TournamentAnnouncement[]
  media                 TournamentMedia[]
  
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt

  @@map("tournaments")
}

model TournamentMedia {
  id           String       @id @default(cuid())
  tournament   Tournament   @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId String
  type         MediaType
  src          String
  description  String?
  hint         String?
  createdAt    DateTime     @default(now())
}

model Match {
  id                String       @id @default(cuid())
  team1             Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id           String
  team2             Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id           String
  team1Score        Int?
  team2Score        Int?
  status            MatchStatus
  scheduledAt       DateTime
  finishedAt        DateTime?
  tournamentId      String?
  tournament        Tournament?  @relation(fields: [tournamentId], references: [id])
  leagueId          String?
  league            League?      @relation(fields: [leagueId], references: [id])
  referee           User?        @relation("RefereeMatches", fields: [refereeId], references: [id])
  refereeId         String?
  location          String?
  playgroundId      String?
  disputeReason     String?
  disputeOpenedAt   DateTime?
  resolution        String?
  events            MatchEvent[]
  notifications     Notification[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@map("matches")
}

model MatchEvent {
  id        String         @id @default(cuid())
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  team      Team           @relation(fields: [teamId], references: [id])
  teamId    String
  player    User           @relation(fields: [playerId], references: [id])
  playerId  String
  type      MatchEventType
  timestamp DateTime
  metadata  Json?

  @@map("match_events")
}

model Sport {
  id         String      @id @unique
  name       String
  icon       String
  category   String
  challenges Challenge[]

  @@map("sports")
}

model Playground {
  id             String               @id @default(cuid())
  name           String
  address        String
  type           String
  coverImage     String?
  coverImageHint String?
  surface        String
  features       String[]
  rating         Float
  checkIns       Int
  status         PlaygroundStatus     @default(PENDING_MODERATION)
  creator        User                 @relation(fields: [creatorId], references: [id])
  creatorId      String
  reviews        PlaygroundReview[]
  reports        PlaygroundReport[]
  activities     Activity[]
  practices      TeamPractice[]
  residentTeams  Team[]
  lobbies        LfgLobby[]

  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  @@map("playgrounds")
}

model Sponsor {
  id            String         @id @unique
  name          String
  logo          String?
  logoHint      String?
  description   String
  profileUrl    String
  interests     String[]
  tournaments   Tournament[]   @relation("SponsoredTournaments")
  teams         Team[]         @relation("SponsoredTeams")
  promotions    Promotion[]
  sponsorships  Sponsorship[]

  @@map("sponsors")
}

model Promotion {
  id           String    @id @default(cuid())
  name         String
  description  String
  prize        String
  cost         String
  imageDataUri String
  imageHint    String
  endDate      DateTime
  organizer    User      @relation(fields: [organizerId], references: [id])
  organizerId  String
  sponsor      Sponsor?  @relation(fields: [sponsorId], references: [id])
  sponsorId    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("promotions")
}

model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("ReportsSent", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  reportedUserId String
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  resolver       User?        @relation("ReportsResolved", fields: [resolverId], references: [id])
  resolverId     String?
  resolution     String?
  createdAt      DateTime     @default(now())
  resolvedAt     DateTime?

  @@map("reports")
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())

  @@map("playground_reviews")
}

model PlaygroundReport {
  id           String           @id @default(cuid())
  playground   Playground       @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User             @relation("ReportsSent", fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus     @default(PENDING)
  createdAt    DateTime         @default(now())

  @@map("playground_reports")
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]    @relation("UserChats")
  messages     Message[]
  teamId       String?   @unique
  team         Team?     @relation(fields: [teamId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("chats")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

model LfgLobby {
  id            String         @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  status        LfgLobbyStatus @default(OPEN)
  creator       User           @relation("CreatedLobbies", fields: [creatorId], references: [id])
  creatorId     String
  players       User[]         @relation("JoinedLobbies")
  playground    Playground?    @relation(fields: [playgroundId], references: [id])
  playgroundId  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("lfg_lobbies")
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean
}

model LoggedExercise {
  id                     String      @id @default(cuid())
  trainingLog            TrainingLog @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
  trainingLogId          String
  exercise               Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId             String
  notes                  String?
  isSupersetWithPrevious Boolean?
  sets                   LoggedSet[]
}

model TrainingLog {
  id         String            @id @default(cuid())
  user       User              @relation(fields: [userId], references: [id])
  userId     String
  date       DateTime
  workoutName String?
  status     TrainingLogStatus
  exercises  LoggedExercise[]
  mood       Mood?
  notes      String?
  coachNotes String?
}

model Sponsorship {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId String
  amount    Decimal
  signedAt  DateTime @default(now())
}

model TeamApplication {
  id           String              @id @default(cuid())
  team         Team                @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                @relation(fields: [userId], references: [id])
  userId       String
  message      String?
  status       FriendRequestStatus @default(PENDING) // Re-using for simplicity
  tournamentId String? // If application is for a specific tournament
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  @@unique([teamId, userId, tournamentId])
  @@map("team_applications")
}

model UserAchievement {
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@id([userId, achievementId])
  @@map("user_achievements")
}

model Achievement {
  id          String            @id @default(cuid())
  name        String            @unique
  description String
  icon        String
  users       UserAchievement[]

  @@map("achievements")
}

model UserTrainingProgram {
  user       User            @relation(fields: [userId], references: [id])
  userId     String
  program    TrainingProgram @relation(fields: [programId], references: [id])
  programId  String
  assignedAt DateTime        @default(now())
  isActive   Boolean         @default(true)

  @@id([userId, programId])
}

model CareerHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model CoachProfile {
  id             String  @id @default(cuid())
  user           User    @relation(fields: [userId], references: [id])
  userId         String  @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
}

model SponsorshipOffer {
  id        String              @id @default(cuid())
  team      Team                @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   User                @relation(fields: [sponsorId], references: [id])
  sponsorId String
  offerText String
  status    FriendRequestStatus @default(PENDING) // Re-using status for simplicity
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model Measurement {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  weight    Float
  bodyFat   Float?
  chest     Float?
  waist     Float?
  hips      Float?
  biceps    Float?
  thigh     Float?
}

model PollVote {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@id([userId, pollId])
}

model PollOption {
  id    String     @id @default(cuid())
  text  String
  poll  Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String
  votes PollVote[]
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  votes     PollVote[]
  author    User?        @relation(fields: [authorId], references: [id])
  authorId  String?
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

model Notification {
  id             String                  @id @default(cuid())
  user           User                    @relation(fields: [userId], references: [id])
  userId         String
  type           String
  message        String
  href           String?
  isRead         Boolean                 @default(false)
  createdAt      DateTime                @default(now())
  matchId        String?
  match          Match?                  @relation(fields: [matchId], references: [id])
  announcementId String?
  announcement   TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
}

model TournamentAnnouncement {
  id            String         @id @default(cuid())
  tournament    Tournament     @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId  String
  sender        User           @relation(fields: [senderId], references: [id])
  senderId      String
  subject       String
  message       String
  sentTo        Int
  createdAt     DateTime       @default(now())
  notifications Notification[]
}

model Activity {
  id           String       @id @default(cuid())
  type         ActivityType
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  metadata     Json
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  createdAt    DateTime     @default(now())
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  createdAt    DateTime   @default(now())
}

model Exercise {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json
  commonMistakes  Json
  alternatives    Json
  loggedExercises LoggedExercise[]

  @@map("exercises")
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String         @unique
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String
  createdAt  DateTime @default(now())
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
  createdAt   DateTime     @default(now())
}

model LeagueTeam {
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int    @default(0)
  wins     Int    @default(0)
  draws    Int    @default(0)
  losses   Int    @default(0)
  points   Int    @default(0)

  @@id([leagueId, teamId])
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}

model TrainingProgram {
    id String @id @default(cuid())
    name String
    description String
    goal String
    daysPerWeek Int
    splitType String
    author String
    coverImage String
    coverImageHint String
    isAiGenerated Boolean @default(false)
    weeklySplit WorkoutDay[]
    assignedTo UserTrainingProgram[]
    proposals TrainingProposal[]
}

model WorkoutDay {
    id String @id @default(cuid())
    trainingProgram TrainingProgram @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
    trainingProgramId String
    day Int
    title String
    exercises WorkoutExercise[]
}

model WorkoutExercise {
    id String @id @default(cuid())
    workoutDay WorkoutDay @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
    workoutDayId String
    name String
    sets String
    reps String
    plannedWeight String?
    isSupersetWithPrevious Boolean?
    technique String?
}

model Challenge {
  id           String            @id @default(cuid())
  title        String
  description  String
  discipline   Sport             @relation(fields: [disciplineId], references: [id])
  disciplineId String
  wager        Int
  creator      User              @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?             @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  opponentId   String?
  status       String // OPEN, IN_PROGRESS, COMPLETED, CANCELLED
  result       String?
  createdAt    DateTime          @default(now())
}
