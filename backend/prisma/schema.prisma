// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================================================================
// === User-related Models (Core)
// ==============================================================================
model User {
  id                       String                   @id @default(cuid())
  email                    String                   @unique
  name                     String
  passwordHash             String
  role                     String
  avatar                   String?
  status                   String                   @default("Активен")
  xp                       Int                      @default(0)
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  dateOfBirth              DateTime?
  location                 String?
  mainSport                String?
  preferredSports          String[]                 @default([])
  isVerified               Boolean                  @default(false)
  telegram                 String?
  discord                  String?
  friends                  User[]                   @relation("UserFriends")
  friendOf                 User[]                   @relation("UserFriends")
  sentFriendRequests       FriendRequest[]          @relation("SentFriendRequests")
  receivedFriendRequests   FriendRequest[]          @relation("ReceivedFriendRequests")
  createdTeams             Team[]                   @relation("CreatedTeams")
  captainOfTeams           Team[]                   @relation("CaptainOfTeams")
  teamsAsMember            Team[]                   @relation("TeamMembers")
  organizedTournaments     Tournament[]             @relation("OrganizedTournaments")
  judgedMatches            Match[]                  @relation("JudgedMatches")
  judgedTournaments        Tournament[]             @relation("JudgedTournaments")
  coaching                 User[]                   @relation("CoachStudent")
  coach                    User?                    @relation("CoachStudent", fields: [coachId], references: [id])
  coachId                  String?
  coachProfile             CoachProfile?
  organizedPromotions      Promotion[]              @relation("OrganizedPromotions")
  activities               Activity[]
  notifications            Notification[]
  careerHistory            CareerHistory[]
  reportsMade              Report[]                 @relation("ReportsMade")
  reportsAgainst           Report[]                 @relation("ReportsAgainst")
  resolvedReports          Report[]                 @relation("ResolvedReports")
  sponsorships             Sponsorship[]
  sponsorshipOffers        SponsorshipOffer[]
  measurements             Measurement[]
  trainingLogs             TrainingLog[]
  assignedPrograms         UserTrainingProgram[]
  createdPrograms          TrainingProgram[]        @relation("CreatedPrograms")
  trainingProposalsSent    TrainingProposal[]       @relation("SentProposals")
  trainingProposalsReceived TrainingProposal[]       @relation("ReceivedProposals")
  pollVotes                PollVote[]
  createdPolls             Poll[]
  sentAnnouncements        TournamentAnnouncement[]
  inventory                InventoryItem[]
  foodLog                  FoodLogEntry[]
  createdLobbies           LfgLobby[]               @relation("CreatedLobbies")
  joinedLobbies            LfgLobby[]               @relation("JoinedLobbies")
  matchEvents              MatchEvent[]
  authoredReviews          PlaygroundReview[]
  userAchievements         UserAchievement[]
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@unique([fromId, toId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model CoachProfile {
  id             String @id @default(cuid())
  user           User   @relation(fields: [userId], references: [id])
  userId         String @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
}

model CareerHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

// ==============================================================================
// === Team-related Models
// ==============================================================================

model Team {
  id                 String              @id @default(cuid())
  name               String
  slug               String              @unique
  motto              String?
  logo               String?
  dataAiHint         String?
  game               String
  rank               Int                 @default(1)
  wins               Int                 @default(0)
  losses             Int                 @default(0)
  draws              Int                 @default(0)
  seekingSponsorship Boolean             @default(true)
  pitch              String?
  creator            User                @relation("CreatedTeams", fields: [creatorId], references: [id])
  creatorId          String
  captain            User                @relation("CaptainOfTeams", fields: [captainId], references: [id])
  captainId          String
  members            User[]              @relation("TeamMembers")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]             @relation("Team1Matches")
  matchesAsTeam2     Match[]             @relation("Team2Matches")
  homePlayground     Playground?         @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?
  chat               Chat?
  teamPractices      TeamPractice[]
  sponsorships       Sponsorship[]
  sponsorshipOffers  SponsorshipOffer[]
  teamApplications   TeamApplication[]
  matchEvents        MatchEvent[]
  leagues            LeagueTeam[]
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  @@unique([teamId, userId, tournamentId])
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

// ==============================================================================
// === Tournament & Match Models
// ==============================================================================

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  game                  String
  description           String?
  type                  String
  format                String
  category              String
  location              String
  participantCount      Int
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  status                String                   @default("REGISTRATION") // REGISTRATION, ONGOING, FINISHED
  organizer             User                     @relation("OrganizedTournaments", fields: [organizerId], references: [id])
  organizerId           String
  teams                 Team[]
  matches               Match[]
  applications          TeamApplication[]
  judges                User[]                   @relation("JudgedTournaments")
  sponsors              Sponsor[]
  medicalPartners       MedicalPartner[]
  announcements         TournamentAnnouncement[]
  media                 TournamentMedia[]
}

model Match {
  id              String      @id @default(cuid())
  team1           Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus @default(PLANNED)
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournament      Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  round           Int?
  playground      Playground? @relation(fields: [playgroundId], references: [id])
  playgroundId    String?
  location        String?
  refereeName     String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  events          MatchEvent[]
  judges          User[]      @relation("JudgedMatches")
  league          League?     @relation(fields: [leagueId], references: [id])
  leagueId        String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model MatchEvent {
  id        String         @id @default(cuid())
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  player    User?          @relation(fields: [playerId], references: [id])
  playerId  String?
  team      Team?          @relation(fields: [teamId], references: [id])
  teamId    String?
  type      MatchEventType
  timestamp DateTime
  metadata  Json?
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
  SHOT
  SHOT_ON_TARGET
  CORNER
  FOUL
}

model Activity {
  id           String       @id @default(cuid())
  type         ActivityType
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  metadata     Json
  createdAt    DateTime     @default(now())
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId String?
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model Playground {
  id               String               @id @default(cuid())
  name             String
  address          String
  type             String
  surface          String
  features         String[]
  coverImage       String?
  coverImageHint   String?
  rating           Float
  checkIns         Int                  @default(0)
  status           PlaygroundStatus
  creator          User                 @relation(fields: [creatorId], references: [id])
  creatorId        String
  matches          Match[]
  practices        TeamPractice[]
  activities       Activity[]
  reports          PlaygroundReport[]
  reviews          PlaygroundReview[]
  homeForTeams     Team[]
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

model PlaygroundReport {
  id           String       @id @default(cuid())
  playground   Playground   @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User         @relation(fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus
  createdAt    DateTime     @default(now())
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model LfgLobby {
  id            String         @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  playground    Playground?    @relation(fields: [playgroundId], references: [id])
  playgroundId  String?
  creator       User           @relation("CreatedLobbies", fields: [creatorId], references: [id])
  creatorId     String
  players       User[]         @relation("JoinedLobbies")
  playersNeeded Int
  comment       String
  startTime     DateTime
  endTime       DateTime
  status        LfgLobbyStatus @default(OPEN)
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  creator      User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  opponentId   String?
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  status       ChallengeStatus
  result       String?
  createdAt    DateTime        @default(now())
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Sport {
  id         String      @id @unique
  name       String
  icon       String
  category   String
  challenges Challenge[]
}

model Promotion {
  id           String   @id @default(cuid())
  name         String
  description  String
  prize        String
  cost         String
  imageDataUri String
  imageHint    String
  organizer    User     @relation("OrganizedPromotions", fields: [organizerId], references: [id])
  organizerId  String
  sponsor      Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId    String?
  endDate      DateTime
  createdAt    DateTime @default(now())
}

model Sponsor {
  id                String             @id @unique
  name              String
  logo              String?
  logoHint          String?
  description       String
  profileUrl        String
  interests         String[]
  promotions        Promotion[]
  teams             Team[]
  tournaments       Tournament[]
  sponsorshipOffers SponsorshipOffer[]
  sponsorships      Sponsorship[]
}

model Sponsorship {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId String
  amount    Decimal
  signedAt  DateTime @default(now())
}

model SponsorshipOffer {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId String
  offerText String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int
  wins     Int
  draws    Int
  losses   Int
  points   Int
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}

model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("ReportsMade", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportsAgainst", fields: [reportedUserId], references: [id])
  reportedUserId String
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  resolver       User?        @relation("ResolvedReports", fields: [resolverId], references: [id])
  resolverId     String?
  resolution     String?
  createdAt      DateTime     @default(now())
  resolvedAt     DateTime?
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model Notification {
  id             String                  @id @default(cuid())
  user           User                    @relation(fields: [userId], references: [id])
  userId         String
  type           NotificationType
  message        String
  href           String?
  isRead         Boolean                 @default(false)
  createdAt      DateTime                @default(now())
  matchId        String?
  announcementId String?
  announcement   TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
}

model TournamentAnnouncement {
  id            String         @id @default(cuid())
  tournament    Tournament     @relation(fields: [tournamentId], references: [id])
  tournamentId  String
  sender        User           @relation(fields: [senderId], references: [id])
  senderId      String
  subject       String
  message       String
  sentTo        Int
  createdAt     DateTime       @default(now())
  notifications Notification[]
}

model TrainingProgram {
  id              String                @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean               @default(false)
  weeklySplit     WorkoutDay[]
  assignedToUsers UserTrainingProgram[]
  proposals       TrainingProposal[]
  creator         User?                 @relation("CreatedPrograms", fields: [creatorId], references: [id])
  creatorId       String?
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                     String      @id @default(cuid())
  workoutDay             WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId           String
  name                   String
  sets                   String
  reps                   String
  plannedWeight          String?
  isSupersetWithPrevious Boolean?
  technique              String?
}

model UserTrainingProgram {
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  program   TrainingProgram @relation(fields: [programId], references: [id])
  programId String
  assignedAt DateTime        @default(now())
  isActive   Boolean         @default(true)

  @@id([userId, programId])
}

model TrainingLog {
  id          String           @id @default(cuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  workoutName String?
  status      TrainingLogStatus
  exercises   LoggedExercise[]
  mood        String?
  notes       String?
  coachNotes  String?
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

model LoggedExercise {
  id                     String        @id @default(cuid())
  trainingLog            TrainingLog   @relation(fields: [trainingLogId], references: [id])
  trainingLogId          String
  exercise               Exercise      @relation(fields: [exerciseId], references: [id])
  exerciseId             String
  notes                  String?
  isSupersetWithPrevious Boolean?
  sets                   LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Int?
  isCompleted      Boolean        @default(false)
}

model Exercise {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json
  commonMistakes  Json
  alternatives    Json
  loggedExercises LoggedExercise[]
}

model TrainingProposal {
  id        String          @id @default(cuid())
  from      User            @relation("SentProposals", fields: [fromId], references: [id])
  fromId    String
  to        User            @relation("ReceivedProposals", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  comment   String?
  program   TrainingProgram? @relation(fields: [programId], references: [id])
  programId String?
  status    String          @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime        @default(now())
}

model Poll {
  id         String     @id @default(cuid())
  title      String
  question   String
  options    PollOption[]
  author     User?      @relation(fields: [authorId], references: [id])
  authorId   String?
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  votes      PollVote[]
}

model PollOption {
  id     String     @id @default(cuid())
  poll   Poll       @relation(fields: [pollId], references: [id])
  pollId String
  text   String
  votes  PollVote[]
}

model PollVote {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@id([userId, pollId])
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String         @unique
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String
  createdAt  DateTime @default(now())
}

model Measurement {
  id      String  @id @default(cuid())
  user    User    @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         String // PRIVATE or GROUP
  participants User[]    @relation("JoinedChats")
  messages     Message[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime @default(now())
}

model Achievement {
  id          String            @id @default(cuid())
  name        String            @unique
  description String
  icon        String
  unlockedBy  UserAchievement[]
}

model UserAchievement {
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@id([userId, achievementId])
}
