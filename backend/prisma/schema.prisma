// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    String
  status                  String                 @default("Активен")
  xp                      Int                    @default(0)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  location                String?
  mainSport               String?
  dateOfBirth             DateTime?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  organizedTournaments    Tournament[]           @relation("Organizer")
  teamsAsCaptain          Team[]                 @relation("Captain")
  teamsAsCreator          Team[]                 @relation("Creator")
  teamsAsMember           Team[]                 @relation("TeamMembers")
  createdPlaygrounds      Playground[]
  organizedPromotions     Promotion[]
  createdChallenges       Challenge[]            @relation("ChallengeCreator")
  acceptedChallenges      Challenge[]            @relation("ChallengeOpponent")
  friends                 User[]                 @relation("Friends")
  friendOf                User[]                 @relation("Friends")
  sentFriendRequests      FriendRequest[]        @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]        @relation("ReceivedFriendRequests")
  messages                Message[]
  chats                   Chat[]
  notifications           Notification[]
  activities              Activity[]
  trainingLogs            TrainingLog[]
  measurements            Measurement[]
  inventory               InventoryItem[]
  sentTrainingProposals   TrainingProposal[]     @relation("SentTrainingProposals")
  receivedTrainingProposals TrainingProposal[]   @relation("ReceivedTrainingProposals")
  pollVotes               PollVote[]
  coachProfile            CoachProfile?
  coaching                User[]                 @relation("CoachStudents")
  coach                   User?                  @relation("CoachStudents", fields: [coachId], references: [id])
  coachId                 String?
  judgedTournaments       Tournament[]           @relation("TournamentJudges")
  tournamentAnnouncements TournamentAnnouncement[]
  judgedMatches           Match[]                @relation("Judge")
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  rating         Float
  price          Decimal
}

model Team {
  id                String       @id @default(cuid())
  name              String       @unique
  slug              String       @unique
  motto             String?
  logo              String?
  dataAiHint        String?
  game              String
  wins              Int          @default(0)
  losses            Int          @default(0)
  draws             Int          @default(0)
  rank              Int          @default(5)
  seekingSponsorship Boolean     @default(false)
  homePlaygroundId  String?
  captain           User         @relation("Captain", fields: [captainId], references: [id])
  captainId         String
  creator           User         @relation("Creator", fields: [creatorId], references: [id])
  creatorId         String
  members           User[]       @relation("TeamMembers")
  tournaments       Tournament[]
  matchesAsTeam1    Match[]      @relation("Team1")
  matchesAsTeam2    Match[]      @relation("Team2")
  sponsors          Sponsor[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model Match {
  id              String       @id @default(cuid())
  team1           Team         @relation("Team1", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team         @relation("Team2", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournament      Tournament?  @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  location        String?
  referee         User?        @relation("Judge", fields: [refereeId], references: [id])
  refereeId       String?
  refereeName     String?
  playgroundId    String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  league          League?      @relation(fields: [leagueId], references: [id])
  leagueId        String?
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  game                  String
  description           String?
  format                String
  type                  String
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  prizePool             String?
  rules                 String?
  status                String
  bannerImage           String?
  bannerImageHint       String?
  organizer             User                     @relation("Organizer", fields: [organizerId], references: [id])
  organizerId           String
  teams                 Team[]
  matches               Match[]
  judges                User[]                   @relation("TournamentJudges")
  announcements         TournamentAnnouncement[]
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
}

model Playground {
  id             String   @id @default(cuid())
  name           String
  address        String
  type           String
  surface        String
  features       String[]
  rating         Float
  checkIns       Int
  coverImage     String?
  coverImageHint String?
  status         String
  creator        User     @relation(fields: [creatorId], references: [id])
  creatorId      String
}

model Challenge {
  id          String          @id @default(cuid())
  title       String
  description String
  discipline  String
  wager       Int
  creator     User            @relation("ChallengeCreator", fields: [creatorId], references: [id])
  creatorId   String
  opponent    User?           @relation("ChallengeOpponent", fields: [opponentId], references: [id])
  opponentId  String?
  status      ChallengeStatus
  result      String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Sponsor {
  id          String   @id @default(cuid())
  name        String   @unique
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  teams       Team[]
  promotions  Promotion[]
}

model Promotion {
  id           String  @id @default(cuid())
  name         String
  description  String
  prize        String
  imageDataUri String
  imageHint    String
  cost         String
  endDate      DateTime
  organizer    User    @relation(fields: [organizerId], references: [id])
  organizerId  String
  sponsor      Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         String // PRIVATE or GROUP
  participants User[]
  messages     Message[]
  createdAt    DateTime  @default(now())
}

model Message {
  id        String   @id @default(cuid())
  text      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  message   String
  href      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Activity {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      ActivityType
  timestamp DateTime @default(now())
  metadata  Json
}

enum ActivityType {
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  STATUS_UPDATED
  CHALLENGE_ISSUED
  CHALLENGE_ACCEPTED
}

model StoreItem {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean
  createdAt   DateTime @default(now())
}

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  techniqueTips  String[]
  commonMistakes String[]
  alternatives   String[]
  LoggedExercise LoggedExercise[]
}

model TrainingProgram {
  id              String         @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean        @default(false)
  weeklySplit     WorkoutDay[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  day               Int
  title             String
  exercises         ExerciseDetail[]
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
}

model ExerciseDetail {
  id                       String      @id @default(cuid())
  name                     String
  sets                     String
  reps                     String
  plannedWeight            String?
  isSupersetWithPrevious   Boolean?
  technique                String?
  workoutDay               WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId             String
}

model TrainingLog {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  workoutName String
  status    String
  notes     String?
  coachNotes String?
  mood      String?
  exercises LoggedExercise[]
}

model LoggedExercise {
  id            String      @id @default(cuid())
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  trainingLog   TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId String
  notes         String?
  sets          LoggedSet[]
}

model LoggedSet {
  id                String         @id @default(cuid())
  loggedExercise    LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId  String
  plannedReps       String
  plannedWeight     String?
  loggedReps        Int?
  loggedWeight      Int?
  rpe               Int?
  isCompleted       Boolean
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String
  imageHint   String
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String @unique
  played   Int
  wins     Int
  losses   Int
  draws    Int
  points   Int
}

model LfgLobby {
  id            String     @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  playgroundId  String?
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  creator       User       @relation(fields: [creatorId], references: [id])
  creatorId     String
  players       User[]
}

enum LfgLobbyType {
  GAME
  TRAINING
}

model Measurement {
  id      String    @id @default(cuid())
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

model TrainingProposal {
  id        String   @id @default(cuid())
  from      User     @relation("SentTrainingProposals", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedTrainingProposals", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  comment   String?
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
}

model Poll {
  id        String     @id @default(cuid())
  title     String
  question  String
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  options   PollOption[]
  votes     PollVote[]
}

model PollOption {
  id     String     @id @default(cuid())
  text   String
  poll   Poll       @relation(fields: [pollId], references: [id])
  pollId String
  votes  PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())
  @@unique([userId, pollId])
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String         @unique
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  foodItem    FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId  String
  grams       Int
  meal        String
  createdAt   DateTime @default(now())
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}
