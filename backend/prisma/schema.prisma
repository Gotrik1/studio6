// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  name                    String
  passwordHash            String
  avatar                  String?
  bannerImage             String?
  bannerImageHint         String?
  role                    String                  @default("Игрок")
  status                  String                  @default("Активен")
  xp                      Int                     @default(0)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  location                String?
  mainSport               String?
  dateOfBirth             DateTime?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  isVerified              Boolean                 @default(false)
  teamsAsCaptain          Team[]                  @relation("CaptainToTeams")
  teamsAsCreator          Team[]                  @relation("CreatorToTeams")
  teamsAsMember           Team[]                  @relation("TeamToMembers")
  organizedTournaments    Tournament[]
  judgedMatches           Match[]                 @relation("JudgeToMatches")
  createdPlaygrounds      Playground[]
  friends                 User[]                  @relation("Friendships")
  friendOf                User[]                  @relation("Friendships")
  sentFriendRequests      FriendRequest[]         @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]         @relation("ReceivedFriendRequests")
  createdChallenges       Challenge[]             @relation("CreatorOfChallenge")
  acceptedChallenges      Challenge[]             @relation("OpponentInChallenge")
  sentNotifications       Notification[]          @relation("SenderNotifications")
  receivedNotifications   Notification[]          @relation("RecipientNotifications")
  organizedPromotions     Promotion[]
  createdLfgLobbies       LfgLobby[]
  joinedLfgLobbies        LfgLobby[]              @relation("LfgPlayers")
  authoredPolls           Poll[]
  votes                   PollVote[]
  authoredReviews         PlaygroundReview[]
  authoredActivities      Activity[]
  trainingLogs            TrainingLog[]
  measurements            Measurement[]
  inventoryItems          InventoryItem[]
  sentTrainingProposals   TrainingProposal[]      @relation("TrainingProposalsSent")
  receivedTrainingProposals TrainingProposal[]    @relation("TrainingProposalsReceived")
  careerHistory           CareerHistory[]
  coachProfile            CoachProfile?
  coaching                User[]                  @relation("CoachToPlayers")
  coachId                 String?
  coach                   User?                   @relation("CoachToPlayers", fields: [coachId], references: [id])
  reportsMade             Report[]                @relation("Reporter")
  reportsAgainst          Report[]                @relation("ReportedUser")
  resolvedReports         Report[]                @relation("Resolver")
  tournamentAnnouncements TournamentAnnouncement[]
  matchEvents             MatchEvent[]
}

model CareerHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model Team {
  id                 String              @id @default(cuid())
  name               String
  motto              String?
  slug               String              @unique
  logo               String?
  dataAiHint         String?
  game               String
  rank               Int                 @default(0)
  wins               Int                 @default(0)
  losses             Int                 @default(0)
  draws              Int                 @default(0)
  seekingSponsorship Boolean             @default(false)
  captainId          String
  captain            User                @relation("CaptainToTeams", fields: [captainId], references: [id])
  creatorId          String
  creator            User                @relation("CreatorToTeams", fields: [creatorId], references: [id])
  members            User[]              @relation("TeamToMembers")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]             @relation("Team1Matches")
  matchesAsTeam2     Match[]             @relation("Team2Matches")
  applications       TeamApplication[]
  sponsors           Sponsor[]
  homePlaygroundId   String?
  homePlayground     Playground?         @relation(fields: [homePlaygroundId], references: [id], onDelete: SetNull)
  leagueTeams        LeagueTeam[]
  chatId             String?             @unique
  chat               Chat?               @relation(fields: [chatId], references: [id])
  practices          TeamPractice[]
  matchEvents        MatchEvent[]
}

model TeamApplication {
  id           String                  @id @default(cuid())
  teamId       String
  team         Team                    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId       String
  user         User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  message      String?
  status       TeamApplicationStatus   @default(PENDING)
  createdAt    DateTime                @default(now())
  tournamentId String? // If null, it's a general application. If set, it's for a specific tournament.
  tournament   Tournament?             @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId, tournamentId])
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

model Match {
  id              String      @id @default(cuid())
  team1Id         String
  team1           Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team2Id         String
  team2           Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournamentId    String?
  tournament      Tournament? @relation(fields: [tournamentId], references: [id])
  playgroundId    String?
  playground      Playground? @relation(fields: [playgroundId], references: [id])
  location        String?
  refereeId       String?
  refereeName     String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  events          MatchEvent[]

  @@index([team1Id])
  @@index([team2Id])
  @@index([tournamentId])
}

model MatchEvent {
  id          String         @id @default(cuid())
  matchId     String
  match       Match          @relation(fields: [matchId], references: [id], onDelete: Cascade)
  timestamp   DateTime       @default(now())
  type        MatchEventType
  description String?
  playerId    String?
  player      User?          @relation(fields: [playerId], references: [id], onDelete: SetNull)
  teamId      String?
  team        Team?          @relation(fields: [teamId], references: [id], onDelete: SetNull)
  metadata    Json?
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  game                  String
  description           String?
  type                  String // "team" or "individual"
  format                String // "single_elimination", "round_robin", "groups"
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  organizerId           String
  organizer             User                     @relation(fields: [organizerId], references: [id])
  teams                 Team[]
  matches               Match[]
  applications          TeamApplication[]
  announcements         TournamentAnnouncement[]
  judges                User[]                   @relation("JudgeToTournaments")
  sponsors              Sponsor[]
  medicalPartners       MedicalPartner[]
  media                 TournamentMedia[]
}

model TournamentMedia {
  id          String   @id @default(cuid())
  type        String // IMAGE, VIDEO, AUDIO
  src         String
  description String?
  hint        String?
  createdAt   DateTime @default(now())
  tournament  Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId String
}

model FriendRequest {
  id        String   @id @default(cuid())
  fromId    String
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id], onDelete: Cascade)
  toId      String
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id], onDelete: Cascade)
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())

  @@unique([fromId, toId])
}

model Challenge {
  id            String   @id @default(cuid())
  title         String
  description   String
  wager         Int
  disciplineId  String
  discipline    Sport    @relation(fields: [disciplineId], references: [id])
  creatorId     String
  creator       User     @relation("CreatorOfChallenge", fields: [creatorId], references: [id], onDelete: Cascade)
  opponentId    String?
  opponent      User?    @relation("OpponentInChallenge", fields: [opponentId], references: [id], onDelete: Cascade)
  status        String // OPEN, IN_PROGRESS, COMPLETED, CANCELLED
  result        String?
  createdAt     DateTime @default(now())
}

model Playground {
  id                      String              @id @default(cuid())
  name                    String
  address                 String
  type                    String
  surface                 String
  features                String[]
  rating                  Float
  checkIns                Int
  status                  PlaygroundStatus
  coverImage              String?
  coverImageHint          String?
  creatorId               String
  creator                 User                @relation(fields: [creatorId], references: [id])
  teams                   Team[]
  matches                 Match[]
  reviews                 PlaygroundReview[]
  reports                 PlaygroundReport[]
  checkInActivities       Activity[]
  practices               TeamPractice[]
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playgroundId String
  playground   Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  authorId     String
  author       User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model CoachProfile {
  id             String  @id @default(cuid())
  userId         String  @unique
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialization String
  description    String
  tags           String[]
  rating         Float
  price          Float
  experience     String
}

model Sponsor {
  id          String       @id @default(cuid())
  name        String
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  promotions  Promotion[]
  teams       Team[]
  tournaments Tournament[]
}

model Chat {
  id           String   @id @default(cuid())
  name         String?
  type         String // PRIVATE or GROUP
  participants User[]
  messages     Message[]
  team         Team?
  createdAt    DateTime @default(now())
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation("RecipientNotifications", fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType
  message   String
  href      String?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  TEAM_INVITE
  SYSTEM_ALERT
}

model StoreItem {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model TrainingProgram {
  id              String         @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean        @default(false)
  weeklySplit     WorkoutDay[]
  trainingProposals TrainingProposal[]
}

model WorkoutDay {
  id                String             @id @default(cuid())
  trainingProgramId String
  trainingProgram   TrainingProgram    @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDayId            String
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  loggedItems    LoggedExercise[]
}

model TrainingLog {
  id          String           @id @default(cuid())
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  date        DateTime
  workoutName String?
  status      TrainingLogStatus
  mood        Mood?
  notes       String?
  coachNotes  String?
  exercises   LoggedExercise[]
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

model LoggedExercise {
  id              String      @id @default(cuid())
  trainingLogId   String
  trainingLog     TrainingLog @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
  exerciseId      String
  exercise        Exercise    @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  notes           String?
  sets            LoggedSet[]
}

model LoggedSet {
  id               String  @id @default(cuid())
  loggedExerciseId String
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Int?
  isCompleted      Boolean @default(false)
}

model Promotion {
  id            String   @id @default(cuid())
  name          String
  description   String
  prize         String
  cost          String
  endDate       DateTime
  imageDataUri  String
  imageHint     String
  organizerId   String
  organizer     User     @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  sponsorId     String?
  sponsor       Sponsor? @relation(fields: [sponsorId], references: [id])
  createdAt     DateTime @default(now())
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String
  imageHint   String
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  leagueId String
  league   League @relation(fields: [leagueId], references: [id])
  teamId   String
  team     Team   @relation(fields: [teamId], references: [id])
  played   Int
  wins     Int
  draws    Int
  losses   Int
  points   Int

  @@unique([leagueId, teamId])
}

model Sport {
  id         String      @id
  name       String
  icon       String
  category   String // 'Командный', 'Некомандный', 'Киберспорт'
  challenges Challenge[]
}

model LfgLobby {
  id            String       @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  playgroundId  String?
  playground    Playground?  @relation(fields: [playgroundId], references: [id])
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  creatorId     String
  creator       User         @relation(fields: [creatorId], references: [id])
  players       User[]       @relation("LfgPlayers")
}

enum LfgLobbyType {
  GAME
  TRAINING
}

model Measurement {
  id      String    @id @default(cuid())
  userId  String
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

model TrainingProposal {
  id        String          @id @default(cuid())
  fromId    String
  from      User            @relation("TrainingProposalsSent", fields: [fromId], references: [id], onDelete: Cascade)
  toId      String
  to        User            @relation("TrainingProposalsReceived", fields: [toId], references: [id], onDelete: Cascade)
  sport     String
  date      DateTime
  programId String?
  program   TrainingProgram? @relation(fields: [programId], references: [id], onDelete: SetNull)
  comment   String?
  status    TrainingProposalStatus @default(PENDING)
  createdAt DateTime        @default(now())
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  isActive  Boolean      @default(true)
  authorId  String?
  author    User?        @relation(fields: [authorId], references: [id])
  createdAt DateTime     @default(now())
  votes     PollVote[]
}

model PollOption {
  id     String     @id @default(cuid())
  text   String
  pollId String
  poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes  PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  pollId       String
  poll         Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollOptionId String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())

  @@unique([userId, pollId])
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

model InventoryItem {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournamentId String
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  senderId     String
  sender       User       @relation(fields: [senderId], references: [id], onDelete: Cascade)
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
}

model Report {
  id             String       @id @default(cuid())
  reporterId     String
  reporter       User         @relation("Reporter", fields: [reporterId], references: [id], onDelete: Cascade)
  reportedUserId String
  reportedUser   User         @relation("ReportedUser", fields: [reportedUserId], references: [id], onDelete: Cascade)
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  resolverId     String?
  resolver       User?        @relation("Resolver", fields: [resolverId], references: [id], onDelete: SetNull)
  resolvedAt     DateTime?
  resolution     String?
  createdAt      DateTime     @default(now())
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model Activity {
  id           String       @id @default(cuid())
  type         ActivityType
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  playgroundId String?
  playground   Playground?  @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  metadata     Json
  createdAt    DateTime     @default(now())
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

// Create a linking table for User and Team (many-to-many)
// This is implicitly handled by Prisma by having User[] on Team and Team[] on User
// with the @relation("TeamToMembers")
// Similarly for friends
// model Friends {
//   userAId String
//   userA   User   @relation("UserAFriends", fields: [userAId], references: [id])
//   userBId String
//   userB   User   @relation("UserBFriends", fields: [userBId], references: [id])

//   @@id([userAId, userBId])
// }
