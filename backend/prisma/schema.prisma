// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// ENUMS
// ========================================

enum UserStatus {
  ACTIVE
  BANNED
  PENDING_VERIFICATION
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

enum TournamentType {
  TEAM
  INDIVIDUAL
}

enum TournamentFormat {
  SINGLE_ELIMINATION
  ROUND_ROBIN
  GROUPS
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  SHOT
  SHOT_ON_TARGET
  CORNER
  FOUL
  // Esports specific
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  // Generic
  OTHER
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum PlaygroundStatus {
  PENDING_MODERATION
  APPROVED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ChatType {
  DIRECT
  GROUP
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

// ========================================
// MODELS
// ========================================

model User {
  id                      String                   @id @default(cuid())
  name                    String
  email                   String                   @unique
  passwordHash            String
  avatar                  String?
  role                    String
  status                  UserStatus               @default(ACTIVE)
  xp                      Int                      @default(0)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  isVerified              Boolean                  @default(false)
  preferredSports         String[]
  telegram                String?
  discord                 String?
  organizedTournaments    Tournament[]             @relation("OrganizedTournaments")
  judgedTournaments       Tournament[]             @relation("JudgedTournaments")
  createdTeams            Team[]                   @relation("CreatedTeams")
  captainOfTeams          Team[]                   @relation("CaptainOfTeams")
  teamsAsMember           Team[]                   @relation("TeamMembers")
  friends                 User[]                   @relation("Friends")
  friendOf                User[]                   @relation("Friends")
  sentFriendRequests      FriendRequest[]          @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]          @relation("ReceivedFriendRequests")
  reportsSent             Report[]                 @relation("ReportsSent")
  reportsReceived         Report[]                 @relation("ReportsReceived")
  reportsResolved         Report[]                 @relation("ReportsResolved")
  careerHistory           CareerHistory[]
  coachProfile            CoachProfile?
  coaching                User[]                   @relation("CoachedBy")
  coachedBy               User?                    @relation("CoachedBy", fields: [coachId], references: [id])
  coachId                 String?
  sponsorships            Sponsorship[]
  sponsorshipOffers       SponsorshipOffer[]
  measurements            Measurement[]
  trainingProposalsSent   TrainingProposal[]       @relation("ProposalsSent")
  trainingProposalsRcvd   TrainingProposal[]       @relation("ProposalsReceived")
  pollsVoted              PollVote[]
  createdPlaygrounds      Playground[]
  playgroundReviews       PlaygroundReview[]
  playgroundReportsSent   PlaygroundReport[]       @relation("PlaygroundReportsSent")
  sentAnnouncements       TournamentAnnouncement[]
  notifications           Notification[]
  achievements            UserAchievement[]
  activities              Activity[]
  inventory               InventoryItem[]
  foodLog                 FoodLogEntry[]
  trainingLogs            TrainingLog[]
  assignedPrograms        UserTrainingProgram[]
  chats                   Chat[]                   @relation("ChatParticipants")
  messages                Message[]
  createdLobbies          LfgLobby[]               @relation("CreatedLobbies")
  joinedLobbies           LfgLobby[]               @relation("JoinedLobbies")
  matchEvents             MatchEvent[]
}

model Team {
  id                 String             @id @default(cuid())
  name               String
  motto              String?
  logo               String?
  dataAiHint         String?
  game               String
  rank               Int                @default(1)
  wins               Int                @default(0)
  losses             Int                @default(0)
  draws              Int                @default(0)
  seekingSponsorship Boolean            @default(false)
  pitch              String?
  slug               String             @unique
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  creator            User               @relation("CreatedTeams", fields: [creatorId], references: [id])
  creatorId          String
  captain            User               @relation("CaptainOfTeams", fields: [captainId], references: [id])
  captainId          String
  members            User[]             @relation("TeamMembers")
  tournaments        Tournament[]       @relation("TournamentParticipants")
  matchesAsTeam1     Match[]            @relation("Team1Matches")
  matchesAsTeam2     Match[]            @relation("Team2Matches")
  chat               Chat?
  practices          TeamPractice[]
  leagueTeams        LeagueTeam[]
  homePlayground     Playground?        @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?
  matchEvents        MatchEvent[]
  sponsorships       Sponsorship[]      @relation("SponsoredTeams")
  sponsorshipOffers  SponsorshipOffer[]
  applications       TeamApplication[]
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  game                    String
  description             String?                  @db.Text
  status                  TournamentStatus         @default(REGISTRATION)
  type                    TournamentType
  format                  TournamentFormat
  category                String
  location                String
  participantCount        Int
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  prizePool               String?
  rules                   String?                  @db.Text
  bannerImage             String?
  bannerImageHint         String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  organizer               User                     @relation("OrganizedTournaments", fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]                   @relation("TournamentParticipants")
  matches                 Match[]
  judges                  User[]                   @relation("JudgedTournaments")
  sponsors                Sponsor[]                @relation("SponsoredTournaments")
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  media                   TournamentMedia[]
  league                  League?                  @relation(fields: [leagueId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  leagueId                String?
}

model Match {
  id               String         @id @default(cuid())
  team1            Team           @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id          String
  team2            Team           @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id          String
  team1Score       Int?
  team2Score       Int?
  status           MatchStatus
  scheduledAt      DateTime
  finishedAt       DateTime?
  round            Int?
  location         String?
  disputeReason    String?
  disputeOpenedAt  DateTime?
  resolution       String?
  refereeName      String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  tournament       Tournament?    @relation(fields: [tournamentId], references: [id])
  tournamentId     String?
  league           League?      @relation(fields: [leagueId], references: [id])
  leagueId         String?
  events           MatchEvent[]
  notifications    Notification[]
  playground       Playground?    @relation(fields: [playgroundId], references: [id])
  playgroundId     String?
}

model MatchEvent {
  id        String       @id @default(cuid())
  type      MatchEventType
  timestamp DateTime
  metadata  Json?
  match     Match        @relation(fields: [matchId], references: [id])
  matchId   String
  team      Team         @relation(fields: [teamId], references: [id])
  teamId    String
  player    User         @relation(fields: [playerId], references: [id])
  playerId  String
}

model Playground {
  id                 String             @id @default(cuid())
  name               String
  address            String
  type               String
  coverImage         String?
  coverImageHint     String?
  surface            String
  features           String[]
  rating             Float
  checkIns           Int                @default(0)
  status             PlaygroundStatus   @default(PENDING_MODERATION)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  creator            User               @relation(fields: [creatorId], references: [id])
  creatorId          String
  matches            Match[]
  practices          TeamPractice[]
  reviews            PlaygroundReview[]
  reports            PlaygroundReport[]
  residentTeams      Team[]
  checkInActivities  Activity[]
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model Sponsor {
  id          String       @id @default(cuid())
  name        String
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  tournaments Tournament[] @relation("SponsoredTournaments")
  teams       Team[]       @relation("SponsoredTeams")
  promotions  Promotion[]
}

model CareerHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String   @db.Text
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
}

model Report {
  id               String       @id @default(cuid())
  reporter         User         @relation("ReportsSent", fields: [reporterId], references: [id])
  reporterId       String
  reportedUser     User         @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  reportedUserId   String
  category         String
  description      String?
  status           ReportStatus @default(PENDING)
  createdAt        DateTime     @default(now())
  resolvedAt       DateTime?
  resolver         User?        @relation("ReportsResolved", fields: [resolverId], references: [id])
  resolverId       String?
}

model Sponsorship {
  id          String   @id @default(cuid())
  team        Team     @relation(fields: [teamId], references: [id])
  teamId      String
  sponsor     User     @relation(fields: [sponsorId], references: [id])
  sponsorId   String
  amount      Decimal
  signedAt    DateTime @default(now())
  expiresAt   DateTime
}

model SponsorshipOffer {
  id          String   @id @default(cuid())
  team        Team     @relation(fields: [teamId], references: [id])
  teamId      String
  sponsor     User     @relation(fields: [sponsorId], references: [id])
  sponsorId   String
  offerText   String
  status      String   // PENDING, ACCEPTED, DECLINED
  createdAt   DateTime @default(now())
}

model Measurement {
  id      String    @id @default(cuid())
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  status       ChallengeStatus
  result       String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  creator      User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  opponentId   String?
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
}

model Sport {
  id       String      @id
  name     String
  icon     String
  category String
  challenges Challenge[]
}

model TeamApplication {
  id           String                  @id @default(cuid())
  team         Team                    @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                    @relation(fields: [userId], references: [id])
  userId       String
  message      String?
  status       TeamApplicationStatus   @default(PENDING)
  tournament   Tournament?             @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  createdAt    DateTime                @default(now())
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  rating       Int
  comment      String     @db.Text
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String

  @@index([authorId])
  @@index([playgroundId])
}

model PlaygroundReport {
  id           String           @id @default(cuid())
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus     @default(PENDING)
  createdAt    DateTime         @default(now())
  playground   Playground       @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User             @relation("PlaygroundReportsSent", fields: [reporterId], references: [id])
  reporterId   String
}

model LfgLobby {
  id           String       @id @default(cuid())
  type         LfgLobbyType
  sport        String
  location     String
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  comment      String
  status       LfgLobbyStatus @default(OPEN)
  createdAt    DateTime     @default(now())
  // Relations
  creator      User         @relation("CreatedLobbies", fields: [creatorId], references: [id])
  creatorId    String
  players      User[]       @relation("JoinedLobbies")
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId String?
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum LfgLobbyType {
  GAME
  TRAINING
}

model TrainingProgram {
  id                String                 @id @default(cuid())
  name              String
  description       String
  goal              String
  daysPerWeek       Int
  splitType         String
  author            String
  coverImage        String?
  coverImageHint    String?
  isAiGenerated     Boolean                @default(false)
  weeklySplit       WorkoutDay[]
  assignedTo        UserTrainingProgram[]
  proposals         TrainingProposal[]
}

model WorkoutDay {
  id                String              @id @default(cuid())
  day               Int
  title             String
  trainingProgram   TrainingProgram     @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
  trainingProgramId String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
  workoutDayId            String
}

model UserTrainingProgram {
  id          String          @id @default(cuid())
  user        User            @relation(fields: [userId], references: [id])
  userId      String
  program     TrainingProgram @relation(fields: [programId], references: [id])
  programId   String
  assignedAt  DateTime        @default(now())
  isActive    Boolean         @default(true)
  @@unique([userId, programId])
}

model TrainingLog {
  id           String            @id @default(cuid())
  user         User              @relation(fields: [userId], references: [id])
  userId       String
  date         DateTime
  workoutName  String?
  status       TrainingLogStatus
  exercises    LoggedExercise[]
  mood         Mood?
  notes        String?
  coachNotes   String?
  createdAt    DateTime          @default(now())
}

model LoggedExercise {
  id                      String      @id @default(cuid())
  trainingLog             TrainingLog @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
  trainingLogId           String
  exercise                Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId              String
  notes                   String?
  isSupersetWithPrevious  Boolean?
  sets                    LoggedSet[]
}

model LoggedSet {
  id               String          @id @default(cuid())
  loggedExercise   LoggedExercise  @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Int?
  isCompleted      Boolean         @default(false)
}

model TrainingProposal {
  id         String                 @id @default(cuid())
  from       User                   @relation("ProposalsSent", fields: [fromId], references: [id])
  fromId     String
  to         User                   @relation("ProposalsReceived", fields: [toId], references: [id])
  toId       String
  sport      String
  date       DateTime
  comment    String?
  status     TrainingProposalStatus @default(PENDING)
  program    TrainingProgram?       @relation(fields: [programId], references: [id])
  programId  String?
  createdAt  DateTime               @default(now())
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

model UserAchievement {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([userId, achievementId])
}

model Achievement {
  id                String            @id @default(cuid())
  name              String            @unique
  description       String
  icon              String
  unlockedBy        UserAchievement[]
}

model Poll {
  id        String      @id @default(cuid())
  title     String
  question  String
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  options   PollOption[]
  votes     PollVote[]
  author    User?       @relation(fields: [authorId], references: [id])
  authorId  String?
}

model PollOption {
  id        String     @id @default(cuid())
  text      String
  poll      Poll       @relation(fields: [pollId], references: [id])
  pollId    String
  votes     PollVote[]
}

model PollVote {
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  poll       Poll       @relation(fields: [pollId], references: [id])
  pollId     String
  pollOption PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt  DateTime   @default(now())
  
  @@unique([userId, pollId])
}

model InventoryItem {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  name            String
  category        String
  type            String
  purchaseDate    DateTime
  lifespanMonths  Int
  image           String?
  imageHint       String?
  createdAt       DateTime @default(now())
}

model FoodItem {
  id          String        @id @default(cuid())
  name        String        @unique
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String
  createdAt  DateTime @default(now())
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model Exercise {
  id              String            @id @default(cuid())
  name            String            @unique
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json?
  commonMistakes  Json?
  alternatives    Json?
  loggedExercises LoggedExercise[]
}

model Promotion {
    id String @id @default(cuid())
    name String
    description String
    prize String
    cost String
    imageDataUri String
    imageHint String?
    endDate DateTime
    organizer User @relation(fields: [organizerId], references: [id])
    organizerId String
    sponsor Sponsor? @relation(fields: [sponsorId], references: [id])
    sponsorId String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MedicalPartner {
    id String @id @default(cuid())
    name String
    specialization String
    contact String
    avatar String?
    avatarHint String?
    tournaments Tournament[]
}

model League {
    id String @id @default(cuid())
    name String
    description String
    game String
    image String?
    imageHint String?
    teams LeagueTeam[]
    matches Match[]
    tournaments Tournament[]
}

model LeagueTeam {
    id String @id @default(cuid())
    league League @relation(fields: [leagueId], references: [id])
    leagueId String
    team Team @relation(fields: [teamId], references: [id])
    teamId String
    played Int
    wins Int
    draws Int
    losses Int
    points Int
    @@unique([leagueId, teamId])
}

model Activity {
  id            String      @id @default(cuid())
  type          ActivityType
  metadata      Json
  createdAt     DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  playground    Playground? @relation(fields: [playgroundId], references: [id])
  playgroundId  String?
}

model Notification {
  id            String      @id @default(cuid())
  type          String
  message       String
  href          String?
  isRead        Boolean     @default(false)
  createdAt     DateTime    @default(now())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  matchId       String?
  match         Match?      @relation(fields: [matchId], references: [id])
  announcementId String?
  announcement  TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
}

model TournamentAnnouncement {
    id           String         @id @default(cuid())
    subject      String
    message      String
    sentTo       Int
    createdAt    DateTime       @default(now())
    senderId     String
    sender       User           @relation(fields: [senderId], references: [id])
    tournamentId String
    tournament   Tournament     @relation(fields: [tournamentId], references: [id])
    notifications Notification[]
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  participants User[]    @relation("ChatParticipants")
  messages     Message[]
  teamId       String?   @unique
  team         Team?     @relation(fields: [teamId], references: [id])
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
}
