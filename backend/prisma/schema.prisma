// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @default(cuid())
  name                   String
  email                  String          @unique
  role                   String
  passwordHash           String
  avatar                 String?
  status                 String
  xp                     Int
  dateOfBirth            DateTime?
  location               String?
  mainSport              String?
  preferredSports        String[]
  telegram               String?
  discord                String?
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  teamsAsCaptain         Team[]        @relation("Captain")
  teamsAsMember          Team[]
  organizedTournaments   Tournament[]  @relation("Organizer")
  createdPlaygrounds     Playground[]
  challengesAsCreator    Challenge[]   @relation("Creator")
  challengesAsOpponent   Challenge[]   @relation("Opponent")
  friends              User[]        @relation("UserFriends")
  friendOf             User[]        @relation("UserFriends")
  sentFriendRequests   FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
  messages               Message[]
  activities             Activity[]
}

model Team {
  id               String       @id @default(cuid())
  name             String       @unique
  slug             String       @unique
  motto            String?
  game             String
  logo             String?
  dataAiHint       String?
  wins             Int          @default(0)
  losses           Int          @default(0)
  draws            Int          @default(0)
  rank             Int          @default(99)
  captainId        String
  homePlaygroundId String?
  captain          User         @relation("Captain", fields: [captainId], references: [id])
  members          User[]
  tournaments      Tournament[]
  matchesAsTeam1   Match[]      @relation("Team1Matches")
  matchesAsTeam2   Match[]      @relation("Team2Matches")
}

model Tournament {
  id                      String   @id @default(cuid())
  name                    String
  slug                    String   @unique
  game                    String
  description             String?
  type                    String
  format                  String
  category                String
  location                String
  participantCount        Int
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  status                  String
  organizerId             String
  organizer               User     @relation("Organizer", fields: [organizerId], references: [id])
  teams                   Team[]
  matches                 Match[]
}

model Match {
  id          String      @id @default(cuid())
  team1Id     String
  team2Id     String
  team1Score  Int?
  team2Score  Int?
  status      MatchStatus
  scheduledAt DateTime
  finishedAt  DateTime?
  location    String?
  refereeName String?
  tournamentId String?
  team1       Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team2       Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  tournament  Tournament? @relation(fields: [tournamentId], references: [id])
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Playground {
  id             String    @id @default(cuid())
  name           String
  address        String
  type           String
  surface        String
  coverImage     String?
  coverImageHint String?
  features       String[]
  rating         Float
  checkIns       Int
  status         String
  creatorId      String
  creator        User      @relation(fields: [creatorId], references: [id])
}

model Challenge {
  id           String           @id @default(cuid())
  title        String
  description  String
  discipline   String
  wager        Int
  status       ChallengeStatus
  result       String?
  creatorId    String
  opponentId   String?
  creator      User             @relation("Creator", fields: [creatorId], references: [id])
  opponent     User?            @relation("Opponent", fields: [opponentId], references: [id])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model FriendRequest {
  id        String   @id @default(cuid())
  fromId    String
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  from User @relation("SentFriendRequests", fields: [fromId], references: [id])
  to   User @relation("ReceivedFriendRequests", fields: [toId], references: [id])

  @@unique([fromId, toId])
}

model Message {
  id        String   @id @default(cuid())
  text      String
  chatId    String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
}

model Activity {
  id        String       @id @default(cuid())
  type      ActivityType
  timestamp DateTime     @default(now())
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  metadata  Json
}

enum ActivityType {
  MATCH_PLAYED
  TOURNAMENT_REGISTERED
  TEAM_JOINED
}
