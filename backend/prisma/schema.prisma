// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS

enum UserRole {
  ADMIN       @map("Администратор")
  MODERATOR   @map("Модератор")
  CAPTAIN     @map("Капитан")
  PLAYER      @map("Игрок")
  COACH       @map("Тренер")
  JUDGE       @map("Судья")
  MANAGER     @map("Менеджер")
  ORGANIZER   @map("Организатор")
  SPONSOR     @map("Спонсор")
  FAN         @map("Болельщик")
}

enum UserStatus {
  ACTIVE      @map("Активен")
  BANNED      @map("Забанен")
  INACTIVE    @map("Неактивен")
}

// MODELS

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    UserRole                 @default(PLAYER)
  status                  UserStatus               @default(ACTIVE)
  xp                      Int                      @default(0)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  isVerified              Boolean                  @default(false)
  preferredSports         String[]                 @default([])
  telegram                String?
  discord                 String?
  friends                 User[]                   @relation("Friendship")
  friendOf                User[]                   @relation("Friendship")
  sentFriendRequests      FriendRequest[]          @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]          @relation("ReceivedFriendRequests")
  createdTeams              Team[]                   @relation("CreatedTeams")
  captainOf               Team?                    @relation("Captain")
  teamsAsMember             Team[]                   @relation("TeamMembers")
  organizedTournaments      Tournament[]             @relation("OrganizedTournaments")
  judgedTournaments         Tournament[]             @relation("JudgedTournaments")
  refereedMatches           Match[]                  @relation("RefereeMatches")
  matchEvents               MatchEvent[]
  notifications             Notification[]
  sentReports               PlaygroundReport[]       @relation("ReportsSent")
  resolvedReports           Report[]                 @relation("ResolvedReports")
  reportedIn                Report[]                 @relation("ReportedIn")
  createdChallenges         Challenge[]              @relation("CreatedChallenges")
  acceptedChallenges        Challenge[]              @relation("AcceptedChallenges")
  organizedPromotions       Promotion[]
  careerHistory             CareerHistory[]
  coachProfile              CoachProfile?
  coaching                  User[]                   @relation("CoachedBy")
  coachedBy                 User?                    @relation("CoachedBy", fields: [coachId], references: [id])
  coachId                   String?
  sponsorships              Sponsorship[]
  sponsorshipOffers         SponsorshipOffer[]
  measurements              Measurement[]
  trainingLogs              TrainingLog[]
  createdTrainingProposals  TrainingProposal[]       @relation("SentProposals")
  receivedTrainingProposals TrainingProposal[]       @relation("ReceivedProposals")
  createdInventoryItems     InventoryItem[]
  foodLog                   FoodLogEntry[]
  createdPolls              Poll[]
  pollVotes                 PollVote[]
  sentAnnouncements         TournamentAnnouncement[]
  teamApplications          TeamApplication[]
  activities                Activity[]
  chats                     Chat[]                   @relation("UserChats")
  messages                  Message[]
  createdLobbies            LfgLobby[]               @relation("CreatedLobbies")
  joinedLobbies             LfgLobby[]               @relation("JoinedLobbies")
  trainingPrograms          UserTrainingProgram[]
  createdPlaygrounds        Playground[]
  playgroundReviews         PlaygroundReview[]
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@unique([fromId, toId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}


model Team {
  id                 String             @id @default(cuid())
  name               String
  motto              String?
  logo               String?
  dataAiHint         String?
  game               String
  rank               Int                @default(1)
  wins               Int                @default(0)
  losses             Int                @default(0)
  draws              Int                @default(0)
  pitch              String?
  seekingSponsorship Boolean            @default(false)
  slug               String             @unique
  creator            User               @relation("CreatedTeams", fields: [creatorId], references: [id])
  creatorId          String
  captain            User               @relation("Captain", fields: [captainId], references: [id])
  captainId          String             @unique
  members            User[]             @relation("TeamMembers")
  tournaments        Tournament[]
  team1Matches       Match[]            @relation("Team1Matches")
  team2Matches       Match[]            @relation("Team2Matches")
  chat               Chat?
  practices          TeamPractice[]
  sponsorships       Sponsorship[]      @relation("SponsoredTeams")
  sponsorshipOffers  SponsorshipOffer[]
  matchEvents        MatchEvent[]
  applications       TeamApplication[]
  sponsors           Sponsor[]          @relation("SponsoredTeams")
  leagueTeams        LeagueTeam[]
  homePlayground     Playground?        @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  game                    String
  description             String?
  rules                   String?
  prizePool               String?
  status                  TournamentStatus         @default(REGISTRATION)
  format                  TournamentFormat
  type                    TournamentType
  category                String
  location                String
  participantCount        Int
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  bannerImage             String?
  bannerImageHint         String?
  organizer               User                     @relation("OrganizedTournaments", fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
  judges                  User[]                   @relation("JudgedTournaments")
  sponsors                Sponsor[]                @relation("SponsoredTournaments")
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  applications            TeamApplication[]
  media                   TournamentMedia[]
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

enum TournamentFormat {
  single_elimination
  round_robin
  groups
}

enum TournamentType {
  team
  individual
}

model TournamentMedia {
    id String @id @default(cuid())
    tournament Tournament @relation(fields: [tournamentId], references: [id])
    tournamentId String
    type         MediaType
    src          String
    description  String?
    hint         String?
    createdAt    DateTime   @default(now())
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

model Match {
  id              String      @id @default(cuid())
  team1           Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournament      Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  league          League?     @relation(fields: [leagueId], references: [id])
  leagueId        String?
  referee         User?       @relation("RefereeMatches", fields: [refereeId], references: [id])
  refereeId       String?
  round           Int?
  location        String?
  playground      Playground? @relation(fields: [playgroundId], references: [id])
  playgroundId    String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  events          MatchEvent[]
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model MatchEvent {
  id        String         @id @default(cuid())
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  team      Team           @relation(fields: [teamId], references: [id])
  teamId    String
  player    User           @relation(fields: [playerId], references: [id])
  playerId  String
  type      MatchEventType
  timestamp DateTime       @default(now())
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

model Sport {
  id         String      @id
  name       String
  icon       String
  category   String
  challenges Challenge[]
}

model Sponsor {
  id              String         @id
  name            String
  logo            String?
  logoHint        String?
  description     String
  profileUrl      String
  interests       String[]
  tournaments     Tournament[]   @relation("SponsoredTournaments")
  teams           Team[]         @relation("SponsoredTeams")
  promotions      Promotion[]
  sponsorships    Sponsorship[]
  offersSent      SponsorshipOffer[]
}

model MedicalPartner {
    id String @id @default(cuid())
    name String
    specialization String
    contact String
    avatar String?
    avatarHint String?
    tournaments Tournament[]
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  creator      User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  opponentId   String?
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  status       ChallengeStatus @default(OPEN)
  result       String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Promotion {
    id String @id @default(cuid())
    name String
    description String
    prize String
    sponsor Sponsor? @relation(fields: [sponsorId], references: [id])
    sponsorId String?
    organizer User @relation(fields: [organizerId], references: [id])
    organizerId String
    imageDataUri String
    imageHint String
    cost String
    endDate DateTime
    createdAt DateTime @default(now())
}

model Playground {
  id          String      @id @default(cuid())
  name        String
  address     String
  type        String
  coverImage  String?
  coverImageHint String?
  surface     String
  features    String[]
  rating      Float
  checkIns    Int         @default(0)
  status      PlaygroundStatus @default(PENDING_MODERATION)
  creator     User        @relation(fields: [creatorId], references: [id])
  creatorId   String
  reviews     PlaygroundReview[]
  reports     PlaygroundReport[]
  matches     Match[]
  teamPractices TeamPractice[]
  lfgLobbies  LfgLobby[]
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
  REJECTED
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String       @id @default(cuid())
  playground   Playground   @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User         @relation("ReportsSent", fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus
  createdAt    DateTime     @default(now())
}

model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation(fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportedIn", fields: [reportedUserId], references: [id])
  reportedUserId String
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  resolver       User?        @relation("ResolvedReports", fields: [resolverId], references: [id])
  resolverId     String?
  resolution     String?
  createdAt      DateTime     @default(now())
  resolvedAt     DateTime?
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]    @relation("UserChats")
  messages     Message[]
  teamId       String?   @unique
  team         Team?     @relation(fields: [teamId], references: [id])
  createdAt    DateTime  @default(now())
}

enum ChatType {
  DIRECT
  GROUP
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime @default(now())
}

model LfgLobby {
  id           String         @id @default(cuid())
  type         LfgLobbyType
  sport        String
  location     String
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  comment      String
  status       LfgLobbyStatus @default(OPEN)
  // Relations
  creator      User           @relation("CreatedLobbies", fields: [creatorId], references: [id])
  creatorId    String
  players      User[]         @relation("JoinedLobbies")
  playground   Playground?    @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  createdAt    DateTime       @default(now())
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum LfgLobbyType {
  GAME
  TRAINING
}

model CareerHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
}

model Sponsorship {
    id String @id @default(cuid())
    team Team @relation("SponsoredTeams", fields: [teamId], references: [id])
    teamId String
    sponsor Sponsor @relation(fields: [sponsorId], references: [id])
    sponsorId String
    user User @relation(fields: [userId], references: [id])
    userId String
    amount Float
    signedAt DateTime @default(now())
    endsAt DateTime
}

model SponsorshipOffer {
  id              String               @id @default(cuid())
  team            Team                 @relation(fields: [teamId], references: [id])
  teamId          String
  sponsor         Sponsor              @relation(fields: [sponsorId], references: [id])
  sponsorId       String
  user            User                 @relation(fields: [userId], references: [id])
  userId          String
  offerText       String
  status          SponsorshipStatus    @default(PENDING)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
}

enum SponsorshipStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model TeamApplication {
  id           String                  @id @default(cuid())
  team         Team                    @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                    @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?             @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  message      String?
  status       TeamApplicationStatus   @default(PENDING)
  createdAt    DateTime                @default(now())
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

model Achievement {
  id             String            @id @default(cuid())
  name           String            @unique
  description    String
  icon           String
  users          UserAchievement[]
}

model UserAchievement {
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  createdAt     DateTime    @default(now())

  @@id([userId, achievementId])
}

model TrainingProgram {
    id String @id @default(cuid())
    name String
    description String
    goal String
    daysPerWeek Int
    splitType String
    author String
    coverImage String
    coverImageHint String
    isAiGenerated Boolean @default(false)
    weeklySplit WorkoutDay[]
    assignedTo UserTrainingProgram[]
    proposals TrainingProposal[]
}

model WorkoutDay {
    id String @id @default(cuid())
    trainingProgram TrainingProgram @relation(fields: [trainingProgramId], references: [id])
    trainingProgramId String
    day Int
    title String
    exercises WorkoutExercise[]
}

model WorkoutExercise {
    id String @id @default(cuid())
    workoutDay WorkoutDay @relation(fields: [workoutDayId], references: [id])
    workoutDayId String
    name String
    sets String
    reps String
    plannedWeight String?
    isSupersetWithPrevious Boolean?
    technique String?
}

model UserTrainingProgram {
    user User @relation(fields: [userId], references: [id])
    userId String
    program TrainingProgram @relation(fields: [programId], references: [id])
    programId String
    assignedAt DateTime @default(now())
    isActive Boolean @default(true)
    
    @@id([userId, programId])
}

model TrainingLog {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    date DateTime
    workoutName String?
    status TrainingLogStatus
    exercises LoggedExercise[]
    mood Mood?
    notes String?
    coachNotes String?
}

enum TrainingLogStatus {
    COMPLETED
    PLANNED
    SKIPPED
}

enum Mood {
    GREAT
    GOOD
    OK
    BAD
}

model LoggedExercise {
    id String @id @default(cuid())
    trainingLog TrainingLog @relation(fields: [trainingLogId], references: [id])
    trainingLogId String
    exercise Exercise @relation(fields: [exerciseId], references: [id])
    exerciseId String
    notes String?
    isSupersetWithPrevious Boolean?
    sets LoggedSet[]
}

model LoggedSet {
    id String @id @default(cuid())
    loggedExercise LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
    loggedExerciseId String
    plannedReps String?
    plannedWeight String?
    loggedReps Int?
    loggedWeight Float?
    rpe Int? // Rate of Perceived Exertion
    isCompleted Boolean @default(false)
}


model Exercise {
  id              String      @id @default(cuid())
  name            String      @unique
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json
  commonMistakes  Json
  alternatives    Json
  loggedExercises LoggedExercise[]
}


model Measurement {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    date DateTime
    weight Float
    bodyFat Float?
    chest Float?
    waist Float?
    hips Float?
    biceps Float?
    thigh Float?
}

model TrainingProposal {
    id String @id @default(cuid())
    from User @relation("SentProposals", fields: [fromId], references: [id])
    fromId String
    to User @relation("ReceivedProposals", fields: [toId], references: [id])
    toId String
    sport String
    date DateTime
    comment String?
    status TrainingProposalStatus @default(PENDING)
    program TrainingProgram? @relation(fields: [programId], references: [id])
    programId String?
    createdAt DateTime @default(now())
}

enum TrainingProposalStatus {
    PENDING
    ACCEPTED
    DECLINED
}

model InventoryItem {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    name String
    category String
    type String
    purchaseDate DateTime
    lifespanMonths Int
    image String?
    imageHint String?
    createdAt DateTime @default(now())
}

model StoreItem {
    id String @id @default(cuid())
    name String
    description String
    price Float
    image String?
    imageHint String?
    category String
    isRealMoney Boolean @default(false)
}

model FaqItem {
  id String @id @default(cuid())
  category String
  question String
  answer String
  createdAt DateTime @default(now())
}

model FoodItem {
  id String @id @default(cuid())
  name String @unique
  category String
  image String?
  imageHint String?
  calories Float
  protein Float
  fat Float
  carbs Float
  description String?
  logEntries FoodLogEntry[]
}

model FoodLogEntry {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  foodItem FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams Int
  meal String
  createdAt DateTime @default(now())
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  votes     PollVote[]
  author    User?        @relation(fields: [authorId], references: [id])
  authorId  String?
}

model PollOption {
  id      String     @id @default(cuid())
  poll    Poll       @relation(fields: [pollId], references: [id])
  pollId  String
  text    String
  votes   PollVote[]
}

model PollVote {
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  poll        Poll       @relation(fields: [pollId], references: [id])
  pollId      String
  pollOption  PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt   DateTime   @default(now())

  @@id([userId, pollId])
}

model TournamentAnnouncement {
    id String @id @default(cuid())
    tournament Tournament @relation(fields: [tournamentId], references: [id])
    tournamentId String
    sender User @relation(fields: [senderId], references: [id])
    senderId String
    subject String
    message String
    sentTo Int
    createdAt DateTime @default(now())
    notifications Notification[]
}

model Notification {
  id           String        @id @default(cuid())
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  type         NotificationType
  message      String
  href         String?
  isRead       Boolean       @default(false)
  createdAt    DateTime      @default(now())
  // Optional relations to specific entities
  matchId      String?
  announcement TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
  announcementId String?
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  TEAM_INVITE
  SYSTEM
}

model Activity {
    id String @id @default(cuid())
    type ActivityType
    user User @relation(fields: [userId], references: [id])
    userId String
    metadata Json
    playground Playground? @relation(fields: [playgroundId], references: [id])
    playgroundId String?
    createdAt DateTime @default(now())
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model League {
    id String @id @default(cuid())
    name String @unique
    description String
    game String
    image String?
    imageHint String?
    teams LeagueTeam[]
    matches Match[]
}

model LeagueTeam {
    league League @relation(fields: [leagueId], references: [id])
    leagueId String
    team Team @relation(fields: [teamId], references: [id])
    teamId String
    played Int @default(0)
    wins Int @default(0)
    draws Int @default(0)
    losses Int @default(0)
    points Int @default(0)

    @@id([leagueId, teamId])
}
