// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                 @id @default(cuid())
  name                    String
  email                   String                 @unique
  passwordHash            String
  avatar                  String?
  role                    String
  status                  String
  xp                      Int
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  teamsAsMember           Team[]                 @relation("TeamMembers")
  teamsAsCaptain          Team[]                 @relation("TeamCaptain")
  teamsAsCreator          Team[]                 @relation("TeamCreator")
  organizedTournaments    Tournament[]
  activities              Activity[]
  friends                 User[]                 @relation("Friendship")
  friendsOf               User[]                 @relation("Friendship")
  sentFriendRequests      FriendRequest[]        @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]        @relation("ReceivedFriendRequests")
  coachProfile            CoachProfile?
  coaching                User[]                 @relation("CoachStudent")
  coach                   User?                  @relation("CoachStudent", fields: [coachId], references: [id])
  coachId                 String?
  judgedMatches           Match[]                @relation("JudgedMatches")
  tournamentsAsJudge      Tournament[]           @relation("TournamentJudges")
  organizedPromotions     Promotion[]
  inventory               InventoryItem[]
  measurements            Measurement[]
  foodLog                 FoodLogEntry[]
  trainingLogs            TrainingLog[]
  trainingProposalsSent   TrainingProposal[]     @relation("TrainingProposalFrom")
  trainingProposalsRecvd  TrainingProposal[]     @relation("TrainingProposalTo")
  pollVotes               PollVote[]
  createdPlaygrounds      Playground[]
  messages                Message[]
  chats                   Chat[]                 @relation("ChatParticipants")
  notifications           Notification[]
  sentAnnouncements       TournamentAnnouncement[]
}

model Team {
  id                 String              @id @default(cuid())
  name               String
  slug               String              @unique
  game               String
  motto              String?
  logo               String?
  dataAiHint         String?
  rank               Int                 @default(0)
  wins               Int                 @default(0)
  losses             Int                 @default(0)
  draws              Int                 @default(0)
  homePlaygroundId   String?
  seekingSponsorship Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  creator            User                @relation("TeamCreator", fields: [creatorId], references: [id])
  creatorId          String
  captain            User                @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId          String
  members            User[]              @relation("TeamMembers")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]             @relation("Team1Matches")
  matchesAsTeam2     Match[]             @relation("Team2Matches")
  sponsors           Sponsor[]           @relation("TeamSponsors")
  applications       TeamApplication[]
  chat               Chat?               @relation("TeamChat")
}

model Match {
  id              String       @id @default(cuid())
  team1           Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  location        String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  tournament      Tournament?  @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  playgroundId    String?
  leagueId        String?
  league          League?      @relation(fields: [leagueId], references: [id])
  referee         User?        @relation("JudgedMatches", fields: [refereeId], references: [id])
  refereeId       String?
  refereeName     String?      // Denormalized for easy display
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  game                  String
  description           String?
  type                  String
  format                String
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  status                String
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  organizer             User                     @relation(fields: [organizerId], references: [id])
  organizerId           String
  teams                 Team[]
  matches               Match[]
  judges                User[]                   @relation("TournamentJudges")
  sponsors              Sponsor[]                @relation("TournamentSponsors")
  medicalPartners       MedicalPartner[]         @relation("TournamentMedicalPartners")
  applications          TeamApplication[]
  announcements         TournamentAnnouncement[]
}

model Activity {
  id           String       @id @default(cuid())
  type         ActivityType
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  metadata     Json
  timestamp    DateTime     @default(now())
  playgroundId String?      @index
  playground   Playground?  @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
}

enum ActivityType {
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  STATUS_POSTED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fromId, toId])
}

model Challenge {
  id          String           @id @default(cuid())
  title       String
  description String
  discipline  String
  wager       Int
  creator     User             @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId   String
  opponent    User?            @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  opponentId  String?
  status      ChallengeStatus
  result      String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Playground {
  id             String     @id @default(cuid())
  name           String
  address        String
  type           String
  coverImage     String?
  coverImageHint String?
  surface        String
  features       String[]
  rating         Float
  checkIns       Int
  status         String     @default("PENDING_MODERATION") // PENDING_MODERATION, APPROVED, REJECTED
  creatorId      String
  creator        User       @relation(fields: [creatorId], references: [id])
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  activities     Activity[]
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  rating         Float
  price          Decimal
}

model Sponsor {
  id            String       @id @default(cuid())
  name          String
  logo          String?
  logoHint      String?
  description   String
  profileUrl    String
  interests     String[]
  teams         Team[]       @relation("TeamSponsors")
  promotions    Promotion[]
  tournaments   Tournament[] @relation("TournamentSponsors")
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  tournament   Tournament            @relation(fields: [tournamentId], references: [id])
  tournamentId String
  status       TeamApplicationStatus @default(PENDING)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  @@unique([teamId, tournamentId])
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         String // DIRECT, GROUP
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  participants User[]    @relation("ChatParticipants")
  messages     Message[]
  teamId       String?   @unique
  team         Team?     @relation("TeamChat", fields: [teamId], references: [id])
}

model Message {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String
  message   String
  href      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model StoreItem {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean
}

model Exercise {
  id              String   @id @default(cuid())
  name            String
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  techniqueTips   String[]
  commonMistakes  String[]
  alternatives    String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  LoggedExercise  LoggedExercise[]
}

model TrainingProgram {
  id              String         @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean        @default(false)
  weeklySplit     WorkoutDay[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgramId String
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDayId            String
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model TrainingLog {
  id          String           @id @default(cuid())
  date        DateTime
  userId      String
  user        User             @relation(fields: [userId], references: [id])
  workoutName String
  status      String
  mood        String?
  notes       String?
  coachNotes  String?
  exercises   LoggedExercise[]
}

model LoggedExercise {
  id            String      @id @default(cuid())
  trainingLogId String
  trainingLog   TrainingLog @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
  exerciseId    String
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  notes         String?
  sets          LoggedSet[]
}

model LoggedSet {
  id               String  @id @default(cuid())
  loggedExerciseId String
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
  plannedReps      String
  plannedWeight    String
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean
}

model Promotion {
    id            String    @id @default(cuid())
    name          String
    description   String
    prize         String
    cost          String
    imageDataUri  String
    imageHint     String
    endDate       DateTime
    organizer     User      @relation(fields: [organizerId], references: [id])
    organizerId   String
    sponsor       Sponsor?  @relation(fields: [sponsorId], references: [id])
    sponsorId     String?
    createdAt     DateTime  @default(now())
}

model League {
    id          String        @id @default(cuid())
    name        String
    description String
    game        String
    image       String?
    imageHint   String?
    teams       LeagueTeam[]
    matches     Match[]
}

model LeagueTeam {
    id        String @id @default(cuid())
    league    League @relation(fields: [leagueId], references: [id])
    leagueId  String
    team      Team   @relation(fields: [teamId], references: [id])
    teamId    String
    played    Int
    wins      Int
    losses    Int
    draws     Int
    points    Int

    @@unique([leagueId, teamId])
}

model InventoryItem {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  name            String
  category        String
  type            String
  purchaseDate    DateTime
  lifespanMonths  Int
  image           String?
  imageHint       String?
  createdAt       DateTime  @default(now())
}

model FoodItem {
  id          String          @id @default(cuid())
  name        String          @unique
  category    String // 'Продукты' or 'Спортивное питание'
  image       String?
  imageHint   String?
  calories    Int // per 100g
  protein     Float // per 100g
  fat         Float // per 100g
  carbs       Float // per 100g
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  foodItemId  String
  foodItem    FoodItem @relation(fields: [foodItemId], references: [id])
  grams       Int
  meal        String // Завтрак, Обед, Ужин, Перекус
  createdAt   DateTime @default(now())
}

model Measurement {
  id      String    @id @default(cuid())
  userId  String
  user    User      @relation(fields: [userId], references: [id])
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

model TrainingProposal {
  id        String   @id @default(cuid())
  fromId    String
  from      User     @relation("TrainingProposalFrom", fields: [fromId], references: [id])
  toId      String
  to        User     @relation("TrainingProposalTo", fields: [toId], references: [id])
  sport     String
  date      DateTime
  comment   String?
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
}

model Poll {
  id        String      @id @default(cuid())
  title     String
  question  String
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  options   PollOption[]
  votes     PollVote[]
}

model PollOption {
  id      String     @id @default(cuid())
  text    String
  pollId  String
  poll    Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes   PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  pollId       String
  poll         Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollOptionId String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())

  @@unique([userId, pollId])
}

model FaqItem {
    id          String  @id @default(cuid())
    category    String
    question    String
    answer      String
    createdAt   DateTime @default(now())
}

model TournamentAnnouncement {
    id          String      @id @default(cuid())
    tournamentId String
    tournament   Tournament  @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
    senderId     String
    sender       User        @relation(fields: [senderId], references: [id])
    subject      String
    message      String
    sentTo       Int
    createdAt    DateTime    @default(now())
}

model MedicalPartner {
    id              String      @id @default(cuid())
    name            String
    specialization  String
    contact         String
    tournaments     Tournament[]@relation("TournamentMedicalPartners")
}
