datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// -------------------
// CORE ENTITIES
// -------------------

model User {
  id                            String                    @id @default(cuid())
  email                         String                    @unique
  name                          String
  passwordHash                  String
  avatar                        String?
  role                          String
  status                        String
  xp                            Int                       @default(0)
  createdAt                     DateTime                  @default(now())
  updatedAt                     DateTime                  @updatedAt
  isVerified                    Boolean                   @default(false)
  dateOfBirth                   DateTime?
  location                      String?
  mainSport                     String?
  preferredSports               String[]
  telegram                      String?
  discord                       String?

  // Relations
  teamsAsMember                 Team[]                    @relation("TeamMembers")
  teamsAsCaptain                Team[]                    @relation("TeamCaptain")
  createdTeams                  Team[]                    @relation("CreatedTeams")
  organizedTournaments          Tournament[]              @relation("Organizer")
  judgedMatches                 Match[]                   @relation("RefereeMatches")
  messages                      Message[]
  notifications                 Notification[]
  friendRequestsSent            FriendRequest[]           @relation("SentFriendRequests")
  friendRequestsReceived        FriendRequest[]           @relation("ReceivedFriendRequests")
  friends                       User[]                    @relation("Friends")
  friendsOf                     User[]                    @relation("Friends")
  reportsMade                   Report[]                  @relation("ReportsMade")
  reportsAgainst                Report[]                  @relation("ReportsAgainst")
  reportsResolved               Report[]                  @relation("ReportsResolved")
  careerHistory                 CareerHistory[]
  createdPlaygrounds            Playground[]
  authoredReviews               PlaygroundReview[]
  playgroundReports             PlaygroundReport[]
  coachProfile                  CoachProfile?
  trainingLogs                  TrainingLog[]
  foodLog                       FoodLogEntry[]
  measurements                  Measurement[]
  trainingProposalsSent         TrainingProposal[]        @relation("SentTrainingProposals")
  trainingProposalsReceived     TrainingProposal[]        @relation("ReceivedTrainingProposals")
  challengesCreated             Challenge[]               @relation("ChallengesCreated")
  challengesAsOpponent          Challenge[]               @relation("ChallengesAsOpponent")
  pollVotes                     PollVote[]
  organizedPromotions           Promotion[]
  matchEvents                   MatchEvent[]
  lfgCreated                    LfgLobby[]                @relation("LfgCreator")
  lfgParticipations             LfgLobby[]                @relation("LfgParticipants")
  userTrainingPrograms          UserTrainingProgram[]
  sentAnnouncements             TournamentAnnouncement[]
  inventory                     InventoryItem[]
  sponsorshipsAsCaptain         Sponsorship[]
  sponsorshipOffersAsCaptain    SponsorshipOffer[]
  assignedToTournamentsAsJudge  User[]                    @relation("JudgedTournaments")
  assignedToTournamentsAsMedic  MedicalPartner[]          @relation("MedicalPartnersOnTournaments")
}

model Team {
  id                 String             @id @default(cuid())
  name               String
  slug               String             @unique
  logo               String?
  dataAiHint         String?
  motto              String?
  game               String
  rank               Int                @default(9999)
  wins               Int                @default(0)
  losses             Int                @default(0)
  draws              Int                @default(0)
  seekingSponsorship Boolean            @default(false)
  pitch              String?
  goals              String?

  // Relations
  creator            User               @relation("CreatedTeams", fields: [creatorId], references: [id])
  creatorId          String
  captain            User               @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId          String
  members            User[]             @relation("TeamMembers")
  tournaments        Tournament[]
  team1Matches       Match[]            @relation("Team1Matches")
  team2Matches       Match[]            @relation("Team2Matches")
  matchEvents        MatchEvent[]
  homePlayground     Playground?        @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?
  applications       TeamApplication[]
  sponsorships       Sponsorship[]
  sponsorshipOffers  SponsorshipOffer[]
  careerHistory      CareerHistory[]
  chat               Chat?
  practices          TeamPractice[]
  leagueTeams        LeagueTeam[]
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  game                  String
  description           String?                  @db.Text
  type                  String
  format                String
  category              String
  location              String
  participantCount      Int
  prizePool             String?
  rules                 String?                  @db.Text
  status                String
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  bannerImage           String?
  bannerImageHint       String?

  // Relations
  organizer             User                     @relation("Organizer", fields: [organizerId], references: [id])
  organizerId           String
  teams                 Team[]
  matches               Match[]
  judges                User[]                   @relation("JudgedTournaments")
  sponsors              Sponsor[]                @relation("SponsoredTournaments")
  medicalPartners       MedicalPartner[]         @relation("MedicalPartnersOnTournaments")
  media                 TournamentMedia[]
  announcements         TournamentAnnouncement[]
  applications          TeamApplication[]
  league                League?                  @relation(fields: [leagueId], references: [id])
  leagueId              String?
}

model Match {
  id              String       @id @default(cuid())
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  round           Int?
  location        String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?

  // Relations
  team1           Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  tournament      Tournament?  @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  playground      Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId    String?
  referee         User?        @relation("RefereeMatches", fields: [refereeId], references: [id])
  refereeId       String?
  events          MatchEvent[]
  league          League?      @relation(fields: [leagueId], references: [id])
  leagueId        String?
  notifications   Notification[]
}

model Playground {
  id             String             @id @default(cuid())
  name           String
  address        String
  type           String
  coverImage     String?
  coverImageHint String?
  surface        String
  features       String[]
  rating         Float
  status         PlaygroundStatus   @default(PENDING_MODERATION)
  checkIns       Int                @default(0)

  // Relations
  creator          User               @relation(fields: [creatorId], references: [id])
  creatorId        String
  reviews          PlaygroundReview[]
  reports          PlaygroundReport[]
  matches          Match[]
  residentTeams    Team[]
  scheduledLobbies LfgLobby[]
  activities       Activity[]
}

// -------------------
// FEATURE-SPECIFIC MODELS
// -------------------

model CoachProfile {
  id             String   @id @default(cuid())
  specialization String
  description    String   @db.Text
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
}

model Sponsor {
  id          String             @id @default(cuid())
  name        String             @unique
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]

  // Relations
  promotions  Promotion[]
  sponsorships Sponsorship[]
  offers      SponsorshipOffer[]
  tournaments Tournament[]       @relation("SponsoredTournaments")
}

model Promotion {
  id           String   @id @default(cuid())
  name         String
  description  String
  prize        String
  cost         String
  imageDataUri String
  imageHint    String
  endDate      DateTime

  // Relations
  organizer    User     @relation(fields: [organizerId], references: [id])
  organizerId  String
  sponsor      Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  status       ChallengeStatus @default(OPEN)
  result       String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relations
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  creator      User            @relation("ChallengesCreated", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("ChallengesAsOpponent", fields: [opponentId], references: [id])
  opponentId   String?
}

model Sport {
  id         String      @id
  name       String      @unique
  icon       String
  category   String

  // Relations
  challenges Challenge[]
}

model TeamApplication {
  id           String                @id @default(cuid())
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  // Relations
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
}

model FriendRequest {
  id        String              @id @default(cuid())
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  // Relations
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
}

model Report {
  id             String       @id @default(cuid())
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  resolvedAt     DateTime?
  resolution     String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  reporter       User         @relation("ReportsMade", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportsAgainst", fields: [reportedUserId], references: [id])
  reportedUserId String
  resolver       User?        @relation("ReportsResolved", fields: [resolverId], references: [id])
  resolverId     String?
}

model CareerHistory {
  id        String   @id @default(cuid())
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model PlaygroundReport {
  id           String       @id @default(cuid())
  category     String
  comment      String
  severity     String
  status       ReportStatus
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  playground   Playground   @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User         @relation(fields: [reporterId], references: [id])
  reporterId   String
}

model TeamPractice {
  id          String     @id @default(cuid())
  title       String
  description String?
  date        DateTime

  // Relations
  team        Team       @relation(fields: [teamId], references: [id])
  teamId      String
  playground  Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model LfgLobby {
  id            String         @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  status        LfgLobbyStatus @default(OPEN)
  createdAt     DateTime       @default(now())

  // Relations
  playground    Playground?    @relation(fields: [playgroundId], references: [id])
  playgroundId  String?
  creator       User           @relation("LfgCreator", fields: [creatorId], references: [id])
  creatorId     String
  players       User[]         @relation("LfgParticipants")
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?

  // Relations
  teams       LeagueTeam[]
  matches     Match[]
  tournaments Tournament[]
}

model LeagueTeam {
  played   Int
  wins     Int
  draws    Int
  losses   Int
  points   Int

  // Relations
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String

  @@id([leagueId, teamId])
}

model Sponsorship {
  id        String   @id @default(cuid())
  amount    Decimal
  signedAt  DateTime @default(now())

  // Relations
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId String
}

model SponsorshipOffer {
  id        String                @id @default(cuid())
  offerText String
  status    TeamApplicationStatus @default(PENDING)
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  // Relations
  team      Team                  @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor               @relation(fields: [sponsorId], references: [id])
  sponsorId String
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?

  // Relations
  tournaments    Tournament[] @relation("MedicalPartnersOnTournaments")
}

model TournamentMedia {
  id          String     @id @default(cuid())
  type        String // IMAGE, VIDEO, AUDIO
  src         String
  description String?
  hint        String?
  createdAt   DateTime   @default(now())

  // Relations
  tournament  Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
}

model TournamentAnnouncement {
  id            String         @id @default(cuid())
  subject       String
  message       String
  sentTo        Int
  createdAt     DateTime       @default(now())

  // Relations
  tournament    Tournament     @relation(fields: [tournamentId], references: [id])
  tournamentId  String
  sender        User           @relation(fields: [senderId], references: [id])
  senderId      String
  notifications Notification[]
}

model Notification {
  id             String                  @id @default(cuid())
  type           NotificationType
  message        String
  href           String?
  isRead         Boolean                 @default(false)
  createdAt      DateTime                @default(now())

  // Relations
  user           User                    @relation(fields: [userId], references: [id])
  userId         String
  announcement   TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
  announcementId String?                 @unique
  match          Match?                  @relation(fields: [matchId], references: [id])
  matchId        String?
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String         @unique
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?

  // Relations
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  grams      Int
  meal       String
  createdAt  DateTime @default(now())

  // Relations
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
}

model Measurement {
  id      String    @id @default(cuid())
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?

  // Relations
  user    User      @relation(fields: [userId], references: [id])
  userId  String
}

model TrainingProgram {
  id              String                @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String?
  coverImageHint  String?
  isAiGenerated   Boolean               @default(false)

  // Relations
  weeklySplit     WorkoutDay[]
  assignedToUsers UserTrainingProgram[]
  trainingProposals TrainingProposal[]
}

model UserTrainingProgram {
  assignedAt DateTime @default(now())
  isActive   Boolean  @default(true)

  // Relations
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  program   TrainingProgram @relation(fields: [programId], references: [id])
  programId String

  @@id([userId, programId])
}

model WorkoutDay {
  id                String            @id @default(cuid())
  day               Int
  title             String

  // Relations
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                     String   @id @default(cuid())
  name                   String
  sets                   String
  reps                   String
  plannedWeight          String?
  isSupersetWithPrevious Boolean?
  technique              String?

  // Relations
  workoutDay             WorkoutDay @relation(fields: [workoutDayId], references: [id])
  workoutDayId           String
}

model TrainingLog {
  id          String           @id @default(cuid())
  date        DateTime
  workoutName String?
  status      TrainingLogStatus
  mood        Mood?
  notes       String?
  coachNotes  String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  exercises   LoggedExercise[]
}

model LoggedExercise {
  id                     String    @id @default(cuid())
  notes                  String?
  isSupersetWithPrevious Boolean?

  // Relations
  trainingLog              TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId            String
  exercise                 Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId               String
  sets                     LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Int?
  isCompleted      Boolean

  // Relations
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
}

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String           @db.Text
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json

  // Relations
  loggedExercises LoggedExercise[]
}

model TrainingProposal {
  id        String                 @id @default(cuid())
  sport     String
  date      DateTime
  comment   String?
  status    TrainingProposalStatus @default(PENDING)
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt

  // Relations
  from      User                   @relation("SentTrainingProposals", fields: [fromId], references: [id])
  fromId    String
  to        User                   @relation("ReceivedTrainingProposals", fields: [toId], references: [id])
  toId      String
  program   TrainingProgram?       @relation(fields: [programId], references: [id])
  programId String?
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String  @unique
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)
}

model InventoryItem {
  id             String   @id @default(cuid())
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())

  // Relations
  user           User     @relation(fields: [userId], references: [id])
  userId         String
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  options   PollOption[]
  author    User?        @relation(fields: [authorId], references: [id])
  authorId  String?
  votes     PollVote[]
}

model PollOption {
  id     String     @id @default(cuid())
  text   String

  // Relations
  poll   Poll       @relation(fields: [pollId], references: [id])
  pollId String
  votes  PollVote[]
}

model PollVote {
  // Relations
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String

  @@id([userId, pollId])
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  createdAt    DateTime  @default(now())

  // Relations
  participants User[]    @relation("ChatParticipants")
  messages     Message[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())

  // Relations
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Activity {
  id           String       @id @default(cuid())
  type         ActivityType
  metadata     Json
  createdAt    DateTime     @default(now())

  // Relations
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId String?
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

// -------------------
// ENUMS
// -------------------

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  SHOT
  SHOT_ON_TARGET
  CORNER
  FOUL
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

enum PlaygroundStatus {
  PENDING_MODERATION
  APPROVED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  CHAT_MESSAGE
  CHALLENGE
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

enum ChatType {
  PRIVATE
  GROUP
}
