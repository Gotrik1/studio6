// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- CORE MODELS ---

model User {
  id                        String                   @id @default(cuid())
  email                     String                   @unique
  name                      String
  passwordHash              String
  avatar                    String?
  role                      String
  status                    String
  xp                        Int                      @default(0)
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  dateOfBirth               DateTime?
  location                  String?
  mainSport                 String?
  isVerified                Boolean                  @default(false)
  preferredSports           String[]
  telegram                  String?
  discord                   String?
  organizedTournaments      Tournament[]             @relation("OrganizedTournaments")
  judgedMatches             Match[]                  @relation("JudgedMatches")
  createdTeams              Team[]                   @relation("CreatedTeams")
  captainOfTeams            Team[]                   @relation("CaptainOfTeams")
  teamsAsMember             Team[]                   @relation("TeamMembers")
  sentFriendRequests        FriendRequest[]          @relation("SentFriendRequests")
  receivedFriendRequests    FriendRequest[]          @relation("ReceivedFriendRequests")
  friends                   User[]                   @relation("Friends")
  friendOf                  User[]                   @relation("Friends")
  reportsSent               Report[]                 @relation("ReportsSent")
  reportsReceived           Report[]                 @relation("ReportsReceived")
  reportsResolved           Report[]                 @relation("ReportsResolved")
  careerHistory             CareerHistory[]
  coachProfile              CoachProfile?
  sponsorships              Sponsorship[]
  trainingProposalsSent     TrainingProposal[]       @relation("ProposalsSent")
  trainingProposalsRcvd     TrainingProposal[]       @relation("ProposalsReceived")
  pollsVoted                PollVote[]
  createdPlaygrounds        Playground[]             @relation("CreatedPlaygrounds")
  playgroundReviews         PlaygroundReview[]
  playgroundReports         PlaygroundReport[]       @relation("ReportedPlaygrounds")
  userAchievements          UserAchievement[]
  matchEvents               MatchEvent[]
  trainingLogs              TrainingLog[]
  notifications             Notification[]
  sentAnnouncements         TournamentAnnouncement[]
  assignedToPrograms        UserTrainingProgram[]
  inventory                 InventoryItem[]
  foodLog                   FoodLogEntry[]
  activities                Activity[]
  chats                     Chat[]                   @relation("ChatParticipants")
  messages                  Message[]
  createdChallenges         Challenge[]              @relation("CreatedChallenges")
  acceptedChallenges        Challenge[]              @relation("AcceptedChallenges")
  createdLobbies            LfgLobby[]               @relation("CreatedLobbies")
  joinedLobbies             LfgLobby[]               @relation("JoinedLobbies")
}

model Team {
  id                  String             @id @default(cuid())
  name                String
  slug                String             @unique
  motto               String?
  logo                String?
  dataAiHint          String?
  game                String
  rank                Int                @default(0)
  wins                Int                @default(0)
  losses              Int                @default(0)
  draws               Int                @default(0)
  pitch               String?
  seekingSponsorship  Boolean            @default(false)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  creator             User               @relation("CreatedTeams", fields: [creatorId], references: [id])
  creatorId           String
  captain             User               @relation("CaptainOfTeams", fields: [captainId], references: [id])
  captainId           String
  members             User[]             @relation("TeamMembers")
  tournaments         Tournament[]       @relation("TournamentTeams")
  matchesAsTeam1      Match[]            @relation("Team1Matches")
  matchesAsTeam2      Match[]            @relation("Team2Matches")
  matchEvents         MatchEvent[]
  practices           TeamPractice[]
  leagueTeams         LeagueTeam[]
  homePlayground      Playground?        @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId    String?            @unique
  applications        TeamApplication[]
  sponsorships        Sponsorship[]
  sponsorshipOffers   SponsorshipOffer[]
  chat                Chat?
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  game                    String
  description             String?
  type                    String
  format                  String
  category                String
  location                String
  participantCount        Int
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  status                  String
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  organizer               User                     @relation("OrganizedTournaments", fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]                   @relation("TournamentTeams")
  matches                 Match[]
  judges                  User[]                   @relation("JudgedTournaments")
  sponsors                Sponsor[]                @relation("SponsoredTournaments")
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  media                   TournamentMedia[]
  applications            TeamApplication[]
  league                  League?                  @relation(fields: [leagueId], references: [id], onDelete: SetNull)
  leagueId                String?
}

model Match {
  id              String         @id @default(cuid())
  team1           Team           @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team           @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  location        String?
  referee         User?          @relation("JudgedMatches", fields: [refereeId], references: [id])
  refereeId       String?
  round           Int?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  tournament      Tournament?    @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  league          League?        @relation(fields: [leagueId], references: [id])
  leagueId        String?
  playground      Playground?    @relation(fields: [playgroundId], references: [id])
  playgroundId    String?
  events          MatchEvent[]
  notifications   Notification[]
}

model Playground {
  id              String             @id @default(cuid())
  name            String
  address         String
  type            String
  coverImage      String?
  coverImageHint  String?
  surface         String
  features        String[]
  rating          Float              @default(0)
  checkIns        Int                @default(0)
  status          PlaygroundStatus   @default(PENDING_MODERATION)
  creator         User               @relation("CreatedPlaygrounds", fields: [creatorId], references: [id])
  creatorId       String
  matches         Match[]
  practices       TeamPractice[]
  activities      Activity[]
  reports         PlaygroundReport[]
  reviews         PlaygroundReview[]
  residentTeams   Team[]
}

model Sponsor {
  id                String             @id @default(cuid())
  name              String             @unique
  logo              String?
  logoHint          String?
  description       String
  profileUrl        String
  interests         String[]
  promotions        Promotion[]
  teams             Team[]             @relation("SponsoredTeams")
  tournaments       Tournament[]       @relation("SponsoredTournaments")
  sponsorshipOffers SponsorshipOffer[]
}

// --- Enum Types ---

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  SHOT
  SHOT_ON_TARGET
  CORNER
  FOUL
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  TEAM_INVITE
  TOURNAMENT_START
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

// --- Relation / Detail Models ---

model CareerHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("ReportsSent", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  reportedUserId String
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  resolvedAt     DateTime?
  resolver       User?        @relation("ReportsResolved", fields: [resolverId], references: [id])
  resolverId     String?
  createdAt      DateTime     @default(now())
}

model Sponsorship {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   User     @relation(fields: [sponsorId], references: [id])
  sponsorId String
  amount    Decimal
  signedAt  DateTime @default(now())
}

model SponsorshipOffer {
  id        String                @id @default(cuid())
  team      Team                  @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor               @relation(fields: [sponsorId], references: [id])
  sponsorId String
  offerText String
  status    TeamApplicationStatus @default(PENDING)
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

model UserAchievement {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  createdAt     DateTime    @default(now())

  @@unique([userId, achievementId])
}

model Achievement {
  id          String            @id @default(cuid())
  name        String            @unique
  description String
  icon        String
  users       UserAchievement[]
}

model TrainingLog {
  id          String           @id @default(cuid())
  userId      String
  user        User             @relation(fields: [userId], references: [id])
  date        DateTime
  workoutName String?
  status      TrainingLogStatus
  exercises   LoggedExercise[]
  mood        Mood?
  notes       String?
  coachNotes  String?
}

model LoggedExercise {
  id                     String      @id @default(cuid())
  trainingLogId          String
  trainingLog            TrainingLog @relation(fields: [trainingLogId], references: [id])
  exerciseId             String
  exercise               Exercise    @relation(fields: [exerciseId], references: [id])
  notes                  String?
  isSupersetWithPrevious Boolean?
  sets                   LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExerciseId String
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean        @default(false)
}

model Exercise {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json
  commonMistakes  Json
  alternatives    Json
  loggedExercises LoggedExercise[]
}

model UserTrainingProgram {
  id         String          @id @default(cuid())
  user       User            @relation(fields: [userId], references: [id])
  userId     String
  program    TrainingProgram @relation(fields: [programId], references: [id])
  programId  String
  assignedAt DateTime        @default(now())
  isActive   Boolean         @default(true)

  @@unique([userId, programId])
}

model TrainingProgram {
  id             String                @id @default(cuid())
  name           String
  description    String
  goal           String
  daysPerWeek    Int
  splitType      String
  author         String
  coverImage     String
  coverImageHint String
  isAiGenerated  Boolean               @default(false)
  weeklySplit    WorkoutDay[]
  assignedTo     UserTrainingProgram[]
  proposals      TrainingProposal[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgramId String
  program           TrainingProgram   @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                     String     @id @default(cuid())
  workoutDayId           String
  workoutDay             WorkoutDay @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
  name                   String
  sets                   String
  reps                   String
  plannedWeight          String?
  isSupersetWithPrevious Boolean?
  technique              String?
}

model TrainingProposal {
  id         String                 @id @default(cuid())
  from       User                   @relation("ProposalsSent", fields: [fromId], references: [id])
  fromId     String
  to         User                   @relation("ProposalsReceived", fields: [toId], references: [id])
  toId       String
  sport      String
  date       DateTime
  comment    String?
  status     TrainingProposalStatus @default(PENDING)
  program    TrainingProgram?       @relation(fields: [programId], references: [id])
  programId  String?
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  author    User?        @relation(fields: [authorId], references: [id])
  authorId  String?
  votes     PollVote[]
}

model PollOption {
  id     String     @id @default(cuid())
  pollId String
  poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  text   String
  votes  PollVote[]
}

model PollVote {
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  pollId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollOptionId String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  createdAt    DateTime   @default(now())

  @@id([userId, pollId])
}

model TournamentAnnouncement {
  id            String         @id @default(cuid())
  tournament    Tournament     @relation(fields: [tournamentId], references: [id])
  tournamentId  String
  sender        User           @relation(fields: [senderId], references: [id])
  senderId      String
  subject       String
  message       String
  sentTo        Int
  createdAt     DateTime       @default(now())
  notifications Notification[]
}

model Activity {
  id           String      @id @default(cuid())
  type         ActivityType
  metadata     Json
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime    @default(now())
  playground   Playground? @relation(fields: [playgroundId], references: [id])
  playgroundId String?
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
  tournaments Tournament[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int
  wins     Int
  draws    Int
  losses   Int
  points   Int
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}

model TeamPractice {
  id           String     @id @default(cuid())
  title        String
  description  String?
  date         DateTime
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model Notification {
  id             String                  @id @default(cuid())
  user           User                    @relation(fields: [userId], references: [id])
  userId         String
  type           NotificationType
  message        String
  href           String?
  isRead         Boolean                 @default(false)
  createdAt      DateTime                @default(now())
  announcement   TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
  announcementId String?
  match          Match?                  @relation(fields: [matchId], references: [id])
  matchId        String?
}

model InventoryItem {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String         @unique
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model Measurement {
  id      String   @id @default(cuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id])
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

model Sport {
  id         String      @id
  name       String      @unique
  icon       String
  category   String
  challenges Challenge[]
}

model LfgLobby {
  id            String         @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  playgroundId  String?
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  status        LfgLobbyStatus @default(OPEN)
  creator       User           @relation("CreatedLobbies", fields: [creatorId], references: [id])
  creatorId     String
  players       User[]         @relation("JoinedLobbies")
  createdAt     DateTime       @default(now())
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         String // "GROUP" or "DIRECT"
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  participants User[]    @relation("ChatParticipants")
  messages     Message[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
}

model MatchEvent {
  id        String         @id @default(cuid())
  type      MatchEventType
  timestamp DateTime
  metadata  Json?
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  team      Team           @relation(fields: [teamId], references: [id])
  teamId    String
  player    User           @relation(fields: [playerId], references: [id])
  playerId  String
}

model TournamentMedia {
  id           String     @id @default(cuid())
  type         MediaType
  src          String
  description  String?
  hint         String?
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId String
  createdAt    DateTime   @default(now())

  @@index([tournamentId])
}
