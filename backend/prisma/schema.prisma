// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================================
//           CORE MODELS
// ==================================

model User {
  id                        String                     @id @default(cuid())
  email                     String                     @unique
  name                      String
  passwordHash              String
  role                      String                     @default("Игрок")
  avatar                    String?
  status                    String                     @default("Активен")
  xp                        Int                        @default(0)
  isVerified                Boolean                    @default(false)
  location                  String?
  mainSport                 String?
  dateOfBirth               DateTime?
  preferredSports           String[]
  telegram                  String?
  discord                   String?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  // Relations
  teamsAsMember             Team[]                     @relation("TeamMembers")
  teamsAsCaptain            Team[]                     @relation("TeamCaptain")
  createdTeams              Team[]                     @relation("TeamCreator")
  organizedTournaments      Tournament[]
  judgedMatches             Match[]
  coaching                  User[]                     @relation("CoachStudents")
  coach                     User?                      @relation("CoachStudents", fields: [coachId], references: [id])
  coachId                   String?
  createdPlaygrounds        Playground[]
  authoredReviews           PlaygroundReview[]
  createdChallenges         Challenge[]                @relation("ChallengesAsCreator")
  acceptedChallenges        Challenge[]                @relation("ChallengesAsOpponent")
  matchEvents               MatchEvent[]
  teamApplications          TeamApplication[]
  sentFriendRequests        FriendRequest[]            @relation("FriendRequestFrom")
  receivedFriendRequests    FriendRequest[]            @relation("FriendRequestTo")
  friends                   User[]                     @relation("Friends")
  friendOf                  User[]                     @relation("Friends")
  authoredPolls             Poll[]
  votes                     PollVote[]
  sentReports               Report[]                   @relation("Reporter")
  receivedReports           Report[]                   @relation("ReportedUser")
  resolvedReports           Report[]                   @relation("Resolver")
  organizedPromotions       Promotion[]
  createdAnnouncements      TournamentAnnouncement[]
  notifications             Notification[]
  activities                Activity[]
  measurements              Measurement[]
  foodLog                   FoodLogEntry[]
  inventory                 InventoryItem[]
  assignedPrograms          UserTrainingProgram[]
  authoredPrograms          TrainingProgram[]          @relation("ProgramAuthor")
  trainingLogs              TrainingLog[]
  sentTrainingProposals     TrainingProposal[]         @relation("ProposalsFrom")
  receivedTrainingProposals TrainingProposal[]         @relation("ProposalsTo")
  userQuests                UserQuest[]
  messages                  Message[]
  chats                     Chat[]
  careerHistory             CareerHistory[]
  coachProfile              CoachProfile?
}

model Team {
  id                 String             @id @default(cuid())
  slug               String             @unique
  name               String
  motto              String?
  logo               String?
  dataAiHint         String?
  game               String
  pitch              String?
  rank               Int                @default(9999)
  wins               Int                @default(0)
  losses             Int                @default(0)
  draws              Int                @default(0)
  seekingSponsorship Boolean            @default(false)
  homePlaygroundId   String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  // Relations
  creator            User               @relation("TeamCreator", fields: [creatorId], references: [id])
  creatorId          String
  captain            User               @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId          String
  members            User[]             @relation("TeamMembers")
  tournaments        Tournament[]       @relation("TournamentTeams")
  matchesAsTeam1     Match[]            @relation("Team1Matches")
  matchesAsTeam2     Match[]            @relation("Team2Matches")
  matchEvents        MatchEvent[]
  applications       TeamApplication[]
  sponsorships       Sponsorship[]
  sponsorshipOffers  SponsorshipOffer[]
  chat               Chat?
  practices          TeamPractice[]
  leagueTeams        LeagueTeam[]
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  game                  String
  description           String?
  format                String
  type                  String
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  status                String
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  // Relations
  organizer             User                     @relation(fields: [organizerId], references: [id])
  organizerId           String
  teams                 Team[]                   @relation("TournamentTeams")
  matches               Match[]
  judges                User[]                   @relation("JudgedTournaments")
  sponsors              Sponsor[]                @relation("SponsoredTournaments")
  media                 TournamentMedia[]
  announcements         TournamentAnnouncement[]
  applications          TeamApplication[]
  medicalPartners       MedicalPartner[]
}

model Match {
  id              String      @id @default(cuid())
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus @default(PLANNED)
  scheduledAt     DateTime
  finishedAt      DateTime?
  round           Int?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  location        String?
  refereeName     String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  // Relations
  team1           Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  tournament      Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  league          League?     @relation(fields: [leagueId], references: [id])
  leagueId        String?
  playground      Playground? @relation(fields: [playgroundId], references: [id])
  playgroundId    String?
  events          MatchEvent[]
  notifications   Notification[]
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model MatchEvent {
  id        String         @id @default(cuid())
  type      MatchEventType
  timestamp DateTime       @default(now())
  metadata  Json?
  // Relations
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  player    User?          @relation(fields: [playerId], references: [id])
  playerId  String?
  team      Team?          @relation(fields: [teamId], references: [id])
  teamId    String?
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  SHOT
  SHOT_ON_TARGET
  CORNER
  FOUL
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

model Playground {
  id               String               @id @default(cuid())
  name             String
  address          String
  type             String
  surface          String
  features         String[]
  coverImage       String?
  coverImageHint   String?
  rating           Float
  checkIns         Int                  @default(0)
  status           PlaygroundStatus     @default(PENDING_MODERATION)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  // Relations
  creator          User                 @relation(fields: [creatorId], references: [id])
  creatorId        String
  matches          Match[]
  reviews          PlaygroundReview[]
  reports          PlaygroundReport[]
  activities       Activity[]
  teamPractices    TeamPractice[]
  lobbies          LfgLobby[]
}

enum PlaygroundStatus {
  PENDING_MODERATION
  APPROVED
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
  // Relations
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model PlaygroundReport {
  id           String       @id @default(cuid())
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus @default(PENDING)
  createdAt    DateTime     @default(now())
  resolvedAt   DateTime?
  // Relations
  playground   Playground   @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User         @relation(fields: [reporterId], references: [id])
  reporterId   String
}

model Sport {
  id        String      @id
  name      String      @unique
  icon      String
  category  String
  // Relations
  challenges Challenge[]
}

model TeamPractice {
  id           String      @id @default(cuid())
  title        String
  description  String?
  date         DateTime
  // Relations
  team         Team        @relation(fields: [teamId], references: [id])
  teamId       String
  playground   Playground  @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model LfgLobby {
  id            String         @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  status        LfgLobbyStatus @default(OPEN)
  // Relations
  creator       User           @relation("LfgCreator", fields: [creatorId], references: [id])
  creatorId     String
  players       User[]
  playground    Playground?    @relation(fields: [playgroundId], references: [id])
  playgroundId  String?
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

model CareerHistory {
  id        String   @id @default(cuid())
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Activity {
  id           String       @id @default(cuid())
  type         ActivityType
  metadata     Json
  createdAt    DateTime     @default(now())
  // Relations
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId String?
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  // Relations
  participants User[]
  messages     Message[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
}

enum ChatType {
  PRIVATE
  GROUP
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  // Relations
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Notification {
  id             String           @id @default(cuid())
  type           NotificationType
  message        String
  href           String?
  isRead         Boolean          @default(false)
  createdAt      DateTime         @default(now())
  // Relations
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  match          Match?           @relation(fields: [matchId], references: [id])
  matchId        String?
  announcement   TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
  announcementId String?
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
}

model Report {
  id           String       @id @default(cuid())
  category     String
  description  String?
  status       ReportStatus @default(PENDING)
  resolution   String?
  createdAt    DateTime     @default(now())
  resolvedAt   DateTime?
  // Relations
  reporter     User         @relation("Reporter", fields: [reporterId], references: [id])
  reporterId   String
  reportedUser User         @relation("ReportedUser", fields: [reportedUserId], references: [id])
  reportedUserId String
  resolver     User?        @relation("Resolver", fields: [resolverId], references: [id])
  resolverId   String?
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model Achievement {
  id              String            @id @default(cuid())
  name            String
  description     String
  icon            String
  // Relations
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  unlockedAt    DateTime    @default(now())
  // Relations
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String

  @@unique([userId, achievementId])
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  status       ChallengeStatus @default(OPEN)
  result       String?
  createdAt    DateTime        @default(now())
  // Relations
  creator      User            @relation("ChallengesAsCreator", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("ChallengesAsOpponent", fields: [opponentId], references: [id])
  opponentId   String?
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// ==================================
//         ADMIN & CRM MODELS
// ==================================

model TeamApplication {
  id           String                @id @default(cuid())
  status       TeamApplicationStatus @default(PENDING)
  message      String?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  // Relations
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

model TournamentAnnouncement {
  id           String         @id @default(cuid())
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime       @default(now())
  // Relations
  tournament   Tournament     @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User           @relation(fields: [senderId], references: [id])
  senderId     String
  notifications Notification[]
}

model TournamentMedia {
  id           String     @id @default(cuid())
  type         String // IMAGE, VIDEO, AUDIO
  src          String
  description  String?
  hint         String?
  createdAt    DateTime   @default(now())
  // Relations
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
}

model Sponsor {
  id                String             @id @default(cuid())
  name              String
  logo              String?
  logoHint          String?
  description       String
  profileUrl        String
  interests         String[]
  // Relations
  promotions        Promotion[]
  teams             Team[]             @relation("SponsoredTeams")
  sponsorshipOffers SponsorshipOffer[]
  tournaments       Tournament[]       @relation("SponsoredTournaments")
}

model Promotion {
  id            String   @id @default(cuid())
  name          String
  description   String
  prize         String
  cost          String
  imageDataUri  String
  imageHint     String
  endDate       DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // Relations
  sponsor       Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId     String?
  organizer     User     @relation(fields: [organizerId], references: [id])
  organizerId   String
}

model SponsorshipOffer {
  id        String                 @id @default(cuid())
  offerText String
  status    SponsorshipOfferStatus @default(PENDING)
  createdAt DateTime               @default(now())
  // Relations
  team      Team                   @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor                @relation(fields: [sponsorId], references: [id])
  sponsorId String
}

enum SponsorshipOfferStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Sponsorship {
  id        String   @id @default(cuid())
  amount    Int
  signedAt  DateTime @default(now())
  // Relations
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  sponsorId String // Kept for historical data, no direct relation needed if offer is used
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  // Relations
  tournaments    Tournament[]
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  // Relations
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  played   Int
  wins     Int
  draws    Int
  losses   Int
  points   Int
  // Relations
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String

  @@id([leagueId, teamId])
}

// ==================================
//         POLLS & GAMIFICATION
// ==================================

model Poll {
  id        String     @id @default(cuid())
  title     String
  question  String
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  // Relations
  author    User?      @relation(fields: [authorId], references: [id])
  authorId  String?
  options   PollOption[]
  votes     PollVote[]
}

model PollOption {
  id    String     @id @default(cuid())
  text  String
  // Relations
  poll  Poll       @relation(fields: [pollId], references: [id])
  pollId String
  votes PollVote[]
}

model PollVote {
  createdAt    DateTime   @default(now())
  // Relations
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String

  @@id([userId, pollId])
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
  // Relations
  userQuests  UserQuest[]
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

model UserQuest {
  progress  Int      @default(0)
  completedAt DateTime?
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  quest     Quest    @relation(fields: [questId], references: [id])
  questId   String

  @@id([userId, questId])
}

// ==================================
//         TRAINING & NUTRITION
// ==================================

model TrainingProgram {
  id              String                @id
  name            String
  description     String
  goal            String // Could be enum
  daysPerWeek     Int
  splitType       String // Could be enum
  author          String // For simplicity; could be relation to User
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean               @default(false)
  // Relations
  weeklySplit     WorkoutDay[]
  assignedToUsers UserTrainingProgram[]
  authorUser      User?                 @relation("ProgramAuthor", fields: [authorId], references: [id])
  authorId        String?
  trainingProposals TrainingProposal[]
}

model UserTrainingProgram {
  assignedAt DateTime @default(now())
  isActive   Boolean  @default(true)
  // Relations
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  program    TrainingProgram @relation(fields: [programId], references: [id])
  programId  String

  @@id([userId, programId])
}

model WorkoutDay {
  id                String            @id @default(cuid())
  day               Int
  title             String
  // Relations
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String   @id @default(cuid())
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
  // Relations
  workoutDay              WorkoutDay @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
}

model TrainingLog {
  id          String            @id @default(cuid())
  date        DateTime
  workoutName String?
  status      TrainingLogStatus
  mood        Mood?
  notes       String?
  coachNotes  String?
  // Relations
  user        User              @relation(fields: [userId], references: [id])
  userId      String
  exercises   LoggedExercise[]
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

model LoggedExercise {
  id                      String      @id @default(cuid())
  notes                   String?
  isSupersetWithPrevious  Boolean?
  // Relations
  trainingLog             TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId           String
  exercise                Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId              String
  sets                    LoggedSet[]
}

model LoggedSet {
  id             String   @id @default(cuid())
  plannedReps    String?
  plannedWeight  String?
  loggedReps     Int?
  loggedWeight   Float?
  rpe            Int?
  isCompleted    Boolean
  // Relations
  loggedExercise LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
}

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  // Relations
  loggedExercises LoggedExercise[]
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  // Relations
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id          String   @id @default(cuid())
  grams       Int
  meal        String // Could be enum
  createdAt   DateTime @default(now())
  // Relations
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  foodItem    FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId  String
}

model InventoryItem {
  id             String   @id @default(cuid())
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
  // Relations
  user           User     @relation(fields: [userId], references: [id])
  userId         String
}

model Measurement {
  id        String    @id @default(cuid())
  date      DateTime
  weight    Float
  bodyFat   Float?
  chest     Float?
  waist     Float?
  hips      Float?
  biceps    Float?
  thigh     Float?
  // Relations
  user      User      @relation(fields: [userId], references: [id])
  userId    String
}

model TrainingProposal {
  id        String                   @id @default(cuid())
  sport     String
  date      DateTime
  comment   String?
  status    TrainingProposalStatus   @default(PENDING)
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
  // Relations
  from      User                     @relation("ProposalsFrom", fields: [fromId], references: [id])
  fromId    String
  to        User                     @relation("ProposalsTo", fields: [toId], references: [id])
  toId      String
  program   TrainingProgram?         @relation(fields: [programId], references: [id])
  programId String?
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}
