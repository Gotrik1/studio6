// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
//                Core Models
// ========================================

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  name                    String
  passwordHash            String // In a real app with Keycloak, this would be removed
  avatar                  String?
  role                    String                   @default("Игрок")
  status                  String                   @default("Активен")
  xp                      Int                      @default(0)
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  isVerified              Boolean                  @default(false)
  preferredSports         String[]
  telegram                String?                  @unique
  discord                 String?                  @unique
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  // Relations
  createdTeams            Team[]                   @relation("Creator")
  captainOfTeams          Team[]                   @relation("Captain")
  teamsAsMember           Team[]                   @relation("TeamMembers")
  organizedTournaments    Tournament[]             @relation("Organizer")
  createdPlaygrounds      Playground[]
  reviews                 PlaygroundReview[]
  checkIns                Activity[]
  reportsMade             Report[]                 @relation("Reporter")
  reportsReceived         Report[]                 @relation("ReportedUser")
  resolvedReports         Report[]                 @relation("Resolver")
  inventory               InventoryItem[]
  foodLog                 FoodLogEntry[]
  measurements            Measurement[]
  sentTrainingProposals   TrainingProposal[]       @relation("SentProposals")
  receivedTrainingProposals TrainingProposal[]       @relation("ReceivedProposals")
  assignedTrainingPrograms UserTrainingProgram[]
  judgedMatches           Match[]                  @relation("Judges")
  coaching                User[]                   @relation("Coaches")
  coaches                 User[]                   @relation("Coaches")
  createdPromotions       Promotion[]
  careerHistory           CareerHistory[]
  messages                Message[]
  achievements            UserAchievement[]
  chats                   Chat[]
  polls                   Poll[]
  sentSponsorshipOffers   SponsorshipOffer[]       @relation("SponsorSender")
  notifications           Notification[]
  tournamentAnnouncements TournamentAnnouncement[]
  pollVotes               PollVote[]
  friendRequestsSent      FriendRequest[]          @relation("SentFriendRequests")
  friendRequestsReceived  FriendRequest[]          @relation("ReceivedFriendRequests")
  friends                 User[]                   @relation("Friends")
  friendOf                User[]                   @relation("Friends")
}

model Team {
  id                 String             @id @default(cuid())
  name               String             @unique
  slug               String             @unique
  motto              String?
  logo               String?
  dataAiHint         String?
  game               String
  rank               Int                @default(0)
  wins               Int                @default(0)
  losses             Int                @default(0)
  draws              Int                @default(0)
  seekingSponsorship Boolean            @default(false)
  pitch              String?
  creatorId          String
  captainId          String
  homePlaygroundId   String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  // Relations
  creator            User               @relation("Creator", fields: [creatorId], references: [id])
  captain            User               @relation("Captain", fields: [captainId], references: [id])
  members            User[]             @relation("TeamMembers")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]            @relation("Team1")
  matchesAsTeam2     Match[]            @relation("Team2")
  applications       TeamApplication[]
  chat               Chat?
  sponsorships       Sponsorship[]
  sponsorshipOffers  SponsorshipOffer[]
  homePlayground     Playground?        @relation(fields: [homePlaygroundId], references: [id])
  practices          TeamPractice[]
  events             MatchEvent[]
  sponsors           Sponsor[]          @relation("SponsoredTeams")
}

model Match {
  id              String       @id @default(cuid())
  team1Id         String
  team2Id         String
  tournamentId    String?
  leagueId        String?
  playgroundId    String?
  location        String?
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus  @default(PLANNED)
  scheduledAt     DateTime
  finishedAt      DateTime?
  round           Int?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  refereeName     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  // Relations
  team1           Team         @relation("Team1", fields: [team1Id], references: [id])
  team2           Team         @relation("Team2", fields: [team2Id], references: [id])
  tournament      Tournament?  @relation(fields: [tournamentId], references: [id])
  league          League?      @relation(fields: [leagueId], references: [id])
  playground      Playground?  @relation(fields: [playgroundId], references: [id])
  events          MatchEvent[]
  judges          User[]       @relation("Judges")
  notifications   Notification[]
}

model Tournament {
  id                    String        @id @default(cuid())
  name                  String
  slug                  String        @unique
  game                  String
  description           String?
  status                TournamentStatus
  type                  String
  format                String
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  organizerId           String
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  // Relations
  organizer             User          @relation("Organizer", fields: [organizerId], references: [id])
  teams                 Team[]
  matches               Match[]
  applications          TeamApplication[]
  sponsors              Sponsor[]     @relation("SponsoredTournaments")
  judges                User[]        @relation("TournamentJudges")
  medicalPartners       MedicalPartner[]
  announcements         TournamentAnnouncement[]
}

model Sponsor {
  id          String   @id @default(cuid())
  name        String   @unique
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  // Relations
  tournaments Tournament[] @relation("SponsoredTournaments")
  teams       Team[]       @relation("SponsoredTeams")
  promotions  Promotion[]
}

model CoachProfile {
  id             String    @id @default(cuid())
  userId         String    @unique
  user           User      @relation(fields: [userId], references: [id])
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float     @default(0)
  price          Decimal   @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// ========================================
//                Enum Models
// ========================================

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  TEAM_INVITE
  SYSTEM
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

// ========================================
//          Supporting & Relation Models
// ========================================

model Chat {
  id           String     @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]
  messages     Message[]
  teamId       String?    @unique
  team         Team?      @relation(fields: [teamId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum ChatType {
  PRIVATE
  GROUP
}

model Message {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  createdAt DateTime @default(now())
}

model FriendRequest {
  id        String              @id @default(cuid())
  fromId    String
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
}

model Achievement {
  id          String            @id @default(cuid())
  name        String            @unique
  description String
  icon        String
  users       UserAchievement[]
}

model UserAchievement {
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@id([userId, achievementId])
}

model TeamApplication {
  id           String                @id @default(cuid())
  teamId       String
  userId       String
  tournamentId String?
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  createdAt    DateTime              @default(now())
  team         Team                  @relation(fields: [teamId], references: [id])
  user         User                  @relation(fields: [userId], references: [id])
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
}

model Playground {
  id               String               @id @default(cuid())
  name             String
  address          String
  type             String
  surface          String
  features         String[]
  coverImage       String?
  coverImageHint   String?
  rating           Float                @default(0)
  checkIns         Int                  @default(0)
  status           String               @default("PENDING_MODERATION")
  creatorId        String
  creator          User                 @relation(fields: [creatorId], references: [id])
  reviews          PlaygroundReview[]
  matches          Match[]
  reports          PlaygroundReport[]
  activities       Activity[]
  homeForTeams     Team[]
  practices        TeamPractice[]
  lfgLobbies       LfgLobby[]
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playgroundId String
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  author       User       @relation(fields: [authorId], references: [id])
}

model PlaygroundReport {
  id           String       @id @default(cuid())
  playgroundId String
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus @default(PENDING)
  createdAt    DateTime     @default(now())
  playground   Playground   @relation(fields: [playgroundId], references: [id])
  reporter     User         @relation(fields: [reporterId], references: [id])
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  disciplineId String
  wager        Int
  creatorId    String
  opponentId   String?
  status       ChallengeStatus @default(OPEN)
  result       String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  creator      User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  opponent     User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
}

model Sport {
  id         String      @id @unique
  name       String
  icon       String
  category   String
  challenges Challenge[]
}

model LfgLobby {
  id           String       @id @default(cuid())
  type         LfgLobbyType
  sport        String
  location     String
  playgroundId String?
  creatorId    String
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  comment      String
  status       LfgLobbyStatus @default(OPEN)
  createdAt    DateTime     @default(now())
  creator      User         @relation(fields: [creatorId], references: [id])
  players      User[]
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
}

model Exercise {
  id              String            @id @default(cuid())
  name            String            @unique
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json
  commonMistakes  Json
  alternatives    Json
  loggedExercises LoggedExercise[]
}

model LoggedExercise {
  id               String  @id @default(cuid())
  trainingLogId    String
  exerciseId       String
  notes            String?
  isSupersetWithPrevious Boolean? @default(false)
  trainingLog      TrainingLog @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
  exercise         Exercise    @relation(fields: [exerciseId], references: [id])
  sets             LoggedSet[]
}

model TrainingLog {
  id         String            @id @default(cuid())
  userId     String
  date       DateTime
  workoutName String?
  status     TrainingLogStatus @default(PLANNED)
  mood       Mood?
  notes      String?
  coachNotes String?
  user       User              @relation(fields: [userId], references: [id])
  exercises  LoggedExercise[]
}

model LoggedSet {
  id               String          @id @default(cuid())
  loggedExerciseId String
  loggedExercise   LoggedExercise  @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean         @default(false)
}

model TrainingProgram {
  id               String                @id @default(cuid())
  name             String
  description      String
  goal             String
  daysPerWeek      Int
  splitType        String
  author           String
  coverImage       String?
  coverImageHint   String?
  isAiGenerated    Boolean               @default(false)
  weeklySplit      WorkoutDay[]
  assignedToUsers  UserTrainingProgram[]
  trainingProposals TrainingProposal[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgramId String
  day               Int
  title             String
  program           TrainingProgram   @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  technique               String?
  isSupersetWithPrevious  Boolean?    @default(false)
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
}

model UserTrainingProgram {
  user        User            @relation(fields: [userId], references: [id])
  userId      String
  program     TrainingProgram @relation(fields: [programId], references: [id])
  programId   String
  assignedAt  DateTime        @default(now())
  isActive    Boolean         @default(true)

  @@id([userId, programId])
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  isActive  Boolean      @default(true)
  authorId  String?
  author    User?        @relation(fields: [authorId], references: [id])
  options   PollOption[]
  votes     PollVote[]
  createdAt DateTime     @default(now())
}

model PollOption {
  id      String     @id @default(cuid())
  pollId  String
  text    String
  poll    Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes   PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  userId       String
  pollId       String
  pollOptionId String
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id])
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])

  @@unique([userId, pollId])
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

model StoreItem {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean  @default(false)
}

model InventoryItem {
  id             String   @id @default(cuid())
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])
}

model NutritionDiary {
  id      String         @id @default(cuid())
  userId  String         @unique
  user    User           @relation(fields: [userId], references: [id])
  entries FoodLogEntry[]
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String         @unique
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String         @id @default(cuid())
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  foodItemId String
  foodItem   FoodItem       @relation(fields: [foodItemId], references: [id])
  grams      Int
  meal       String
  createdAt  DateTime       @default(now())
  diaryId    String?
  diary      NutritionDiary? @relation(fields: [diaryId], references: [id])
}

model Measurement {
  id      String    @id @default(cuid())
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
  user    User      @relation(fields: [userId], references: [id])
}

model TrainingProposal {
  id           String           @id @default(cuid())
  fromId       String
  toId         String
  sport        String
  date         DateTime
  comment      String?
  programId    String?
  status       String           @default("PENDING")
  from         User             @relation("SentProposals", fields: [fromId], references: [id])
  to           User             @relation("ReceivedProposals", fields: [toId], references: [id])
  program      TrainingProgram? @relation(fields: [programId], references: [id])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Report {
  id             String       @id @default(cuid())
  reporterId     String
  reportedUserId String
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  resolution     String?
  resolverId     String?
  createdAt      DateTime     @default(now())
  resolvedAt     DateTime?
  reporter       User         @relation("Reporter", fields: [reporterId], references: [id])
  reportedUser   User         @relation("ReportedUser", fields: [reportedUserId], references: [id])
  resolver       User?        @relation("Resolver", fields: [resolverId], references: [id])
}

model Promotion {
  id            String    @id @default(cuid())
  name          String
  description   String
  prize         String
  cost          String
  imageDataUri  String
  imageHint     String
  endDate       DateTime
  organizerId   String
  sponsorId     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  organizer     User      @relation(fields: [organizerId], references: [id])
  sponsor       Sponsor?  @relation(fields: [sponsorId], references: [id])
}

model League {
  id          String   @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  leagueId  String
  teamId    String
  played    Int
  wins      Int
  draws     Int
  losses    Int
  points    Int
  league    League   @relation(fields: [leagueId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])

  @@id([leagueId, teamId])
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}

model Sponsorship {
  id        String   @id @default(cuid())
  teamId    String
  sponsorId String
  amount    Int
  signedAt  DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id])
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
}

model SponsorshipOffer {
  id         String   @id @default(cuid())
  teamId     String
  sponsorId  String
  offerText  String
  status     String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  team       Team     @relation(fields: [teamId], references: [id])
  sponsor    User     @relation("SponsorSender", fields: [sponsorId], references: [id])
}

model MatchEvent {
  id        String       @id @default(cuid())
  matchId   String
  teamId    String
  playerId  String?
  timestamp DateTime
  type      String
  metadata  Json?
  match     Match        @relation(fields: [matchId], references: [id])
  team      Team         @relation(fields: [teamId], references: [id])
  player    User?        @relation(fields: [playerId], references: [id])
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournamentId String
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  sender       User       @relation(fields: [senderId], references: [id])
  notifications Notification[]
}

model FaqItem {
    id String @id @default(cuid())
    category String
    question String
    answer String
    createdAt DateTime @default(now())
}

model TeamPractice {
    id String @id @default(cuid())
    teamId String
    playgroundId String
    title String
    description String?
    date DateTime
    createdAt DateTime @default(now())
    team Team @relation(fields: [teamId], references: [id])
    playground Playground @relation(fields: [playgroundId], references: [id])
}

model Activity {
  id           String      @id @default(cuid())
  type         ActivityType
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  metadata     Json
  createdAt    DateTime    @default(now())
  playgroundId String?
  playground   Playground? @relation(fields: [playgroundId], references: [id])
}

model Notification {
  id             String                  @id @default(cuid())
  userId         String
  type           NotificationType
  message        String
  href           String?
  isRead         Boolean                 @default(false)
  createdAt      DateTime                @default(now())
  user           User                    @relation(fields: [userId], references: [id])
  matchId        String?
  match          Match?                  @relation(fields: [matchId], references: [id])
  announcementId String?
  announcement   TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
}
