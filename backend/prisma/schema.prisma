// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                 @id @default(cuid())
  name                      String
  email                     String                 @unique
  passwordHash              String
  avatar                    String?
  role                      Role                   @default(PLAYER)
  status                    UserStatus             @default(ACTIVE)
  xp                        Int                    @default(0)
  location                  String?
  mainSport                 String?
  isVerified                Boolean                @default(false)
  dateOfBirth               DateTime?
  preferredSports           String[]
  telegram                  String?
  discord                   String?
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
  friends                   User[]                 @relation("Friends")
  friendOf                  User[]                 @relation("Friends")
  sentFriendRequests        FriendRequest[]        @relation("SentFriendRequests")
  receivedFriendRequests    FriendRequest[]        @relation("ReceivedFriendRequests")
  createdTeams              Team[]                 @relation("Creator")
  captainOf                 Team[]                 @relation("Captain")
  teamsAsMember             Team[]                 @relation("TeamMembers")
  organizedTournaments      Tournament[]           @relation("Organizer")
  judgedMatches             Match[]                @relation("Judges")
  organizedPromotions       Promotion[]            @relation("Organizer")
  inventory                 InventoryItem[]
  trainingLogs              TrainingLog[]
  measurements              Measurement[]
  foodLogEntries            FoodLogEntry[]
  trainingProposalsSent     TrainingProposal[]     @relation("ProposalsSent")
  trainingProposalsReceived TrainingProposal[]     @relation("ProposalsReceived")
  pollVotes                 PollVote[]
  messages                  Message[]
  reportsMade               Report[]               @relation("Reporter")
  reportsAgainst            Report[]               @relation("ReportedUser")
  resolvedReports           Report[]               @relation("Resolver")
  playgrounds               Playground[]
  playgroundReports         PlaygroundReport[]
  resolvedPlaygroundReports Report[]               @relation("PlaygroundResolver")
  teamApplications          TeamApplication[]
  tournamentAnnouncements   TournamentAnnouncement[]
}

model Team {
  id                   String              @id @default(cuid())
  name                 String
  slug                 String              @unique
  game                 String
  motto                String?
  logo                 String?
  dataAiHint           String?
  rank                 Int                 @default(0)
  wins                 Int                 @default(0)
  losses               Int                 @default(0)
  draws                Int                 @default(0)
  seekingSponsorship   Boolean             @default(false)
  description          String?
  goals                String?
  homePlaygroundId     String?
  creatorId            String
  captainId            String
  creator              User                @relation("Creator", fields: [creatorId], references: [id])
  captain              User                @relation("Captain", fields: [captainId], references: [id])
  members              User[]              @relation("TeamMembers")
  matchesAsTeam1       Match[]             @relation("Team1")
  matchesAsTeam2       Match[]             @relation("Team2")
  tournaments          Tournament[]
  sponsors             Sponsor[]
  applications         TeamApplication[]
  chat                 Chat?
  homePlayground       Playground?         @relation(fields: [homePlaygroundId], references: [id])
  practices            TeamPractice[]
  teamTournamentPoints LeagueTeam[]
}

model TeamPractice {
  id           String     @id @default(cuid())
  teamId       String
  title        String
  description  String?
  date         DateTime
  playgroundId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  team         Team       @relation(fields: [teamId], references: [id])
  playground   Playground @relation(fields: [playgroundId], references: [id])
}

model Match {
  id                String       @id @default(cuid())
  team1Id           String
  team2Id           String
  team1Score        Int?
  team2Score        Int?
  status            MatchStatus  @default(PLANNED)
  tournamentId      String?
  playgroundId      String?
  location          String?
  refereeName       String?
  disputeReason     String?
  disputeOpenedAt   DateTime?
  resolution        String?
  scheduledAt       DateTime
  startedAt         DateTime?
  finishedAt        DateTime?
  team1             Team         @relation("Team1", fields: [team1Id], references: [id])
  team2             Team         @relation("Team2", fields: [team2Id], references: [id])
  tournament        Tournament?  @relation(fields: [tournamentId], references: [id])
  judges            User[]       @relation("Judges")
  events            MatchEvent[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  leagueId          String?
  league            League?      @relation(fields: [leagueId], references: [id])
}

model MatchEvent {
  id        String   @id @default(cuid())
  matchId   String
  match     Match    @relation(fields: [matchId], references: [id])
  timestamp DateTime
  type      String // e.g., 'GOAL', 'YELLOW_CARD', 'SUBSTITUTION'
  playerId  String
  teamId    String
  comment   String?
  createdAt DateTime @default(now())
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  game                  String
  description           String?
  status                TournamentStatus
  format                TournamentFormat
  type                  TournamentType
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  organizerId           String
  organizer             User                     @relation("Organizer", fields: [organizerId], references: [id])
  teams                 Team[]
  matches               Match[]
  announcements         TournamentAnnouncement[]
  sponsors              Sponsor[]
  judges                User[]
  medicalPartners       MedicalPartner[]
  media                 TournamentMedia[]
  applications          TeamApplication[]
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
}

model TournamentMedia {
  id          String   @id @default(cuid())
  tournamentId String
  type        String // 'IMAGE', 'VIDEO', 'AUDIO'
  src         String
  description String?
  hint        String?
  createdAt   DateTime @default(now())
  tournament  Tournament @relation(fields: [tournamentId], references: [id])
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournamentId String
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  sender       User       @relation(fields: [senderId], references: [id])
}

model FriendRequest {
  id        String              @id @default(cuid())
  fromId    String
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType  @default(DIRECT)
  teamId       String?   @unique
  team         Team?     @relation(fields: [teamId], references: [id])
  participants User[]
  messages     Message[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  chatId    String
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model LfgLobby {
  id           String       @id @default(cuid())
  type         LfgLobbyType
  creatorId    String
  sport        String
  location     String
  playgroundId String?
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  comment      String
  status       LfgLobbyStatus @default(OPEN)
  creator      User         @relation(fields: [creatorId], references: [id])
  players      User[]
  createdAt    DateTime     @default(now())
}

model Playground {
  id              String             @id @default(cuid())
  name            String
  address         String
  type            String
  coverImage      String?
  coverImageHint  String?
  surface         String
  features        String[]
  rating          Float
  checkIns        Int
  status          PlaygroundStatus   @default(PENDING_MODERATION)
  creatorId       String
  creator         User               @relation(fields: [creatorId], references: [id])
  reviews         PlaygroundReview[]
  reports         PlaygroundReport[]
  teams           Team[]
  practices       TeamPractice[]
  lobbies         LfgLobby[]
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playgroundId String
  authorId     String
  rating       Int
  comment      String?
  createdAt    DateTime   @default(now())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  author       User       @relation(fields: [authorId], references: [id])
}

model PlaygroundReport {
  id           String           @id @default(cuid())
  playgroundId String
  reporterId   String
  category     String
  comment      String
  severity     ReportSeverity
  summary      String
  status       ReportStatus     @default(PENDING)
  resolvedAt   DateTime?
  resolverId   String?
  resolution   String?
  playground   Playground       @relation(fields: [playgroundId], references: [id])
  reporter     User             @relation(fields: [reporterId], references: [id])
  resolver     User?            @relation("PlaygroundResolver", fields: [resolverId], references: [id])
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  creatorId    String
  opponentId   String?
  disciplineId String
  status       ChallengeStatus @default(OPEN)
  result       String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  creator      User            @relation(fields: [creatorId], references: [id])
  opponent     User?           @relation(fields: [opponentId], references: [id])
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
}

model Sport {
  id         String      @id @unique
  name       String
  icon       String
  category   String
  challenges Challenge[]
}

model Sponsor {
  id           String       @id @default(cuid())
  name         String
  logo         String?
  logoHint     String?
  description  String
  profileUrl   String
  interests    String[]
  tournaments  Tournament[]
  teams        Team[]
  promotions   Promotion[]
}

model Promotion {
  id           String   @id @default(cuid())
  name         String
  description  String
  prize        String
  imageDataUri String
  imageHint    String
  endDate      DateTime
  cost         String
  organizerId  String
  sponsorId    String?
  organizer    User     @relation("Organizer", fields: [organizerId], references: [id])
  sponsor      Sponsor? @relation(fields: [sponsorId], references: [id])
  createdAt    DateTime @default(now())
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String?
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  leagueId String
  teamId   String
  played   Int      @default(0)
  wins     Int      @default(0)
  losses   Int      @default(0)
  draws    Int      @default(0)
  points   Int      @default(0)
  league   League   @relation(fields: [leagueId], references: [id])
  team     Team     @relation(fields: [teamId], references: [id])

  @@id([leagueId, teamId])
}

model InventoryItem {
  id             String   @id @default(cuid())
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String         @unique
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  userId     String
  foodItemId String
  grams      Int
  meal       String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
}

model Measurement {
  id      String    @id @default(cuid())
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
  user    User      @relation(fields: [userId], references: [id])
}

model TrainingProgram {
  id              String           @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean          @default(false)
  weeklySplit     WorkoutDay[]
  trainingLogs    TrainingLog[]
  trainingProposals TrainingProposal[]
}

model WorkoutDay {
  id              String             @id @default(cuid())
  trainingProgramId String
  day             Int
  title           String
  exercises       ExerciseInWorkout[]
  trainingProgram TrainingProgram    @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
}

model ExerciseInWorkout {
  id                      String      @id @default(cuid())
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
}

model TrainingLog {
  id              String            @id @default(cuid())
  userId          String
  trainingProgramId String?
  date            DateTime
  workoutName     String
  status          String // planned, completed, skipped
  notes           String?
  coachNotes      String?
  mood            String? // great, good, ok, bad
  user            User              @relation(fields: [userId], references: [id])
  trainingProgram TrainingProgram?  @relation(fields: [trainingProgramId], references: [id])
  exercises       LoggedExercise[]
}

model LoggedExercise {
  id            String      @id @default(cuid())
  trainingLogId String
  exerciseId    String
  notes         String?
  trainingLog   TrainingLog @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  sets          LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExerciseId String
  plannedReps      String
  plannedWeight    String
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
}

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  loggedExercises LoggedExercise[]
}

model TrainingProposal {
  id          String           @id @default(cuid())
  fromId      String
  toId        String
  sport       String
  date        DateTime
  comment     String?
  status      String           @default("PENDING") // PENDING, ACCEPTED, DECLINED
  programId   String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  from        User             @relation("ProposalsSent", fields: [fromId], references: [id])
  to          User             @relation("ProposalsReceived", fields: [toId], references: [id])
  program     TrainingProgram? @relation(fields: [programId], references: [id])
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  options   PollOption[]
  votes     PollVote[]
}

model PollOption {
  id        String     @id @default(cuid())
  pollId    String
  text      String
  poll      Poll       @relation(fields: [pollId], references: [id])
  votes     PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  pollId       String
  pollOptionId String
  userId       String
  createdAt    DateTime   @default(now())
  poll         Poll       @relation(fields: [pollId], references: [id])
  option       PollOption @relation(fields: [pollOptionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([userId, pollId])
}

model FaqItem {
  id       String @id @default(cuid())
  category String
  question String
  answer   String
  createdAt DateTime @default(now())
}

model Report {
  id                 String       @id @default(cuid())
  reporterId         String
  reportedUserId     String
  reason             String
  context            String
  status             ReportStatus @default(PENDING)
  resolvedAt         DateTime?
  resolverId         String?
  resolution         String?
  reporter           User         @relation("Reporter", fields: [reporterId], references: [id])
  reportedUser       User         @relation("ReportedUser", fields: [reportedUserId], references: [id])
  resolver           User?        @relation("Resolver", fields: [resolverId], references: [id])
  createdAt          DateTime     @default(now())
}

model Activity {
  id           String       @id @default(cuid())
  type         ActivityType
  userId       String
  playgroundId String?
  metadata     Json
  timestamp    DateTime     @default(now())
  user         User         @relation(fields: [userId], references: [id])
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}

model TeamApplication {
  id           String                @id @default(cuid())
  teamId       String
  userId       String
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  tournamentId String?
  team         Team                  @relation(fields: [teamId], references: [id])
  user         User                  @relation(fields: [userId], references: [id])
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
}

model StoreItem {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean  @default(false)
  createdAt   DateTime @default(now())
}

enum Role {
  ADMIN
  MODERATOR
  CAPTAIN
  PLAYER
  JUDGE
  MANAGER
  ORGANIZER
  SPONSOR
  FAN
  COACH
}

enum UserStatus {
  ACTIVE
  BANNED
  DELETED
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

enum TournamentType {
  TEAM
  INDIVIDUAL
}

enum TournamentFormat {
  SINGLE_ELIMINATION
  ROUND_ROBIN
  GROUPS
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum ChatType {
  DIRECT
  GROUP
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
  REJECTED
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ReportSeverity {
  LOW
  MEDIUM
  HIGH
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}
