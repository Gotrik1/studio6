// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================================================================
// === ENUMS
// ==============================================================================
enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
  REJECTED
}

// ==============================================================================
// === MODELS
// ==============================================================================

model User {
  id                        String                   @id @default(cuid())
  email                     String                   @unique
  name                      String
  passwordHash              String
  avatar                    String?
  role                      String
  status                    String
  xp                        Int
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  dateOfBirth               DateTime?
  location                  String?
  mainSport                 String?
  preferredSports           String[]
  isVerified                Boolean                  @default(false)
  telegram                  String?
  discord                   String?
  // Relations
  teamsAsMember             Team[]                   @relation("TeamMembers")
  createdTeams              Team[]                   @relation("TeamCreator")
  captainOfTeams            Team[]                   @relation("TeamCaptain")
  organizedTournaments      Tournament[]             @relation("OrganizedBy")
  judgedTournaments         Tournament[]             @relation("JudgedTournaments")
  notifications             Notification[]
  achievements              UserAchievement[]
  friendRequestsSent        FriendRequest[]          @relation("SentFriendRequests")
  friendRequestsReceived    FriendRequest[]          @relation("ReceivedFriendRequests")
  friends                   User[]                   @relation("Friendship")
  friendsOf                 User[]                   @relation("Friendship")
  reportsMade               Report[]                 @relation("ReportsMade")
  reportsAbout              Report[]                 @relation("ReportsAbout")
  reportsResolved           Report[]                 @relation("ReportsResolved")
  careerHistory             CareerHistory[]
  coachProfile              CoachProfile?
  coaching                  User[]                   @relation("CoachingRelationship")
  coach                     User?                    @relation("CoachingRelationship", fields: [coachId], references: [id])
  coachId                   String?
  createdPlaygrounds        Playground[]             @relation("CreatedPlaygrounds")
  reviews                   PlaygroundReview[]
  playgroundReports         PlaygroundReport[]       @relation("ReportedBy")
  organizedPromotions       Promotion[]
  createdLfgLobbies         LfgLobby[]               @relation("LobbiesCreated")
  joinedLfgLobbies          LfgLobby[]               @relation("LobbiesJoined")
  teamApplications          TeamApplication[]
  trainingProposalsSent     TrainingProposal[]       @relation("TrainingProposalsSent")
  trainingProposalsReceived TrainingProposal[]       @relation("TrainingProposalsReceived")
  trainingLogs              TrainingLog[]
  assignedPrograms          UserTrainingProgram[]
  inventoryItems            InventoryItem[]
  foodLogEntries            FoodLogEntry[]
  measurements              Measurement[]
  pollVotes                 PollVote[]
  sentAnnouncements         TournamentAnnouncement[]
  matchEvents               MatchEvent[]
  messages                  Message[]
  activities                Activity[]
  chats                     Chat[]
}

model Team {
  id                   String                @id @default(cuid())
  slug                 String                @unique
  name                 String
  motto                String?
  logo                 String?
  dataAiHint           String?
  game                 String
  rank                 Int                   @default(1)
  wins                 Int                   @default(0)
  losses               Int                   @default(0)
  draws                Int                   @default(0)
  seekingSponsorship   Boolean               @default(false)
  pitch                String?
  goals                String?
  // Relations
  creator              User                  @relation("TeamCreator", fields: [creatorId], references: [id])
  creatorId            String
  captain              User                  @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId            String
  members              User[]                @relation("TeamMembers")
  tournaments          Tournament[]
  team1Matches         Match[]               @relation("Team1Matches")
  team2Matches         Match[]               @relation("Team2Matches")
  chat                 Chat?
  sponsors             Sponsor[]
  sponsorships         Sponsorship[]
  sponsorshipOffers    SponsorshipOffer[]
  homePlayground       Playground?           @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId     String?
  applications         TeamApplication[]
  teamPractices        TeamPractice[]
  matchEvents          MatchEvent[]
}

model Tournament {
  id                      String                   @id @default(cuid())
  slug                    String                   @unique
  name                    String
  game                    String
  description             String?
  type                    String
  format                  String
  category                String
  location                String
  participantCount        Int
  prizePool               String?
  rules                   String?
  status                  String
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  bannerImage             String?
  bannerImageHint         String?
  // Relations
  organizer               User                     @relation("OrganizedBy", fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
  judges                  User[]                   @relation("JudgedTournaments")
  sponsors                Sponsor[]
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  media                   TournamentMedia[]
  applications            TeamApplication[]
}

model Match {
  id                String       @id @default(cuid())
  team1             Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id           String
  team2             Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id           String
  team1Score        Int?
  team2Score        Int?
  status            MatchStatus
  scheduledAt       DateTime
  finishedAt        DateTime?
  disputeReason     String?
  disputeOpenedAt   DateTime?
  resolution        String?
  round             Int?
  // Relations
  tournament        Tournament?  @relation(fields: [tournamentId], references: [id])
  tournamentId      String?
  playground        Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId      String?
  location          String?
  referee           User?        @relation("JudgedMatches", fields: [refereeId], references: [id])
  refereeId         String?
  refereeName       String?
  events            MatchEvent[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  league            League?      @relation(fields: [leagueId], references: [id])
  leagueId          String?
}

model MatchEvent {
  id        String         @id @default(cuid())
  type      MatchEventType
  timestamp DateTime       @default(now())
  details   Json?
  // Relations
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  player    User?          @relation(fields: [playerId], references: [id])
  playerId  String?
  team      Team?          @relation(fields: [teamId], references: [id])
  teamId    String?
}

model TournamentMedia {
  id          String     @id @default(cuid())
  type        MediaType
  src         String
  description String?
  hint        String?
  createdAt   DateTime   @default(now())
  tournament  Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
}

model Achievement {
  id           String            @id @default(cuid())
  name         String
  description  String
  icon         String
  users        UserAchievement[]
}

model UserAchievement {
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  createdAt     DateTime    @default(now())

  @@id([userId, achievementId])
}

model FriendRequest {
  id        String              @id @default(cuid())
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  // Relations
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
}

model Report {
  id             String       @id @default(cuid())
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  resolution     String?
  createdAt      DateTime     @default(now())
  resolvedAt     DateTime?
  // Relations
  reporter       User         @relation("ReportsMade", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportsAbout", fields: [reportedUserId], references: [id])
  reportedUserId String
  resolver       User?        @relation("ReportsResolved", fields: [resolverId], references: [id])
  resolverId     String?
}

model TrainingProgram {
  id                   String                @id @default(cuid())
  name                 String
  description          String
  goal                 String
  daysPerWeek          Int
  splitType            String
  author               String
  coverImage           String
  coverImageHint       String
  isAiGenerated        Boolean               @default(false)
  // Relations
  weeklySplit          WorkoutDay[]
  assignedToUsers      UserTrainingProgram[]
  trainingProposals    TrainingProposal[]
}

model UserTrainingProgram {
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  program   TrainingProgram @relation(fields: [programId], references: [id])
  programId String
  assignedAt DateTime       @default(now())
  isActive   Boolean        @default(true)
  @@id([userId, programId])
}


model WorkoutDay {
  id                String            @id @default(cuid())
  day               Int
  title             String
  // Relations
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
  // Relations
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
}

model Exercise {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json
  commonMistakes  Json
  alternatives    Json
  loggedExercises LoggedExercise[]
}

model TrainingLog {
  id          String           @id @default(cuid())
  date        DateTime
  workoutName String?
  status      TrainingLogStatus
  mood        Mood?
  notes       String?
  coachNotes  String?
  // Relations
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  exercises   LoggedExercise[]
}

model LoggedExercise {
  id                      String        @id @default(cuid())
  notes                   String?
  isSupersetWithPrevious  Boolean?
  // Relations
  trainingLog             TrainingLog   @relation(fields: [trainingLogId], references: [id])
  trainingLogId           String
  exercise                Exercise      @relation(fields: [exerciseId], references: [id])
  exerciseId              String
  sets                    LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean
  // Relations
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
}

model Playground {
  id                String               @id @default(cuid())
  name              String
  address           String
  type              String
  coverImage        String?
  coverImageHint    String?
  surface           String
  features          String[]
  rating            Float
  checkIns          Int
  status            PlaygroundStatus
  // Relations
  creator           User                 @relation("CreatedPlaygrounds", fields: [creatorId], references: [id])
  creatorId         String
  teamsWithHome     Team[]
  matches           Match[]
  reviews           PlaygroundReview[]
  reports           PlaygroundReport[]
  checkInActivities Activity[]
  teamPractices     TeamPractice[]
  lobbies           LfgLobby[]
}

model TeamPractice {
  id           String      @id @default(cuid())
  title        String
  description  String?
  date         DateTime
  // Relations
  team         Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId       String
  playground   Playground  @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  playgroundId String
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
  // Relations
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model PlaygroundReport {
  id           String           @id @default(cuid())
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus
  createdAt    DateTime         @default(now())
  // Relations
  playground   Playground       @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User             @relation("ReportedBy", fields: [reporterId], references: [id])
  reporterId   String
}

model CareerHistory {
  id        String   @id @default(cuid())
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Sport {
  id        String      @id
  name      String
  icon      String
  category  String
  Challenge Challenge[]
}

model LfgLobby {
  id            String         @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  status        LfgLobbyStatus @default(OPEN)
  // Relations
  playground    Playground?    @relation(fields: [playgroundId], references: [id])
  playgroundId  String?
  creator       User           @relation("LobbiesCreated", fields: [creatorId], references: [id])
  creatorId     String
  players       User[]         @relation("LobbiesJoined")
}

model Promotion {
  id             String    @id @default(cuid())
  name           String
  description    String
  prize          String
  cost           String
  imageDataUri   String
  imageHint      String
  endDate        DateTime
  createdAt      DateTime  @default(now())
  // Relations
  organizer      User      @relation(fields: [organizerId], references: [id])
  organizerId    String
  sponsor        Sponsor?  @relation(fields: [sponsorId], references: [id])
  sponsorId      String?
}

model TeamApplication {
  id           String                @id @default(cuid())
  status       TeamApplicationStatus @default(PENDING)
  message      String?
  createdAt    DateTime              @default(now())
  // Relations
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
}

model Challenge {
  id            String          @id @default(cuid())
  title         String
  description   String
  wager         Int
  status        ChallengeStatus
  result        String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  // Relations
  creator       User            @relation("ChallengesCreated", fields: [creatorId], references: [id])
  creatorId     String
  opponent      User?           @relation("ChallengesTaken", fields: [opponentId], references: [id])
  opponentId    String?
  discipline    Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId  String
}

model Activity {
  id           String       @id @default(cuid())
  type         ActivityType
  metadata     Json
  createdAt    DateTime     @default(now())
  // Relations
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId String?
}

model Sponsor {
  id                String             @id
  name              String             @unique
  logo              String?
  logoHint          String?
  description       String
  profileUrl        String
  interests         String[]
  // Relations
  promotions        Promotion[]
  sponsorships      Sponsorship[]
  sponsorshipOffers SponsorshipOffer[]
  teams             Team[]
  tournaments       Tournament[]
}

model Sponsorship {
  id        String   @id @default(cuid())
  amount    Decimal
  signedAt  DateTime @default(now())
  // Relations
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId String
}

model SponsorshipOffer {
  id        String @id @default(cuid())
  offerText String
  status    String @default("PENDING") // PENDING, ACCEPTED, DECLINED
  // Relations
  team      Team   @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor @relation(fields: [sponsorId], references: [id])
  sponsorId String
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  played   Int
  wins     Int
  draws    Int
  losses   Int
  points   Int
  // Relations
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  // Relations
  tournaments    Tournament[]
}

model TrainingProposal {
  id         String                 @id @default(cuid())
  sport      String
  date       DateTime
  comment    String?
  status     TrainingProposalStatus @default(PENDING)
  createdAt  DateTime               @default(now())
  // Relations
  from       User                   @relation("TrainingProposalsSent", fields: [fromId], references: [id])
  fromId     String
  to         User                   @relation("TrainingProposalsReceived", fields: [toId], references: [id])
  toId       String
  program    TrainingProgram?       @relation(fields: [programId], references: [id])
  programId  String?
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

model InventoryItem {
  id             String   @id @default(cuid())
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
  // Relations
  user           User     @relation(fields: [userId], references: [id])
  userId         String
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model FoodItem {
  id             String         @id @default(cuid())
  name           String         @unique
  category       String
  image          String?
  imageHint      String?
  calories       Float
  protein        Float
  fat            Float
  carbs          Float
  description    String?
  // Relations
  logEntries     FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  grams      Int
  meal       String
  createdAt  DateTime @default(now())
  // Relations
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
}

model Measurement {
  id      String   @id @default(cuid())
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
  // Relations
  user    User     @relation(fields: [userId], references: [id])
  userId  String
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  // Relations
  author    User?        @relation(fields: [authorId], references: [id])
  authorId  String?
  options   PollOption[]
  votes     PollVote[]
}

model PollOption {
  id     String     @id @default(cuid())
  text   String
  // Relations
  poll   Poll       @relation(fields: [pollId], references: [id])
  pollId String
  votes  PollVote[]
}

model PollVote {
  createdAt    DateTime   @default(now())
  // Relations
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String

  @@id([userId, pollId])
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
  // Relations
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  notifications Notification[]
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         String // DIRECT, GROUP
  createdAt    DateTime  @default(now())
  // Relations
  participants User[]
  messages     Message[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  // Relations
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
}

model Notification {
  id           String     @id @default(cuid())
  type         String
  message      String
  isRead       Boolean    @default(false)
  href         String?
  createdAt    DateTime   @default(now())
  // Relations
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  announcement TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
  announcementId String?
  matchId      String?
}
