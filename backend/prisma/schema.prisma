// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- CORE MODELS ---

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    Role                    @default(PLAYER)
  status                  String                  @default("Активен")
  xp                      Int                     @default(0)
  location                String?
  mainSport               String?
  isVerified              Boolean                 @default(false)
  dateOfBirth             DateTime?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  // Relations
  teamsAsCaptain          Team[]                  @relation("CaptainToTeams")
  teamsAsMember           Team[]                  @relation("TeamMembers")
  organizedTournaments    Tournament[]
  judgedMatches           Match[]
  createdChallenges       Challenge[]             @relation("Creator")
  acceptedChallenges      Challenge[]             @relation("Opponent")
  createdPlaygrounds      Playground[]
  coachProfile            CoachProfile?
  coaching                User[]                  @relation("CoachToPlayer")
  coach                   User?                   @relation("CoachToPlayer", fields: [coachId], references: [id])
  coachId                 String?
  friends                 User[]                  @relation("Friends")
  friendOf                User[]                  @relation("Friends")
  sentFriendRequests      FriendRequest[]         @relation("SentRequests")
  receivedFriendRequests  FriendRequest[]         @relation("ReceivedRequests")
  authoredMessages        Message[]
  notifications           Notification[]
  organizedPromotions     Promotion[]
  createdLfgLobbies       LfgLobby[]
  joinedLfgLobbies        LfgLobby[]              @relation("LobbyPlayers")
  measurements            Measurement[]
  trainingLogs            TrainingLog[]
  trainingProposalsSent   TrainingProposal[]      @relation("ProposalsSent")
  trainingProposalsRcvd   TrainingProposal[]      @relation("ProposalsReceived")
  pollVotes               PollVote[]
  inventory               InventoryItem[]
  reportsSent             Report[]                @relation("Reporter")
  reportsReceived         Report[]                @relation("Reported")
  reportsResolved         Report[]                @relation("Resolver")
  achievements            Achievement[]
  activities              Activity[]
  applications            TeamApplication[]
  gallery                 UserGalleryItem[]
  careerHistory           CareerHistoryItem[]
  assignedTraining        TrainingProgram[]       @relation("AssignedPrograms")
  tournamentAnnouncements TournamentAnnouncement[]
}

model Team {
  id                 String              @id @default(cuid())
  name               String              @unique
  slug               String              @unique
  game               String
  motto              String?
  description        String?
  logo               String?
  dataAiHint         String?
  wins               Int                 @default(0)
  losses             Int                 @default(0)
  draws              Int                 @default(0)
  rank               Int                 @default(0)
  seekingSponsorship Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  // Relations
  creator            User                @relation("CreatorToTeams", fields: [creatorId], references: [id])
  creatorId          String
  captain            User                @relation("CaptainToTeams", fields: [captainId], references: [id])
  captainId          String
  members            User[]              @relation("TeamMembers")
  matchesAsTeam1     Match[]             @relation("Team1Matches")
  matchesAsTeam2     Match[]             @relation("Team2Matches")
  tournaments        Tournament[]
  sponsors           Sponsor[]
  homePlayground     Playground?         @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?
  chat               Chat?
  practices          TeamPractice[]
  applications       TeamApplication[]
}

model Match {
  id              String       @id @default(cuid())
  team1           Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  location        String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  refereeName     String?
  // Relations
  tournament      Tournament?  @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  playground      Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId    String?
  referee         User?        @relation(fields: [refereeId], references: [id])
  refereeId       String?
  league          League?      @relation(fields: [leagueId], references: [id])
  leagueId        String?
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  game                  String
  status                TournamentStatus
  format                String
  prizePool             String?
  tournamentStartDate   DateTime
  registrationStartDate DateTime
  registrationEndDate   DateTime
  description           String?
  rules                 String?
  type                  String
  category              String
  location              String
  participantCount      Int
  bannerImage           String?
  bannerImageHint       String?
  // Relations
  organizer             User                     @relation(fields: [organizerId], references: [id])
  organizerId           String
  teams                 Team[]
  matches               Match[]
  judges                User[]                   @relation("TournamentJudges")
  sponsors              Sponsor[]                @relation("TournamentSponsors")
  medicalPartners       MedicalPartner[]         @relation("TournamentMedicalPartners")
  announcements         TournamentAnnouncement[]
  applications          TeamApplication[]
  media                 TournamentMedia[]
}

// --- GAMIFICATION & SOCIAL ---

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  status       ChallengeStatus
  result       String?
  createdAt    DateTime        @default(now())
  // Relations
  creator      User            @relation("Creator", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("Opponent", fields: [opponentId], references: [id])
  opponentId   String?
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())

  @@unique([fromId, toId])
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]
  messages     Message[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
  createdAt    DateTime  @default(now())
}

model Message {
  id        String   @id @default(cuid())
  text      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  createdAt DateTime @default(now())
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  message   String
  href      String?
  isRead    Boolean          @default(false)
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime         @default(now())
}

model Activity {
  id           String       @id @default(cuid())
  type         ActivityType
  metadata     Json
  timestamp    DateTime     @default(now())
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId String?
}

// --- PHYSICAL TRAINING ---

model TrainingProgram {
  id              String           @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String?
  coverImageHint  String?
  isAiGenerated   Boolean          @default(false)
  weeklySplit     WorkoutDay[]
  assignedTo      User[]           @relation("AssignedPrograms")
  trainingLogs    TrainingLog[]
  trainingProposal TrainingProposal[]
}

model WorkoutDay {
  id                String             @id @default(cuid())
  day               Int
  title             String
  exercises         ExerciseDetail[]
  trainingProgram   TrainingProgram    @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
}

model ExerciseDetail {
  id                      String      @id @default(cuid())
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
}

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  loggedExercises LoggedExercise[]
}

model TrainingLog {
  id          String           @id @default(cuid())
  date        DateTime
  workoutName String
  status      String // completed, planned, skipped
  mood        String?
  notes       String?
  coachNotes  String?
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  program     TrainingProgram? @relation(fields: [programId], references: [id])
  programId   String?
  exercises   LoggedExercise[]
}

model LoggedExercise {
  id            String      @id @default(cuid())
  trainingLog   TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId String
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  notes         String?
  sets          LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean
}

model Measurement {
  id      String    @id @default(cuid())
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
  user    User      @relation(fields: [userId], references: [id])
  userId  String
}

// --- OTHER ENTITIES ---

model Playground {
  id           String               @id @default(cuid())
  name         String
  address      String
  type         String
  surface      String
  features     String[]
  coverImage   String?
  coverImageHint String?
  rating       Float
  checkIns     Int
  status       PlaygroundStatus     @default(PENDING_MODERATION)
  // Relations
  matches      Match[]
  creator      User                 @relation(fields: [creatorId], references: [id])
  creatorId    String
  homeForTeams Team[]
  reports      PlaygroundReport[]
  activities   Activity[]
  practices    TeamPractice[]
  reviews      PlaygroundReview[]
}

model CoachProfile {
  id             String  @id @default(cuid())
  user           User    @relation(fields: [userId], references: [id])
  userId         String  @unique
  specialization String
  description    String
  tags           String[]
  rating         Float
  price          Decimal
}

model Sponsor {
  id           String       @id @default(cuid())
  name         String
  logo         String?
  logoHint     String?
  description  String
  profileUrl   String
  interests    String[]
  // Relations
  teams        Team[]
  tournaments  Tournament[] @relation("TournamentSponsors")
  promotions   Promotion[]
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean
}

model Promotion {
  id          String   @id @default(cuid())
  name        String
  description String
  prize       String
  imageDataUri String
  imageHint   String
  endDate     DateTime
  cost        String
  createdAt   DateTime @default(now())
  // Relations
  organizer   User     @relation(fields: [organizerId], references: [id])
  organizerId String
  sponsor     Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId   String?
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  // Relations
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int
  wins     Int
  losses   Int
  draws    Int
  points   Int
}

model Sport {
  id      String      @id @unique
  name    String
  icon    String
  category String
  challenges Challenge[]
}

model LfgLobby {
  id            String      @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  playgroundId  String?
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  creator       User        @relation(fields: [creatorId], references: [id])
  creatorId     String
  players       User[]      @relation("LobbyPlayers")
}

model TrainingProposal {
  id          String           @id @default(cuid())
  from        User             @relation("ProposalsSent", fields: [fromId], references: [id])
  fromId      String
  to          User             @relation("ProposalsReceived", fields: [toId], references: [id])
  toId        String
  sport       String
  date        DateTime
  comment     String?
  status      String           @default("PENDING") // PENDING, ACCEPTED, DECLINED
  program     TrainingProgram? @relation(fields: [programId], references: [id])
  programId   String?
  createdAt   DateTime         @default(now())
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  isActive  Boolean      @default(true)
  options   PollOption[]
  votes     PollVote[]
  createdAt DateTime     @default(now())
}

model PollOption {
  id     String     @id @default(cuid())
  text   String
  poll   Poll       @relation(fields: [pollId], references: [id])
  pollId String
  votes  PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@unique([userId, pollId])
}

model Quest {
  id          String    @id @default(cuid())
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  type        QuestType
  createdAt   DateTime  @default(now())
}

model InventoryItem {
  id             String   @id @default(cuid())
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime @default(now())
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[] @relation("TournamentMedicalPartners")
}

model Report {
  id                 String       @id @default(cuid())
  reporter           User         @relation("Reporter", fields: [reporterId], references: [id])
  reporterId         String
  reportedUser       User         @relation("Reported", fields: [reportedUserId], references: [id])
  reportedUserId     String
  reason             String
  context            String
  status             ReportStatus @default(PENDING)
  resolver           User?        @relation("Resolver", fields: [resolverId], references: [id])
  resolverId         String?
  resolution         String?
  resolvedAt         DateTime?
  createdAt          DateTime     @default(now())
}

model Achievement {
  id          String @id @default(cuid())
  name        String
  description String
  icon        String
  users       User[]
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  createdAt    DateTime              @default(now())

  @@unique([teamId, userId, tournamentId])
}

model UserGalleryItem {
  id         String   @id @default(cuid())
  src        String
  alt        String
  dataAiHint String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())
}

model CareerHistoryItem {
  id       String   @id @default(cuid())
  teamName String
  period   String
  role     String
  review   String
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  createdAt DateTime @default(now())
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model PlaygroundReport {
  id           String           @id @default(cuid())
  playground   Playground       @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User             @relation(fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus
  createdAt    DateTime         @default(now())
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model TournamentMedia {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type         String // IMAGE, VIDEO, AUDIO
  src          String
  description  String?
  hint         String?
  createdAt    DateTime   @default(now())
}

// --- ENUMS ---

enum Role {
  ADMIN
  MODERATOR
  PLAYER
  CAPTAIN
  COACH
  JUDGE
  MANAGER
  ORGANIZER
  SPONSOR
  FAN
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

enum ChatType {
  PRIVATE
  GROUP
}
