// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- Enums ---

enum UserRole {
  ADMINISTRATOR @map("Администратор")
  MODERATOR     @map("Модератор")
  CAPTAIN       @map("Капитан")
  PLAYER        @map("Игрок")
  COACH         @map("Тренер")
  JUDGE         @map("Судья")
  MANAGER       @map("Менеджер")
  ORGANIZER     @map("Организатор")
  SPONSOR       @map("Спонсор")
  FAN           @map("Болельщик")
}

enum UserStatus {
  ACTIVE    @map("Активен")
  BANNED    @map("Забанен")
  INACTIVE  @map("Неактивен")
}


// --- User & Profile Models ---

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  name                    String
  passwordHash            String
  avatar                  String?
  bannerImage             String?
  bannerImageHint         String?
  xp                      Int                      @default(0)
  role                    UserRole                 @default(PLAYER)
  status                  UserStatus               @default(ACTIVE)
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  isVerified              Boolean                  @default(false)
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  
  // Relations
  teamsAsCaptain            Team[]                   @relation("TeamCaptains")
  teamsAsCreator            Team[]                   @relation("TeamCreators")
  teamsAsMember             Team[]                   @relation("TeamMembers")
  organizedTournaments      Tournament[]             @relation("OrganizedTournaments")
  createdPromotions         Promotion[]
  careerHistory             CareerHistory[]
  playgrounds               Playground[]
  coachProfile              CoachProfile?
  coaching                  User[]                   @relation("Coaches")
  coach                     User?                    @relation("Coaches", fields: [coachId], references: [id])
  coachId                   String?
  friends                   User[]                   @relation("Friends")
  friendOf                  User[]                   @relation("Friends")
  sentFriendRequests        FriendRequest[]          @relation("SentFriendRequests")
  receivedFriendRequests    FriendRequest[]          @relation("ReceivedFriendRequests")
  judgedMatches             Match[]                  @relation("JudgedMatches")
  refereedMatches           Match[]                  @relation("RefereeMatches")
  teamApplications          TeamApplication[]
  sponsorships              Sponsorship[]
  sponsorshipOffers         SponsorshipOffer[]
  measurements              Measurement[]
  trainingLogs              TrainingLog[]
  trainingPrograms          UserTrainingProgram[]
  trainingProposalsSent     TrainingProposal[]       @relation("SentProposals")
  trainingProposalsReceived TrainingProposal[]       @relation("ReceivedProposals")
  authoredPolls             Poll[]
  pollVotes                 PollVote[]
  sentAnnouncements         TournamentAnnouncement[]
  notifications             Notification[]
  inventoryItems            InventoryItem[]
  foodLogEntries            FoodLogEntry[]
  reportsSent               Report[]                 @relation("ReportsSent")
  reportsReceived           Report[]                 @relation("ReportsReceived")
  userAchievements          UserAchievement[]
  activities                Activity[]
  judgedTournaments         Tournament[]             @relation("JudgedTournaments")
  chats                     Chat[]                   @relation("UserChats")
  messages                  Message[]
  createdChallenges         Challenge[]              @relation("CreatedChallenges")
  acceptedChallenges        Challenge[]              @relation("AcceptedChallenges")
  resolvedReports           Report[]                 @relation("ReportsResolved")
  matchEvents               MatchEvent[]

  @@index([email])
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model CareerHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}


model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
}


// --- Team Models ---

model Team {
  id                 String             @id @default(cuid())
  name               String
  slug               String             @unique
  logo               String?
  dataAiHint         String?
  game               String
  motto              String?
  pitch              String?
  description        String?
  goals              String?
  rank               Int                @default(99)
  wins               Int                @default(0)
  losses             Int                @default(0)
  draws              Int                @default(0)
  seekingSponsorship Boolean            @default(true)
  
  // Relations
  captain            User               @relation("TeamCaptains", fields: [captainId], references: [id])
  captainId          String
  creator            User               @relation("TeamCreators", fields: [creatorId], references: [id])
  creatorId          String
  members            User[]             @relation("TeamMembers")
  tournaments        Tournament[]
  team1Matches       Match[]            @relation("Team1Matches")
  team2Matches       Match[]            @relation("Team2Matches")
  matchEvents        MatchEvent[]
  sponsorships       Sponsorship[]      @relation("SponsoredTeams")
  sponsorshipOffers  SponsorshipOffer[]
  homePlayground     Playground?        @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?
  applications       TeamApplication[]
  practices          TeamPractice[]
  leagues            LeagueTeam[]
  chat               Chat?

  @@index([slug])
}

model TeamPractice {
  id           String      @id @default(cuid())
  team         Team        @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground  @relation(fields: [playgroundId], references: [id])
  playgroundId String
}


// --- Tournament & Match Models ---

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  description             String?
  game                    String
  type                    String // team or individual
  format                  String // single_elimination, round_robin, groups
  category                String
  location                String
  participantCount        Int
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  status                  TournamentStatus
  
  // Relations
  organizer               User                     @relation("OrganizedTournaments", fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
  judges                  User[]                     @relation("JudgedTournaments")
  sponsors                Sponsor[]                  @relation("SponsoredTournaments")
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  applications            TeamApplication[]
  league                  League?                  @relation(fields: [leagueId], references: [id])
  leagueId                String?
}

model TournamentMedia {
    id String @id @default(cuid())
    tournament Tournament @relation(fields: [tournamentId], references: [id])
    tournamentId String
    type String
    src String
    description String?
    hint String?
    createdAt DateTime @default(now())
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

model Match {
  id              String      @id @default(cuid())
  team1           Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournamentId    String?
  tournament      Tournament? @relation(fields: [tournamentId], references: [id])
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  location        String?
  playgroundId    String?
  round           Int?
  
  // Relations
  events          MatchEvent[]
  league          League?      @relation(fields: [leagueId], references: [id])
  leagueId        String?
  referee         User?        @relation("RefereeMatches", fields: [refereeId], references: [id])
  refereeId       String?
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model MatchEvent {
  id         String         @id @default(cuid())
  match      Match          @relation(fields: [matchId], references: [id])
  matchId    String
  team       Team           @relation(fields: [teamId], references: [id])
  teamId     String
  player     User           @relation(fields: [playerId], references: [id])
  playerId   String
  type       MatchEventType
  timestamp  DateTime       @default(now())
  metadata   Json?
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  SHOT
  SHOT_ON_TARGET
  CORNER
  FOUL
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}


// --- Notification System ---

model Notification {
  id             String           @id @default(cuid())
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  type           NotificationType
  message        String
  href           String?
  isRead         Boolean          @default(false)
  createdAt      DateTime         @default(now())
  
  // Relations for specific notification types
  announcement   TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
  announcementId String?
  matchId        String?
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  CHALLENGE
  TEAM_INVITE
}


// --- Sponsors & Promotions ---

model Sponsor {
  id              String       @id @default(cuid())
  name            String       @unique
  logo            String?
  logoHint        String?
  description     String
  profileUrl      String
  interests       String[]
  // Relations
  tournaments     Tournament[] @relation("SponsoredTournaments")
  teams           Team[]       @relation("SponsoredTeams")
  promotions      Promotion[]
  sponsorships    Sponsorship[]
  sponsorshipOffers SponsorshipOffer[]
}

model Promotion {
  id           String   @id @default(cuid())
  name         String
  description  String
  prize        String
  cost         String
  imageDataUri String
  imageHint    String
  endDate      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  organizer    User     @relation(fields: [organizerId], references: [id])
  organizerId  String
  sponsor      Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId    String?
}


// --- Challenges ---

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  status       ChallengeStatus @default(OPEN)
  result       String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relations
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  creator      User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  opponentId   String?
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// --- Playgrounds & Reports ---

model Playground {
  id              String      @id @default(cuid())
  name            String
  address         String
  type            String
  coverImage      String?
  coverImageHint  String?
  surface         String
  features        String[]
  rating          Float       @default(0)
  checkIns        Int         @default(0)
  status          PlaygroundStatus @default(PENDING_MODERATION)
  
  // Relations
  creator         User        @relation(fields: [creatorId], references: [id])
  creatorId       String
  reviews         PlaygroundReview[]
  reports         PlaygroundReport[]
  activities      Activity[]
  practices       TeamPractice[]
  homeTeams       Team[]
  lobbies         LfgLobby[]
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String       @id @default(cuid())
  playground   Playground   @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User         @relation("ReportsSent", fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus
  createdAt    DateTime     @default(now())
}

enum PlaygroundStatus {
  PENDING_MODERATION
  APPROVED
  REJECTED
}


// --- LFG & Chat ---

model LfgLobby {
  id           String       @id @default(cuid())
  type         LfgLobbyType
  sport        String
  location     String
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  comment      String
  status       LfgLobbyStatus @default(OPEN)
  createdAt    DateTime     @default(now())

  // Relations
  creator      User         @relation("CreatedLobbies", fields: [creatorId], references: [id])
  creatorId    String
  players      User[]       @relation("JoinedLobbies")
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId String?
}

enum LfgLobbyStatus {
    OPEN
    FULL
    IN_PROGRESS
    FINISHED
    CANCELLED
}

enum LfgLobbyType {
    GAME
    TRAINING
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]    @relation("UserChats")
  messages     Message[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum ChatType {
  DIRECT
  GROUP
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// --- Complex Relations & Admin ---

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  createdAt    DateTime              @default(now())
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

model Sponsorship {
    id String @id @default(cuid())
    team Team @relation(fields: [teamId], references: [id])
    teamId String
    sponsor Sponsor @relation(fields: [sponsorId], references: [id])
    sponsorId String
    user User @relation(fields: [userId], references: [id])
    userId String
    amount Decimal
    signedAt DateTime @default(now())
}

model SponsorshipOffer {
  id         String                 @id @default(cuid())
  team       Team                   @relation(fields: [teamId], references: [id])
  teamId     String
  sponsor    Sponsor                @relation(fields: [sponsorId], references: [id])
  sponsorId  String
  offerText  String
  status     SponsorshipOfferStatus @default(PENDING)
  createdAt  DateTime               @default(now())
}

enum SponsorshipOfferStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Report {
  id               String       @id @default(cuid())
  category         String
  description      String?
  status           ReportStatus @default(PENDING)
  createdAt        DateTime     @default(now())
  resolvedAt       DateTime?

  // Relations
  reporter         User         @relation("ReportsSent", fields: [reporterId], references: [id])
  reporterId       String
  reportedUser     User         @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  reportedUserId   String
  resolver         User?        @relation("ReportsResolved", fields: [resolverId], references: [id])
  resolverId       String?
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model UserAchievement {
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@id([userId, achievementId])
}

model Achievement {
  id          String            @id @default(cuid())
  name        String            @unique
  description String
  icon        String
  users       UserAchievement[]
}

// --- Training & Nutrition Models ---

model TrainingProgram {
  id              String                @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String?
  coverImageHint  String?
  isAiGenerated   Boolean               @default(false)
  
  // Relations
  weeklySplit       WorkoutDay[]
  userAssignments   UserTrainingProgram[]
  trainingProposals TrainingProposal[]
}

model UserTrainingProgram {
    user User @relation(fields: [userId], references: [id])
    userId String
    program TrainingProgram @relation(fields: [programId], references: [id])
    programId String
    assignedAt DateTime @default(now())
    isActive Boolean @default(true)

    @@id([userId, programId])
}


model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model TrainingLog {
  id          String           @id @default(cuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  workoutName String?
  status      TrainingLogStatus
  mood        Mood?
  notes       String?
  coachNotes  String?
  exercises   LoggedExercise[]
}

model LoggedExercise {
  id            String       @id @default(cuid())
  trainingLog   TrainingLog  @relation(fields: [trainingLogId], references: [id])
  trainingLogId String
  exercise      Exercise     @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  notes         String?
  isSupersetWithPrevious Boolean?
  sets          LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Int?
  isCompleted      Boolean        @default(false)
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

model Sport {
    id String @id @default(cuid())
    name String @unique
    icon String
    category String
    challenges Challenge[]
}

model League {
  id String @id @default(cuid())
  name String @unique
  description String
  game String
  image String?
  imageHint String?
  teams LeagueTeam[]
  tournaments Tournament[]
  matches Match[]
}

model LeagueTeam {
    league League @relation(fields: [leagueId], references: [id])
    leagueId String
    team Team @relation(fields: [teamId], references: [id])
    teamId String
    played Int @default(0)
    wins Int @default(0)
    draws Int @default(0)
    losses Int @default(0)
    points Int @default(0)

    @@id([leagueId, teamId])
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  
  // Relations
  options   PollOption[]
  votes     PollVote[]
  author    User?        @relation(fields: [authorId], references: [id])
  authorId  String?
}

model PollOption {
  id      String     @id @default(cuid())
  poll    Poll       @relation(fields: [pollId], references: [id])
  pollId  String
  text    String
  // Relations
  votes   PollVote[]
}

model PollVote {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  votedAt      DateTime   @default(now())

  @@id([userId, pollId])
}

model TournamentAnnouncement {
    id String @id @default(cuid())
    tournament Tournament @relation(fields: [tournamentId], references: [id])
    tournamentId String
    sender User @relation(fields: [senderId], references: [id])
    senderId String
    subject String
    message String
    sentTo Int
    createdAt DateTime @default(now())
    notifications Notification[]
}


enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model Activity {
    id String @id @default(cuid())
    type ActivityType
    user User @relation(fields: [userId], references: [id])
    userId String
    metadata Json
    createdAt DateTime @default(now())
    
    // Optional relation to a playground
    playground Playground? @relation(fields: [playgroundId], references: [id])
    playgroundId String?
}


model MedicalPartner {
    id String @id @default(cuid())
    name String
    specialization String
    contact String
    avatar String?
    avatarHint String?
    tournaments Tournament[]
}

model TrainingProposal {
    id String @id @default(cuid())
    from User @relation("SentProposals", fields: [fromId], references: [id])
    fromId String
    to User @relation("ReceivedProposals", fields: [toId], references: [id])
    toId String
    sport String
    date DateTime
    comment String?
    status TrainingProposalStatus @default(PENDING)
    program TrainingProgram? @relation(fields: [programId], references: [id])
    programId String?
    createdAt DateTime @default(now())
}

enum TrainingProposalStatus {
    PENDING
    ACCEPTED
    DECLINED
}

model InventoryItem {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    name String
    category String
    type String
    purchaseDate DateTime
    lifespanMonths Int
    image String?
    imageHint String?
    createdAt DateTime @default(now())
}

model StoreItem {
    id String @id @default(cuid())
    name String
    description String
    price Float
    image String?
    imageHint String?
    category String
    isRealMoney Boolean @default(false)
}

model FaqItem {
    id String @id @default(cuid())
    category String
    question String
    answer String
    createdAt DateTime @default(now())
}

model FoodItem {
    id String @id @default(cuid())
    name String @unique
    category String
    image String?
    imageHint String?
    calories Float
    protein Float
    fat Float
    carbs Float
    description String?
    logEntries FoodLogEntry[]
}

model FoodLogEntry {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    foodItem FoodItem @relation(fields: [foodItemId], references: [id])
    foodItemId String
    grams Int
    meal String
    createdAt DateTime @default(now())
}

model Measurement {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    date DateTime
    weight Float
    bodyFat Float?
    chest Float?
    waist Float?
    hips Float?
    biceps Float?
    thigh Float?
}

model Exercise {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json
  commonMistakes  Json
  alternatives    Json
  loggedExercises LoggedExercise[]
}
