// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums ---

enum UserRole {
  ADMIN       @map("Администратор")
  MODERATOR   @map("Модератор")
  CAPTAIN     @map("Капитан")
  PLAYER      @map("Игрок")
  COACH       @map("Тренер")
  JUDGE       @map("Судья")
  MANAGER     @map("Менеджер")
  ORGANIZER   @map("Организатор")
  SPONSOR     @map("Спонсор")
  FAN         @map("Болельщик")
}

enum UserStatus {
  ACTIVE    @map("Активен")
  BANNED    @map("Забанен")
  INACTIVE  @map("Неактивен")
}

// --- Models ---

model User {
  id                        String                   @id @default(cuid())
  email                     String                   @unique
  name                      String
  passwordHash              String
  avatar                    String?
  role                      UserRole                 @default(PLAYER)
  status                    UserStatus               @default(ACTIVE)
  xp                        Int                      @default(0)
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  dateOfBirth               DateTime?
  location                  String?
  mainSport                 String?
  isVerified                Boolean                  @default(false)
  preferredSports           String[]
  telegram                  String?
  discord                   String?
  organizedTournaments      Tournament[]             @relation("OrganizedTournaments")
  judgedTournaments         Tournament[]             @relation("JudgedTournaments")
  refereedMatches           Match[]                  @relation("RefereeMatches")
  teamApplications          TeamApplication[]
  sponsorships              Sponsorship[]
  sponsorshipOffers         SponsorshipOffer[]
  measurements              Measurement[]
  trainingProposalsSent     TrainingProposal[]       @relation("SentProposals")
  trainingProposalsReceived TrainingProposal[]       @relation("ReceivedProposals")
  trainingLogs              TrainingLog[]
  userAchievements          UserAchievement[]
  inventory                 InventoryItem[]
  foodLog                   FoodLogEntry[]
  reportsSent               Report[]                 @relation("ReportsSent")
  reportsReceived           Report[]                 @relation("ReportsReceived")
  resolvedReports           Report[]                 @relation("ResolvedReports")
  playgroundReportsSent     PlaygroundReport[]
  coachProfile              CoachProfile?
  careerHistory             CareerHistory[]
  createdPlaygrounds        Playground[]
  notifications             Notification[]
  sentFriendRequests        FriendRequest[]          @relation("SentFriendRequests")
  receivedFriendRequests    FriendRequest[]          @relation("ReceivedFriendRequests")
  friends                   User[]                   @relation("Friends")
  friendOf                  User[]                   @relation("Friends")
  createdChallenges         Challenge[]              @relation("CreatedChallenges")
  acceptedChallenges        Challenge[]              @relation("AcceptedChallenges")
  createdLobbies            LfgLobby[]               @relation("CreatedLobbies")
  joinedLobbies             LfgLobby[]               @relation("JoinedLobbies")
  pollVotes                 PollVote[]
  createdPolls              Poll[]
  messages                  Message[]
  chats                     Chat[]                   @relation("UserChats")
  activities                Activity[]
  assignedTrainingPrograms  UserTrainingProgram[]
  teamsAsCaptain            Team[]                   @relation("TeamCaptains")
  teamsAsCreator            Team[]                   @relation("TeamCreators")
  teamsAsMember             Team[]                   @relation("TeamMembers")
  matchEvents               MatchEvent[]
  organizedPromotions       Promotion[]
  playgroundReviews         PlaygroundReview[]
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@unique([fromId, toId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Team {
  id                 String             @id @default(cuid())
  name               String             @unique
  motto              String?
  logo               String?
  dataAiHint         String?
  game               String
  rank               Int                @default(0)
  wins               Int                @default(0)
  losses             Int                @default(0)
  draws              Int                @default(0)
  seekingSponsorship Boolean            @default(false)
  pitch              String?
  creator            User               @relation("TeamCreators", fields: [creatorId], references: [id])
  creatorId          String
  captain            User               @relation("TeamCaptains", fields: [captainId], references: [id])
  captainId          String
  members            User[]             @relation("TeamMembers")
  tournaments        Tournament[]
  team1Matches       Match[]            @relation("Team1Matches")
  team2Matches       Match[]            @relation("Team2Matches")
  chat               Chat?
  practices          TeamPractice[]
  sponsorships       Sponsorship[]      @relation("SponsoredTeams")
  sponsorshipOffers  SponsorshipOffer[]
  applications       TeamApplication[]
  leagueTeams        LeagueTeam[]
  homePlayground     Playground?        @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?
  matchEvents        MatchEvent[]
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  game                    String
  status                  TournamentStatus
  format                  String
  type                    String
  category                String
  location                String
  participantCount        Int
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  description             String?
  organizer               User                     @relation("OrganizedTournaments", fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
  judges                  User[]                   @relation("JudgedTournaments")
  sponsors                Sponsor[]                @relation("SponsoredTournaments")
  medicalPartners         MedicalPartner[]         @relation("TournamentMedicalPartners")
  announcements           TournamentAnnouncement[]
  applications            TeamApplication[]
  league                  League?                  @relation(fields: [leagueId], references: [id])
  leagueId                String?
  media                   TournamentMedia[]
}

model TournamentMedia {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type         String
  src          String
  description  String?
  hint         String?
  createdAt    DateTime   @default(now())
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

model Match {
  id              String       @id @default(cuid())
  team1           Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournament      Tournament?  @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  league          League?      @relation(fields: [leagueId], references: [id])
  leagueId        String?
  referee         User?        @relation("RefereeMatches", fields: [refereeId], references: [id])
  refereeId       String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  location        String?
  playground      Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId    String?
  round           Int?
  events          MatchEvent[]
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model MatchEvent {
  id         String         @id @default(cuid())
  match      Match          @relation(fields: [matchId], references: [id])
  matchId    String
  timestamp  DateTime
  type       MatchEventType
  team       Team           @relation(fields: [teamId], references: [id])
  teamId     String
  player     User           @relation(fields: [playerId], references: [id])
  playerId   String
  metadata   Json?
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  SHOT
  SHOT_ON_TARGET
  CORNER
  FOUL
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

model Sponsor {
  id          String         @id @default(cuid())
  name        String         @unique
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  tournaments Tournament[]   @relation("SponsoredTournaments")
  teams       Team[]         @relation("SponsoredTeams")
  promotions  Promotion[]
  offers      SponsorshipOffer[]
}

model Playground {
  id              String               @id @default(cuid())
  name            String
  address         String
  type            String
  coverImage      String?
  coverImageHint  String?
  surface         String
  features        String[]
  rating          Float
  checkIns        Int                  @default(0)
  status          PlaygroundStatus     @default(PENDING_MODERATION)
  creator         User                 @relation(fields: [creatorId], references: [id])
  creatorId       String
  matches         Match[]
  practices       TeamPractice[]
  activities      Activity[]
  reports         PlaygroundReport[]
  residentTeams   Team[]
  lfgLobbies      LfgLobby[]
  reviews         PlaygroundReview[]
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
  REJECTED
}

model Sponsorship {
  id         String   @id @default(cuid())
  team       Team     @relation(fields: [teamId], references: [id])
  teamId     String
  sponsor    Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId  String
  amount     Float
  signedAt   DateTime @default(now())
  expiresAt  DateTime
  contractId String   @unique

  user User @relation(fields: [userId], references: [id])
  userId String
}

model TeamApplication {
  id           String                  @id @default(cuid())
  team         Team                    @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                    @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?             @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  message      String?
  status       TeamApplicationStatus   @default(PENDING)
  createdAt    DateTime                @default(now())
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

model UserAchievement {
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@id([userId, achievementId])
}

model Achievement {
  id          String            @id @default(cuid())
  name        String            @unique
  description String
  icon        String
  users       UserAchievement[]
}

model LfgLobby {
  id           String       @id @default(cuid())
  type         LfgLobbyType
  sport        String
  location     String
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  comment      String
  status       LfgLobbyStatus @default(OPEN)
  creator      User         @relation("CreatedLobbies", fields: [creatorId], references: [id])
  creatorId    String
  players      User[]       @relation("JoinedLobbies")
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId String?
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]    @relation("UserChats")
  messages     Message[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
  createdAt    DateTime  @default(now())
}

enum ChatType {
  DIRECT
  GROUP
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model SponsorshipOffer {
  id          String                 @id @default(cuid())
  team        Team                   @relation(fields: [teamId], references: [id])
  teamId      String
  sponsor     Sponsor                @relation(fields: [sponsorId], references: [id])
  sponsorId   String
  user        User                   @relation(fields: [userId], references: [id])
  userId      String
  offerText   String
  status      SponsorshipOfferStatus @default(PENDING)
  createdAt   DateTime               @default(now())
}

enum SponsorshipOfferStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model TrainingProgram {
  id              String                @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String?
  coverImageHint  String?
  isAiGenerated   Boolean               @default(false)
  weeklySplit     WorkoutDay[]
  assignedToUsers UserTrainingProgram[]
  proposals       TrainingProposal[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model UserTrainingProgram {
  user       User            @relation(fields: [userId], references: [id])
  userId     String
  program    TrainingProgram @relation(fields: [programId], references: [id])
  programId  String
  assignedAt DateTime        @default(now())
  isActive   Boolean         @default(true)

  @@id([userId, programId])
}

model TrainingLog {
  id           String           @id @default(cuid())
  user         User             @relation(fields: [userId], references: [id])
  userId       String
  date         DateTime
  workoutName  String?
  status       TrainingLogStatus
  exercises    LoggedExercise[]
  mood         Mood?
  notes        String?
  coachNotes   String?
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

model LoggedExercise {
  id                     String      @id @default(cuid())
  trainingLog            TrainingLog   @relation(fields: [trainingLogId], references: [id])
  trainingLogId          String
  exercise               Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId             String
  sets                   LoggedSet[]
  notes                  String?
  isSupersetWithPrevious Boolean?
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean        @default(false)
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  status       ChallengeStatus @default(OPEN)
  result       String?
  creator      User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  opponentId   String?
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  createdAt    DateTime        @default(now())
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("ReportsSent", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  reportedUserId String
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  resolver       User?        @relation("ResolvedReports", fields: [resolverId], references: [id])
  resolverId     String?
  resolvedAt     DateTime?
  resolution     String?
  createdAt      DateTime     @default(now())
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model PlaygroundReport {
  id           String       @id @default(cuid())
  playground   Playground   @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User         @relation(fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus @default(PENDING)
  createdAt    DateTime     @default(now())
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model Promotion {
  id            String   @id @default(cuid())
  name          String
  description   String
  prize         String
  cost          String
  imageDataUri  String
  imageHint     String
  endDate       DateTime
  organizer     User     @relation(fields: [organizerId], references: [id])
  organizerId   String
  sponsor       Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId     String?
  createdAt     DateTime @default(now())
}

model StoreItem {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model InventoryItem {
  id             String   @id @default(cuid())
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime @default(now())
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String   @unique
  answer    String
  createdAt DateTime @default(now())
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String         @unique
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String
  createdAt  DateTime @default(now())
}

model Measurement {
  id      String    @id @default(cuid())
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

model TrainingProposal {
  id        String                   @id @default(cuid())
  from      User                     @relation("SentProposals", fields: [fromId], references: [id])
  fromId    String
  to        User                     @relation("ReceivedProposals", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  comment   String?
  status    TrainingProposalStatus   @default(PENDING)
  program   TrainingProgram?         @relation(fields: [programId], references: [id])
  programId String?
  createdAt DateTime                 @default(now())
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  isActive  Boolean      @default(true)
  options   PollOption[]
  votes     PollVote[]
  author    User?        @relation(fields: [authorId], references: [id])
  authorId  String?
  createdAt DateTime     @default(now())
}

model PollOption {
  id     String     @id @default(cuid())
  text   String
  poll   Poll       @relation(fields: [pollId], references: [id])
  pollId String
  votes  PollVote[]
}

model PollVote {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@id([userId, pollId])
}

model Notification {
  id             String                    @id @default(cuid())
  user           User                      @relation(fields: [userId], references: [id])
  userId         String
  type           NotificationType
  message        String
  href           String?
  isRead         Boolean                   @default(false)
  createdAt      DateTime                  @default(now())
  announcement   TournamentAnnouncement?   @relation(fields: [announcementId], references: [id])
  announcementId String?
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  SYSTEM_ALERT
}

model TournamentAnnouncement {
  id            String         @id @default(cuid())
  tournament    Tournament     @relation(fields: [tournamentId], references: [id])
  tournamentId  String
  sender        User           @relation(fields: [senderId], references: [id])
  senderId      String
  subject       String
  message       String
  sentTo        Int
  createdAt     DateTime       @default(now())
  notifications Notification[]
}

model Activity {
  id           String      @id @default(cuid())
  type         ActivityType
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  metadata     Json
  playground   Playground? @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  createdAt    DateTime    @default(now())
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model CareerHistory {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  teamName    String
  period      String
  role        String
  review      String
  createdAt   DateTime @default(now())
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
}

model League {
  id          String       @id @default(cuid())
  name        String       @unique
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  league    League   @relation(fields: [leagueId], references: [id])
  leagueId  String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  played    Int
  wins      Int
  draws     Int
  losses    Int
  points    Int

  @@id([leagueId, teamId])
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[] @relation("TournamentMedicalPartners")
}

model Sport {
  id        String      @id @default(cuid())
  name      String      @unique
  icon      String
  category  String
  challenges Challenge[]
}
