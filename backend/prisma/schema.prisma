// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================================================================
// Enums
// ==============================================================================

enum UserRole {
  PLAYER
  CAPTAIN
  COACH
  JUDGE
  ORGANIZER
  ADMIN
  MODERATOR
  SPONSOR
  FAN
  MANAGER
}

enum UserStatus {
  ACTIVE
  BANNED
  PENDING_VERIFICATION
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
}

enum TournamentType {
  TEAM
  INDIVIDUAL
}

enum TournamentFormat {
  SINGLE_ELIMINATION
  ROUND_ROBIN
  GROUPS
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  SYSTEM_ALERT
  ACHIEVEMENT_UNLOCKED
}


// ==============================================================================
// Models
// ==============================================================================

model User {
  id                      String                @id @default(cuid())
  name                    String
  email                   String                @unique
  passwordHash            String
  avatar                  String?
  role                    UserRole              @default(PLAYER)
  status                  UserStatus            @default(ACTIVE)
  xp                      Int                   @default(0)
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  teamsAsCaptain          Team[]                @relation("TeamCaptain")
  teamsAsMember           Team[]                @relation("TeamMembers")
  organizedTournaments    Tournament[]
  createdPlaygrounds      Playground[]
  challengesAsCreator     Challenge[]           @relation("ChallengeCreator")
  challengesAsOpponent    Challenge[]           @relation("ChallengeOpponent")
  reportsMade             Report[]              @relation("Reporter")
  reportsReceived         Report[]              @relation("ReportedUser")
  resolvedReports         Report[]              @relation("Resolver")
  judgedMatches           Match[]
  friends                 User[]                @relation("Friends")
  friendOf                User[]                @relation("Friends")
  sentFriendRequests      FriendRequest[]       @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]       @relation("ReceivedFriendRequests")
  lfgLobbies              LfgLobby[]            @relation("LfgLobbyPlayers")
  lfgLobbiesCreated       LfgLobby[]            @relation("LfgLobbyCreator")
  trainingProposalsSent   TrainingProposal[]    @relation("TrainingProposalsSent")
  trainingProposalsReceived TrainingProposal[]  @relation("TrainingProposalsReceived")
  trainingLogs            TrainingLog[]
  measurements            Measurement[]
  inventory               InventoryItem[]
  foodLogEntries          FoodLogEntry[]
  notifications           Notification[]
  careerHistory           CareerHistoryItem[]
  organizedPromotions     Promotion[]
  coachProfile            CoachProfile?
  coaching                User[]                @relation("CoachStudents")
  coach                   User?                 @relation("CoachStudents", fields: [coachId], references: [id])
  coachId                 String?
  resolvedPlaygroundReports PlaygroundReport[]  @relation("PlaygroundReportResolver")
  reportedPlaygrounds     PlaygroundReport[]    @relation("PlaygroundReporter")
  reviews                 PlaygroundReview[]
}

model Team {
  id                   String            @id @default(cuid())
  name                 String
  slug                 String            @unique
  logo                 String?
  dataAiHint           String?
  motto                String?
  description          String?
  game                 String
  rank                 Int               @default(1)
  wins                 Int               @default(0)
  losses               Int               @default(0)
  draws                Int               @default(0)
  creatorId            String
  creator              User              @relation("TeamCreator", fields: [creatorId], references: [id])
  captainId            String
  captain              User              @relation("TeamCaptain", fields: [captainId], references: [id])
  members              User[]            @relation("TeamMembers")
  matchesAsTeam1       Match[]           @relation("Team1Matches")
  matchesAsTeam2       Match[]           @relation("Team2Matches")
  tournaments          Tournament[]
  seekingSponsorship   Boolean           @default(false)
  sponsors             Sponsor[]
  applications         TeamApplication[]
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  homePlaygroundId     String?
  homePlayground       Playground?       @relation(fields: [homePlaygroundId], references: [id])
  practices            TeamPractice[]
  chat                 Chat?
  careerHistoryItems   CareerHistoryItem[]
}

model Match {
  id              String       @id @default(cuid())
  team1Id         String
  team1           Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team2Id         String
  team2           Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournamentId    String?
  tournament      Tournament?  @relation(fields: [tournamentId], references: [id])
  refereeId       String?
  referee         User?        @relation(fields: [refereeId], references: [id])
  refereeName     String?
  playgroundId    String?
  location        String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  game                  String
  description           String?
  status                TournamentStatus
  type                  TournamentType
  format                TournamentFormat
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  organizerId           String
  organizer             User                     @relation(fields: [organizerId], references: [id])
  teams                 Team[]
  matches               Match[]
  media                 TournamentMedia[]
  sponsors              Sponsor[]                @relation("TournamentSponsors")
  judges                User[]                   @relation("TournamentJudges")
  medicalPartners       MedicalPartner[]         @relation("TournamentMedicalPartners")
  applications          TeamApplication[]
  announcements         TournamentAnnouncement[]
}

model TeamApplication {
  id           String  @id @default(cuid())
  teamId       String
  userId       String
  tournamentId String?
  message      String?
  status       String  @default("PENDING") // PENDING, APPROVED, REJECTED
  team         Team    @relation(fields: [teamId], references: [id])

  @@unique([teamId, userId, tournamentId])
}

model TournamentMedia {
  id          String   @id @default(cuid())
  tournament  Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type        String   // "IMAGE" or "VIDEO"
  src         String
  description String?
  hint        String?
  createdAt   DateTime @default(now())
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  creatorId    String
  opponentId   String?
  wager        Int
  status       ChallengeStatus
  result       String?
  disciplineId String
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  creator      User            @relation("ChallengeCreator", fields: [creatorId], references: [id])
  opponent     User?           @relation("ChallengeOpponent", fields: [opponentId], references: [id])
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model Report {
  id             String       @id @default(cuid())
  reporterId     String
  reportedUserId String
  reason         String
  context        String
  status         ReportStatus @default(PENDING)
  resolverId     String?
  resolution     String?
  createdAt      DateTime     @default(now())
  resolvedAt     DateTime?
  reporter       User         @relation("Reporter", fields: [reporterId], references: [id])
  reportedUser   User         @relation("ReportedUser", fields: [reportedUserId], references: [id])
  resolver       User?        @relation("Resolver", fields: [resolverId], references: [id])
}

model Playground {
  id                String             @id @default(cuid())
  name              String
  address           String
  type              String
  surface           String
  features          String[]
  coverImage        String?
  coverImageHint    String?
  rating            Float
  checkIns          Int
  status            String
  creatorId         String
  creator           User               @relation(fields: [creatorId], references: [id])
  teams             Team[]
  reports           PlaygroundReport[]
  reviews           PlaygroundReview[]
}

model PlaygroundReport {
  id           String       @id @default(cuid())
  playgroundId String
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus @default(PENDING)
  resolution   String?
  resolvedAt   DateTime?
  resolverId   String?
  playground   Playground   @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  reporter     User         @relation("PlaygroundReporter", fields: [reporterId], references: [id], onDelete: Cascade)
  resolver     User?        @relation("PlaygroundReportResolver", fields: [resolverId], references: [id])
  createdAt    DateTime     @default(now())
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playgroundId String
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
  playground   Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  author       User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model FriendRequest {
  id        String              @id @default(cuid())
  fromId    String
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])

  @@unique([fromId, toId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  authorId  String
  content   String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])
}

model Chat {
  id           String    @id @default(cuid())
  name         String? // For group chats
  type         String    // "DIRECT" or "GROUP"
  participants User[]
  messages     Message[]
  teamId       String?   @unique
  team         Team?     @relation(fields: [teamId], references: [id])
  createdAt    DateTime  @default(now())
}

model Activity {
  id           String       @id @default(cuid())
  userId       String
  type         ActivityType
  metadata     Json
  createdAt    DateTime     @default(now())
  playgroundId String?
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  playground   Playground?  @relation(fields: [playgroundId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CoachProfile {
  id             String    @id @default(cuid())
  userId         String    @unique
  user           User      @relation(fields: [userId], references: [id])
  specialization String
  description    String
  experience     String
  tags           String[]
  rating         Float
  price          Float
}

model Sponsor {
  id             String       @id @default(cuid())
  name           String
  logo           String?
  logoHint       String?
  description    String
  profileUrl     String
  interests      String[]
  tournaments    Tournament[] @relation("TournamentSponsors")
  teams          Team[]
  promotions     Promotion[]
}

model Quest {
  id          String    @id @default(cuid())
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  type        QuestType
  createdAt   DateTime  @default(now())
}

model StoreItem {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean   @default(false)
}

model Promotion {
  id            String    @id @default(cuid())
  name          String
  description   String
  prize         String
  cost          String
  imageDataUri  String
  imageHint     String
  endDate       DateTime
  sponsorId     String?
  sponsor       Sponsor?  @relation(fields: [sponsorId], references: [id])
  organizerId   String
  organizer     User      @relation(fields: [organizerId], references: [id])
  createdAt     DateTime  @default(now())
}

model Sport {
  id       String      @id
  name     String
  icon     String
  category String
  challenges Challenge[]
}

model LfgLobby {
  id            String       @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  playgroundId  String?
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  creatorId     String
  creator       User         @relation("LfgLobbyCreator", fields: [creatorId], references: [id])
  players       User[]       @relation("LfgLobbyPlayers")
  createdAt     DateTime     @default(now())
}

model TrainingProposal {
  id          String                 @id @default(cuid())
  fromId      String
  from        User                   @relation("TrainingProposalsSent", fields: [fromId], references: [id])
  toId        String
  to          User                   @relation("TrainingProposalsReceived", fields: [toId], references: [id])
  sport       String
  date        DateTime
  programId   String?
  program     TrainingProgram?       @relation(fields: [programId], references: [id])
  comment     String?
  status      TrainingProposalStatus @default(PENDING)
  createdAt   DateTime               @default(now())
}

model TrainingProgram {
  id               String               @id @default(cuid())
  name             String
  description      String
  goal             String
  daysPerWeek      Int
  splitType        String
  author           String
  coverImage       String
  coverImageHint   String
  isAiGenerated    Boolean              @default(false)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  weeklySplit      WorkoutDay[]
  trainingProposals TrainingProposal[]
}

model WorkoutDay {
  id               String            @id @default(cuid())
  trainingProgramId String
  day              Int
  title            String
  program          TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  exercises        WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDayId            String
  day                     WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model Measurement {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  date      DateTime
  weight    Float
  bodyFat   Float?
  chest     Float?
  waist     Float?
  hips      Float?
  biceps    Float?
  thigh     Float?
}

model TrainingLog {
  id         String            @id @default(cuid())
  userId     String
  user       User              @relation(fields: [userId], references: [id])
  date       DateTime
  workoutName String?
  status     TrainingLogStatus
  mood       Mood?
  notes      String?
  coachNotes String?
  exercises  LoggedExercise[]
}

model LoggedExercise {
  id                 String  @id @default(cuid())
  trainingLogId      String
  log                TrainingLog @relation(fields: [trainingLogId], references: [id])
  exerciseId         String
  exercise           Exercise @relation(fields: [exerciseId], references: [id])
  notes              String?
  isSupersetWithPrevious Boolean?
  sets               LoggedSet[]
}

model LoggedSet {
  id               String  @id @default(cuid())
  loggedExerciseId String
  exerciseLog      LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Int?
  isCompleted      Boolean @default(false)
}

model Exercise {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json
  commonMistakes  Json
  alternatives    Json
  loggedExercises LoggedExercise[]
}

model InventoryItem {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model FaqItem {
  id         String   @id @default(cuid())
  category   String
  question   String
  answer     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CareerHistoryItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id])
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model TeamPractice {
  id           String     @id @default(cuid())
  teamId       String
  team         Team       @relation(fields: [teamId], references: [id])
  playgroundId String
  playground   Playground @relation(fields: [playgroundId], references: [id])
  title        String
  description  String?
  date         DateTime
}

model FoodItem {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String
  image       String?
  imageHint   String?
  calories    Int
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  foodItemId  String
  foodItem    FoodItem @relation(fields: [foodItemId], references: [id])
  grams       Int
  meal        MealType
  createdAt   DateTime @default(now())
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType
  message   String
  href      String?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  @@index([userId])
}

model Poll {
  id          String      @id @default(cuid())
  title       String
  question    String
  authorId    String?
  author      User?       @relation(fields: [authorId], references: [id])
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  options     PollOption[]
  votes       PollVote[]
}

model PollOption {
  id        String     @id @default(cuid())
  text      String
  pollId    String
  poll      Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes     PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  pollId       String
  poll         Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollOptionId String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())

  @@unique([userId, pollId])
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournamentId String
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  senderId     String
  sender       User       @relation(fields: [senderId], references: [id])
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
}

model MedicalPartner {
  id           String       @id @default(cuid())
  name         String
  specialization String
  contact      String
  avatar       String?
  avatarHint   String?
  tournaments  Tournament[] @relation("TournamentMedicalPartners")
}
