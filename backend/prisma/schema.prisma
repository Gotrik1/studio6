// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ==============================================================================
// === ENUMS
// ==============================================================================
enum Role {
  Игрок
  Капитан
  Тренер
  Организатор
  Судья
  Менеджер
  Администратор
  Модератор
  Болельщик
  Спонсор
}

enum UserStatus {
  Активен
  Забанен
  Неактивен
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  TOURNAMENT_INVITE
  TEAM_INVITE
  ANNOUNCEMENT
  SYSTEM
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum ChatType {
  DIRECT
  GROUP
}

enum TournamentType {
  team
  individual
}

enum TournamentFormat {
  single_elimination
  round_robin
  groups
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

enum PlaygroundStatus {
  PENDING_MODERATION
  APPROVED
  REJECTED
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}


// ==============================================================================
// === MODELS
// ==============================================================================
model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  name                    String
  passwordHash            String
  role                    String
  status                  String                   @default("Активен")
  xp                      Int                      @default(0)
  avatar                  String?
  bannerImage             String?
  bannerImageHint         String?
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  isVerified              Boolean                  @default(false)
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt

  // Relations
  teamsAsMember           Team[]                   @relation("TeamMembers")
  captainOfTeams          Team[]                   @relation("TeamCaptains")
  creatorOfTeams          Team[]                   @relation("TeamCreators")

  coachProfile            CoachProfile?
  coaching                User[]                   @relation("CoachingRelationship")
  coachedBy               User?                    @relation("CoachingRelationship", fields: [coachId], references: [id])
  coachId                 String?

  organizedTournaments    Tournament[]
  organizedPromotions     Promotion[]

  activities              Activity[]
  notifications           Notification[]

  authoredMessages        Message[]
  chats                   Chat[]                   @relation("ChatParticipants")

  createdPlaygrounds      Playground[]
  playgroundReviews       PlaygroundReview[]

  friendRequestsSent      FriendRequest[]          @relation("SentRequests")
  friendRequestsReceived  FriendRequest[]          @relation("ReceivedRequests")
  friends                 User[]                   @relation("Friends")
  friendOf                User[]                   @relation("Friends")

  challengesCreated       Challenge[]              @relation("ChallengesCreated")
  challengesAsOpponent    Challenge[]              @relation("ChallengesAsOpponent")

  reportsSent             Report[]                 @relation("ReportsSent")
  reportsReceived         Report[]                 @relation("ReportsReceived")
  reportsResolved         Report[]                 @relation("ReportsResolved")

  judgedMatches           Match[]                  @relation("JudgedMatches")
  matchEvents             MatchEvent[]

  createdTeamApplications TeamApplication[]

  pollVotes               PollVote[]

  createdQuests           Quest[]

  inventory               InventoryItem[]

  measurements            Measurement[]
  foodLogEntries          FoodLogEntry[]

  trainingLogs            TrainingLog[]
  assignedPrograms        UserTrainingProgram[]

  trainingProposalsSent     TrainingProposal[]       @relation("SentProposals")
  trainingProposalsReceived TrainingProposal[]       @relation("ReceivedProposals")

  createdLobbies          LfgLobby[]               @relation("LobbyCreator")
  joinedLobbies           LfgLobby[]               @relation("LobbyPlayers")
}

model CoachProfile {
  id             String  @id @default(cuid())
  user           User    @relation(fields: [userId], references: [id])
  userId         String  @unique
  specialization String
  description    String  @db.Text
  tags           String[]
  experience     String
  rating         Float   @default(0)
  price          Decimal @default(0)
}

model Team {
  id                  String   @id @default(cuid())
  slug                String   @unique
  name                String
  motto               String?
  logo                String?
  dataAiHint          String?
  game                String
  rank                Int      @default(0)
  wins                Int      @default(0)
  losses              Int      @default(0)
  draws               Int      @default(0)
  seekingSponsorship  Boolean  @default(false)
  pitch               String?
  goals               String?

  creatorId           String
  creator             User     @relation("TeamCreators", fields: [creatorId], references: [id])

  captainId           String
  captain             User     @relation("TeamCaptains", fields: [captainId], references: [id])

  members             User[]   @relation("TeamMembers")

  homePlaygroundId    String?
  homePlayground      Playground? @relation(fields: [homePlaygroundId], references: [id])

  matchesAsTeam1      Match[]  @relation("Team1Matches")
  matchesAsTeam2      Match[]  @relation("Team2Matches")
  tournaments         Tournament[]
  matchEvents         MatchEvent[]

  sponsorships        Sponsorship[]
  sponsorshipOffers   SponsorshipOffer[]

  teamApplications    TeamApplication[]

  chat                Chat?
  practices           TeamPractice[]

  leagues             LeagueTeam[]

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Tournament {
  id                    String      @id @default(cuid())
  slug                  String      @unique
  name                  String
  description           String?
  game                  String
  prizePool             String?
  type                  TournamentType
  format                TournamentFormat
  status                TournamentStatus
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  location              String?
  category              String?

  organizerId           String
  organizer             User         @relation(fields: [organizerId], references: [id])

  teams                 Team[]
  matches               Match[]
  judges                User[]       @relation("JudgedTournaments")
  sponsors              Sponsor[]    @relation("TournamentSponsors")
  medicalPartners       MedicalPartner[]
  announcements         TournamentAnnouncement[]
  media                 TournamentMedia[]

  applications          TeamApplication[]

  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
}

model Match {
  id                String       @id @default(cuid())
  team1Id           String
  team2Id           String
  team1             Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team2             Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team1Score        Int?
  team2Score        Int?
  status            MatchStatus
  scheduledAt       DateTime
  finishedAt        DateTime?
  tournamentId      String?
  tournament        Tournament?  @relation(fields: [tournamentId], references: [id])
  round             Int?
  events            MatchEvent[]
  refereeId         String?
  referee           User?        @relation("JudgedMatches", fields: [refereeId], references: [id])
  refereeName       String?      // Denormalized for convenience
  playgroundId      String?
  playground        Playground?  @relation(fields: [playgroundId], references: [id])
  location          String?

  // For disputes
  disputeReason     String?
  disputeOpenedAt   DateTime?
  resolution        String?

  leagueId          String?
  league            League?      @relation(fields: [leagueId], references: [id])

  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model MatchEvent {
  id        String         @id @default(cuid())
  matchId   String
  match     Match          @relation(fields: [matchId], references: [id])
  timestamp DateTime
  type      MatchEventType
  playerId  String?
  player    User?          @relation(fields: [playerId], references: [id])
  teamId    String?
  team      Team?          @relation(fields: [teamId], references: [id])
  metadata  Json?
}

model Playground {
  id                  String             @id @default(cuid())
  name                String
  address             String
  type                String
  coverImage          String?
  coverImageHint      String?
  surface             String
  features            String[]
  rating              Float
  checkIns            Int
  status              PlaygroundStatus

  creatorId           String
  creator             User               @relation(fields: [creatorId], references: [id])

  homeForTeams        Team[]
  matches             Match[]
  reports             PlaygroundReport[]
  reviews             PlaygroundReview[]
  activities          Activity[]

  scheduledPractices  TeamPractice[]
  lfgLobbies          LfgLobby[]

  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String     @db.Text
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model PlaygroundReport {
  id           String       @id @default(cuid())
  playground   Playground   @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User         @relation(fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String       @db.Text
  severity     String
  summary      String
  status       ReportStatus @default(PENDING)
  createdAt    DateTime     @default(now())
}

model Activity {
  id           String       @id @default(cuid())
  type         ActivityType
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  metadata     Json
  createdAt    DateTime     @default(now())
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model LfgLobby {
  id            String         @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  playgroundId  String?
  playground    Playground?    @relation(fields: [playgroundId], references: [id])
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  creatorId     String
  creator       User           @relation("LobbyCreator", fields: [creatorId], references: [id])
  players       User[]         @relation("LobbyPlayers")
  status        LfgLobbyStatus @default(OPEN)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  tournamentId String?
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  createdAt    DateTime              @default(now())
}

model CareerHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model GalleryItem {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  src        String
  alt        String
  dataAiHint String
  createdAt  DateTime @default(now())
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  disciplineId String
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  creatorId    String
  creator      User            @relation("ChallengesCreated", fields: [creatorId], references: [id])
  opponentId   String?
  opponent     User?           @relation("ChallengesAsOpponent", fields: [opponentId], references: [id])
  status       ChallengeStatus @default(OPEN)
  result       String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model Sport {
  id         String      @id
  name       String
  icon       String
  category   String
  challenges Challenge[]
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  votes     PollVote[]
  isActive  Boolean      @default(true)
  authorId  String?
  author    User?        @relation(fields: [authorId], references: [id])
  createdAt DateTime     @default(now())
}

model PollOption {
  id     String     @id @default(cuid())
  text   String
  poll   Poll       @relation(fields: [pollId], references: [id])
  pollId String
  votes  PollVote[]
}

model PollVote {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@unique([userId, pollId])
}

model Promotion {
  id            String   @id @default(cuid())
  name          String
  description   String
  prize         String
  cost          String
  imageDataUri  String
  imageHint     String
  organizerId   String
  organizer     User     @relation(fields: [organizerId], references: [id])
  sponsorId     String?
  sponsor       Sponsor? @relation(fields: [sponsorId], references: [id])
  endDate       DateTime
  createdAt     DateTime @default(now())
}

model Sponsor {
  id                String             @id
  name              String
  logo              String?
  logoHint          String?
  description       String
  profileUrl        String
  interests         String[]
  promotions        Promotion[]
  teams             Team[]             @relation("Sponsorships")
  sponsoredTournaments Tournament[]    @relation("TournamentSponsors")
  sponsorshipOffers SponsorshipOffer[]
}

model Sponsorship {
  id        String   @id @default(cuid())
  teamId    String
  sponsorId String
  team      Team     @relation("Sponsorships", fields: [teamId], references: [id])
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
  amount    Decimal
  signedAt  DateTime @default(now())

  @@unique([teamId, sponsorId])
}

model SponsorshipOffer {
  id        String            @id @default(cuid())
  teamId    String
  sponsorId String
  team      Team              @relation(fields: [teamId], references: [id])
  sponsor   Sponsor           @relation(fields: [sponsorId], references: [id])
  offerText String
  status    SponsorshipStatus @default(PENDING)
  createdAt DateTime          @default(now())
}

enum SponsorshipStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model League {
  id          String      @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  leagueId String
  teamId   String
  league   League @relation(fields: [leagueId], references: [id])
  team     Team   @relation(fields: [teamId], references: [id])
  played   Int
  wins     Int
  draws    Int
  losses   Int
  points   Int

  @@id([leagueId, teamId])
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}

model TournamentAnnouncement {
  id           String       @id @default(cuid())
  tournamentId String
  tournament   Tournament   @relation(fields: [tournamentId], references: [id])
  senderId     String
  sender       User         @relation(fields: [senderId], references: [id])
  subject      String
  message      String       @db.Text
  sentTo       Int
  createdAt    DateTime     @default(now())
  notifications Notification[]
}

model TournamentMedia {
  id           String     @id @default(cuid())
  type         MediaType
  src          String
  description  String?
  hint         String?
  tournamentId String
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  createdAt    DateTime   @default(now())
}

model Report {
  id             String       @id @default(cuid())
  reporterId     String
  reporter       User         @relation("ReportsSent", fields: [reporterId], references: [id])
  reportedUserId String
  reportedUser   User         @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  category       String
  description    String?      @db.Text
  status         ReportStatus @default(PENDING)
  resolverId     String?
  resolver       User?        @relation("ReportsResolved", fields: [resolverId], references: [id])
  resolution     String?
  createdAt      DateTime     @default(now())
  resolvedAt     DateTime?
}

model Achievement {
  id          String            @id @default(cuid())
  name        String
  description String
  icon        String
  users       UserAchievement[]
}

model UserAchievement {
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  createdAt     DateTime    @default(now())

  @@id([userId, achievementId])
}

model InventoryItem {
  id             String   @id @default(cuid())
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime @default(now())
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String   @db.Text
  createdAt DateTime @default(now())
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       MealType
  createdAt  DateTime @default(now())
}

enum MealType {
  Завтрак
  Обед
  Ужин
  Перекус
}

model Measurement {
  id      String   @id @default(cuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

model TrainingProgram {
  id              String                @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean               @default(false)
  weeklySplit     WorkoutDay[]
  assignedToUsers UserTrainingProgram[]
  trainingProposals TrainingProposal[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  day               Int
  title             String
  trainingProgramId String
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                     String      @id @default(cuid())
  workoutDayId           String
  workoutDay             WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  name                   String
  sets                   String
  reps                   String
  plannedWeight          String?
  isSupersetWithPrevious Boolean?
  technique              String?
}

model UserTrainingProgram {
  user       User            @relation(fields: [userId], references: [id])
  userId     String
  program    TrainingProgram @relation(fields: [programId], references: [id])
  programId  String
  assignedAt DateTime        @default(now())
  isActive   Boolean         @default(true)

  @@id([userId, programId])
}

model TrainingLog {
  id          String           @id @default(cuid())
  userId      String
  user        User             @relation(fields: [userId], references: [id])
  date        DateTime
  workoutName String?
  status      TrainingLogStatus
  exercises   LoggedExercise[]
  mood        Mood?
  notes       String?
  coachNotes  String?
}

model LoggedExercise {
  id                     String    @id @default(cuid())
  trainingLogId          String
  trainingLog            TrainingLog @relation(fields: [trainingLogId], references: [id])
  exerciseId             String
  exercise               Exercise    @relation(fields: [exerciseId], references: [id])
  notes                  String?
  sets                   LoggedSet[]
  isSupersetWithPrevious Boolean?
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExerciseId String
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean
}

model Exercise {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String           @db.Text
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json
  commonMistakes  Json
  alternatives    Json
  loggedExercises LoggedExercise[]
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]    @relation("ChatParticipants")
  messages     Message[]
  teamId       String?   @unique
  team         Team?     @relation(fields: [teamId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
}

model Notification {
  id              String                  @id @default(cuid())
  userId          String
  user            User                    @relation(fields: [userId], references: [id])
  type            NotificationType
  message         String
  href            String?
  isRead          Boolean                 @default(false)
  createdAt       DateTime                @default(now())
  // Optional relations for context
  matchId         String?
  announcementId  String?
  announcement    TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
}

model FriendRequest {
  id        String              @id @default(cuid())
  fromId    String
  toId      String
  from      User                @relation("SentRequests", fields: [fromId], references: [id])
  to        User                @relation("ReceivedRequests", fields: [toId], references: [id])
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
}
