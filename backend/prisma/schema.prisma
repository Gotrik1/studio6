// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(cuid()) @db.Uuid
  name         String
  email        String  @unique
  role         String
  passwordHash String
  avatar       String?

  captainOf Team[]   @relation("TeamCaptain")
  teams     Team[]   @relation("TeamMembers")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id               String   @id @default(cuid()) @db.Uuid
  name             String
  slug             String   @unique
  motto            String?
  logo             String?
  dataAiHint       String?
  game             String
  rank             Int?
  wins             Int      @default(0)
  losses           Int      @default(0)
  draws            Int      @default(0)
  homePlaygroundId String?
  captainId        String   @db.Uuid
  captain          User     @relation("TeamCaptain", fields: [captainId], references: [id])
  members          User[]   @relation("TeamMembers")

  tournaments Tournament[]
  matchesAsT1 Match[]      @relation("Team1Matches")
  matchesAsT2 Match[]      @relation("Team2Matches")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tournament {
  id              String   @id @default(cuid()) @db.Uuid
  name            String
  slug            String?  @unique
  game            String
  format          String // single_elimination, round_robin
  status          String // registration, ongoing, finished
  prizePool       Float
  startDate       DateTime
  bannerImage     String?
  bannerImageHint String?

  teams   Team[]
  matches Match[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Match {
  id           String      @id @default(cuid()) @db.Uuid
  status       String // planned, live, finished, disputed
  score        String?
  scheduledAt  DateTime
  finishedAt   DateTime?
  team1Id      String      @db.Uuid
  team2Id      String      @db.Uuid
  tournamentId String?     @db.Uuid
  team1        Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team2        Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
