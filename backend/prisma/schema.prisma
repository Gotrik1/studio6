// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// Enums
// =================================================================

enum Role {
  Администратор
  Модератор
  Судья
  Капитан
  Игрок
  Тренер
  Менеджер
  Организатор
  Спонсор
  Болельщик
}

enum UserStatus {
  Активен
  Забанен
  Неактивен
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum TrainingGoal {
  Набор_массы
  Снижение_веса
  Рельеф
  Сила
}

enum SplitType {
  Full_body
  Split
  Upper_Lower
}

enum ChatType {
  DIRECT
  GROUP
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  TEAM_INVITE
  CHALLENGE
  SYSTEM
}

// =================================================================
// Models
// =================================================================

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    Role
  status                  UserStatus             @default(Активен)
  xp                      Int                    @default(0)
  isVerified              Boolean                @default(false)
  location                String?
  dateOfBirth             DateTime?
  mainSport               String?
  preferredSports         String[]               @default([])
  telegram                String?
  discord                 String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  sentFriendRequests      FriendRequest[]        @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]        @relation("ReceivedFriendRequests")
  reportsSent             Report[]               @relation("ReportsSent")
  reportsReceived         Report[]               @relation("ReportsReceived")
  reportsResolved         Report[]               @relation("ReportsResolved")
  careerHistory           CareerHistory[]
  coachProfile            CoachProfile?
  coaching                User[]                 @relation("CoachTrainee")
  coach                   User?                  @relation("CoachTrainee", fields: [coachId], references: [id])
  coachId                 String?
  sponsorships            Sponsorship[]
  sponsorshipOffers       SponsorshipOffer[]
  measurements            Measurement[]
  trainingProposalsSent   TrainingProposal[]     @relation("ProposalsSent")
  trainingProposalsRcvd   TrainingProposal[]     @relation("ProposalsReceived")
  pollsVoted              PollVote[]
  createdPlaygrounds      Playground[]
  playgroundReviews       PlaygroundReport[]     @relation("ReportsSent")
  createdChallenges       Challenge[]            @relation("ChallengesCreated")
  acceptedChallenges      Challenge[]            @relation("ChallengesReceived")
  judgedMatches           Match[]                @relation("JudgedMatches")
  matchEvents             MatchEvent[]
  trainingLogs            TrainingLog[]
  notifications           Notification[]
  sentAnnouncements       TournamentAnnouncement[]
  teamsAsMember           Team[]                 @relation("TeamMembers")
  teamApplications        TeamApplication[]
  activities              Activity[]
  inventory               InventoryItem[]
  foodLog                 FoodLogEntry[]
  organizedTournaments    Tournament[]           @relation("OrganizedTournaments")
  judgedTournaments       Tournament[]           @relation("JudgedTournaments")
  teamCaptainOf           Team[]                 @relation("TeamCaptain")
  teamCreatorOf           Team[]                 @relation("TeamCreator")
  assignedPrograms        UserTrainingProgram[]
  lfgLobbies              LfgLobby[]             @relation("LobbyPlayers")
  lfgCreatedLobbies       LfgLobby[]             @relation("LobbyCreator")
  friends                 User[]                 @relation("Friends")
  friendOf                User[]                 @relation("Friends")
  chats                   Chat[]                 @relation("ChatParticipants")
  messages                Message[]

  @@index([email])
}

model Team {
  id                   String                 @id @default(cuid())
  name                 String                 @unique
  slug                 String                 @unique
  motto                String?
  logo                 String?
  dataAiHint           String?
  game                 String
  rank                 Int                    @default(100)
  wins                 Int                    @default(0)
  losses               Int                    @default(0)
  draws                Int                    @default(0)
  seekingSponsorship   Boolean                @default(false)
  pitch                String?
  homePlayground       Playground?            @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId     String?
  creator              User                   @relation("TeamCreator", fields: [creatorId], references: [id])
  creatorId            String
  captain              User                   @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId            String
  members              User[]                 @relation("TeamMembers")
  tournaments          Tournament[]
  matchesAsTeam1       Match[]                @relation("Team1Matches")
  matchesAsTeam2       Match[]                @relation("Team2Matches")
  chat                 Chat?
  practices            TeamPractice[]
  leagueTeams          LeagueTeam[]
  teamApplications     TeamApplication[]
  sponsorships         Sponsorship[]
  sponsorshipOffers    SponsorshipOffer[]
  matchEvents          MatchEvent[]
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  description             String?
  game                    String
  type                    String                   // team or individual
  format                  String                   // single_elimination, round_robin, etc.
  status                  TournamentStatus         @default(REGISTRATION)
  category                String?
  location                String?
  participantCount        Int
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  organizer               User                     @relation("OrganizedTournaments", fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
  judges                  User[]                   @relation("JudgedTournaments")
  sponsors                Sponsor[]                @relation("SponsoredTournaments")
  medicalPartners         MedicalPartner[]
  media                   TournamentMedia[]
  announcements           TournamentAnnouncement[]
  leagueId                String?
  league                  League?                  @relation(fields: [leagueId], references: [id])
  applications            TeamApplication[]
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  status       TeamApplicationStatus @default(PENDING)
  message      String?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  @@unique([teamId, userId, tournamentId])
}

model Match {
  id              String        @id @default(cuid())
  team1           Team          @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team          @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus   @default(PLANNED)
  scheduledAt     DateTime
  finishedAt      DateTime?
  location        String?
  round           Int?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  refereeName     String?
  tournament      Tournament?   @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  league          League?       @relation(fields: [leagueId], references: [id])
  leagueId        String?
  judge           User?         @relation("JudgedMatches", fields: [judgeId], references: [id])
  judgeId         String?
  events          MatchEvent[]
  notifications   Notification[]
}

model MatchEvent {
  id        String         @id @default(cuid())
  type      MatchEventType
  timestamp DateTime
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  team      Team           @relation(fields: [teamId], references: [id])
  teamId    String
  player    User           @relation(fields: [playerId], references: [id])
  playerId  String
  metadata  Json?
}

model Playground {
  id             String               @id @default(cuid())
  name           String
  address        String
  type           String
  coverImage     String?
  coverImageHint String?
  surface        String
  features       String[]
  rating         Float                @default(0)
  status         String               @default("PENDING_MODERATION") // APPROVED, PENDING_MODERATION, REJECTED
  checkIns       Int                  @default(0)
  creator        User                 @relation(fields: [creatorId], references: [id])
  creatorId      String
  residentTeams  Team[]
  matches        Match[]
  practices      TeamPractice[]
  reports        PlaygroundReport[]
  activities     Activity[]
}

model Sport {
  id          String      @id @default(cuid())
  name        String      @unique
  icon        String
  category    String // e.g., 'Командный', 'Киберспорт'
  tournaments Tournament[] @relation("SportTournaments")
  challenges  Challenge[]
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}

model Sponsor {
  id          String       @id @default(cuid())
  name        String       @unique
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  teams       Team[]       @relation("SponsoredTeams")
  tournaments Tournament[] @relation("SponsoredTournaments")
  promotions  Promotion[]
}

model Promotion {
  id           String    @id @default(cuid())
  name         String
  description  String
  prize        String
  cost         String
  imageDataUri String
  imageHint    String
  sponsor      Sponsor?  @relation(fields: [sponsorId], references: [id])
  sponsorId    String?
  organizer    User      @relation("OrganizedPromotions", fields: [organizerId], references: [id])
  organizerId  String
  endDate      DateTime
  createdAt    DateTime  @default(now())
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int             @default(0)
  status       ChallengeStatus @default(OPEN)
  result       String?
  creator      User            @relation("ChallengesCreated", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("ChallengesReceived", fields: [opponentId], references: [id])
  opponentId   String?
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model UserTrainingProgram {
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  program   TrainingProgram @relation(fields: [programId], references: [id])
  programId String
  assignedAt DateTime        @default(now())
  isActive  Boolean         @default(true)

  @@id([userId, programId])
}

model TrainingLog {
  id           String            @id @default(cuid())
  user         User              @relation(fields: [userId], references: [id])
  userId       String
  date         DateTime
  workoutName  String?
  status       TrainingLogStatus @default(PLANNED)
  exercises    LoggedExercise[]
  mood         Mood?
  notes        String?
  coachNotes   String?
}

model LoggedExercise {
  id                     String        @id @default(cuid())
  trainingLog            TrainingLog   @relation(fields: [trainingLogId], references: [id])
  trainingLogId          String
  exercise               Exercise      @relation(fields: [exerciseId], references: [id])
  exerciseId             String
  notes                  String?
  isSupersetWithPrevious Boolean?      @default(false)
  sets                   LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean        @default(false)
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Activity {
  id           String      @id @default(cuid())
  type         ActivityType
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  metadata     Json
  playground   Playground? @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  createdAt    DateTime    @default(now())
}

model CareerHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
}

model TrainingProgram {
  id              String                @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean               @default(false)
  weeklySplit     WorkoutDay[]
  assignedTo      UserTrainingProgram[]
  proposals       TrainingProposal[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?    @default(false)
  technique               String?
}

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  logged         LoggedExercise[]
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String
  createdAt  DateTime @default(now())
}

model Measurement {
  id      String    @id @default(cuid())
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

model TrainingProposal {
  id        String                 @id @default(cuid())
  from      User                   @relation("ProposalsSent", fields: [fromId], references: [id])
  fromId    String
  to        User                   @relation("ProposalsReceived", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  status    TrainingProposalStatus @default(PENDING)
  comment   String?
  program   TrainingProgram?       @relation(fields: [programId], references: [id])
  programId String?
  createdAt DateTime               @default(now())
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

model Poll {
  id        String      @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  votes     PollVote[]
  author    User?       @relation(fields: [authorId], references: [id])
  authorId  String?
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
}

model PollOption {
  id        String     @id @default(cuid())
  text      String
  poll      Poll       @relation(fields: [pollId], references: [id])
  pollId    String
  votes     PollVote[]
}

model PollVote {
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  poll       Poll       @relation(fields: [pollId], references: [id])
  pollId     String
  pollOption PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt  DateTime   @default(now())

  @@id([userId, pollId])
}

model Notification {
  id             String          @id @default(cuid())
  user           User            @relation(fields: [userId], references: [id])
  userId         String
  type           NotificationType
  message        String
  href           String?
  isRead         Boolean         @default(false)
  createdAt      DateTime        @default(now())
  matchId        String?
  match          Match?          @relation(fields: [matchId], references: [id])
  announcementId String?
  announcement   TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
}

model TournamentAnnouncement {
  id           String         @id @default(cuid())
  tournament   Tournament     @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User           @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime       @default(now())
  notifications Notification[]
}

model TournamentMedia {
  id          String     @id @default(cuid())
  type        MediaType
  src         String
  description String?
  hint        String?
  tournament  Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  createdAt   DateTime   @default(now())
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  participants User[]    @relation("ChatParticipants")
  messages     Message[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Sponsorship {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId String
  amount    Decimal
  signedAt  DateTime @default(now())
}

model SponsorshipOffer {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   User     @relation(fields: [sponsorId], references: [id])
  sponsorId String
  offerText String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
}

model League {
  id          String  @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  league    League   @relation(fields: [leagueId], references: [id])
  leagueId  String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  played    Int      @default(0)
  wins      Int      @default(0)
  draws     Int      @default(0)
  losses    Int      @default(0)
  points    Int      @default(0)
  @@id([leagueId, teamId])
}

model LfgLobby {
    id String @id @default(cuid())
    type LfgLobbyType
    sport String
    location String
    playgroundId String?
    startTime DateTime
    endTime DateTime
    playersNeeded Int
    comment String
    status LfgLobbyStatus @default(OPEN)
    
    creator User @relation("LobbyCreator", fields: [creatorId], references: [id])
    creatorId String
    
    players User[] @relation("LobbyPlayers")
}

model PlaygroundReport {
    id String @id @default(cuid())
    playground Playground @relation(fields: [playgroundId], references: [id])
    playgroundId String
    reporter User @relation("ReportsSent", fields: [reporterId], references: [id])
    reporterId String
    category String
    comment String
    severity String
    summary String
    status ReportStatus
    createdAt DateTime @default(now())
}

model Report {
    id String @id @default(cuid())
    reporter User @relation("ReportsSent", fields: [reporterId], references: [id])
    reporterId String
    reportedUser User @relation("ReportsReceived", fields: [reportedUserId], references: [id])
    reportedUserId String
    category String
    description String?
    status ReportStatus @default(PENDING)
    resolution String?
    resolver User? @relation("ReportsResolved", fields: [resolverId], references: [id])
    resolverId String?
    createdAt DateTime @default(now())
    resolvedAt DateTime?
}
