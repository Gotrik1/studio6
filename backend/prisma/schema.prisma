// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String              @id @default(cuid())
  name                  String
  email                 String              @unique
  passwordHash          String
  role                  String              @default("Игрок")
  status                String              @default("Активен")
  xp                    Int                 @default(0)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  mainSport             String?
  dateOfBirth           String?
  preferredSports       String[]
  telegram              String?
  discord               String?
  location              String?
  avatar                String?
  bannerImage           String?
  bannerImageHint       String?
  
  teamsAsCaptain        Team[]              @relation("CaptainToTeam")
  teamsAsMember         Team[]              @relation("MemberToTeam")
  createdTeams          Team[]              @relation("CreatorToTeam")
  organizedTournaments  Tournament[]
  coachProfile          CoachProfile?
  friends               User[]              @relation("Friendship")
  friendOf              User[]              @relation("Friendship")
  sentFriendRequests    FriendRequest[]     @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[]     @relation("ReceivedFriendRequests")
  notifications         Notification[]
  createdChallenges     Challenge[]         @relation("ChallengeCreator")
  acceptedChallenges    Challenge[]         @relation("ChallengeOpponent")
  createdPlaygrounds    Playground[]
  messages              Message[]
  createdLfgLobbies     LfgLobby[]
  joinedLfgLobbies      LfgLobby[]          @relation("LobbyPlayers")
  activities            Activity[]
  gallery               GalleryItem[]
  careerHistory         CareerHistoryItem[]
  organizedPromotions   Promotion[]
  ownedItems            UserInventoryItem[]
}

model Activity {
    id        String   @id @default(cuid())
    type      ActivityType
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    metadata  Json
    timestamp DateTime @default(now())

    @@index([userId])
}

enum ActivityType {
    MATCH_PLAYED
    TEAM_JOINED
    TOURNAMENT_REGISTERED
    ACHIEVEMENT_UNLOCKED
}


model Team {
  id                 String       @id @default(cuid())
  name               String       @unique
  slug               String       @unique
  motto              String?
  logo               String?
  dataAiHint         String?
  game               String
  rank               Int          @default(5)
  wins               Int          @default(0)
  losses             Int          @default(0)
  draws              Int          @default(0)
  homePlaygroundId   String?
  seekingSponsorship Boolean      @default(false)
  
  captainId          String
  captain            User         @relation("CaptainToTeam", fields: [captainId], references: [id])
  
  creatorId          String
  creator            User         @relation("CreatorToTeam", fields: [creatorId], references: [id])
  
  members            User[]       @relation("MemberToTeam")
  tournaments        Tournament[] @relation("TeamToTournament")
  matchesAsTeam1     Match[]      @relation("Team1ToMatch")
  matchesAsTeam2     Match[]      @relation("Team2ToMatch")
  sponsors           Sponsor[]    @relation("TeamSponsors")
}

model Tournament {
  id                     String    @id @default(cuid())
  name                   String
  slug                   String    @unique
  game                   String
  description            String?
  type                   String
  format                 String
  category               String
  location               String
  participantCount       Int
  registrationStartDate  DateTime
  registrationEndDate    DateTime
  tournamentStartDate    DateTime
  prizePool              String?
  rules                  String?
  status                 TournamentStatus @default(REGISTRATION)
  bannerImage            String?
  bannerImageHint        String?
  
  organizerId            String
  organizer              User      @relation(fields: [organizerId], references: [id])
  
  teams                  Team[]    @relation("TeamToTournament")
  matches                Match[]
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
}

model Match {
  id            String      @id @default(cuid())
  team1Score    Int?
  team2Score    Int?
  status        MatchStatus
  scheduledAt   DateTime
  finishedAt    DateTime?
  location      String?
  refereeName   String?
  
  team1Id       String
  team1         Team        @relation("Team1ToMatch", fields: [team1Id], references: [id])
  
  team2Id       String
  team2         Team        @relation("Team2ToMatch", fields: [team2Id], references: [id])
  
  tournamentId  String?
  tournament    Tournament? @relation(fields: [tournamentId], references: [id])

  @@index([team1Id])
  @@index([team2Id])
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model CoachProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  specialization  String
  description     String
  rating          Float
  price           Decimal
  tags            String[]
}

model Sponsor {
  id            String   @id @default(cuid())
  name          String
  logo          String?
  logoHint      String?
  description   String
  interests     String[]
  profileUrl    String
  teams         Team[]   @relation("TeamSponsors")
  promotions    Promotion[]
}

model Promotion {
  id            String    @id @default(cuid())
  name          String
  description   String
  prize         String
  cost          String
  imageDataUri  String
  imageHint     String
  endDate       DateTime
  
  organizerId   String
  organizer     User      @relation(fields: [organizerId], references: [id])

  sponsorId     String?
  sponsor       Sponsor?  @relation(fields: [sponsorId], references: [id])
}

model FriendRequest {
  id        String   @id @default(cuid())
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())

  fromId    String
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])

  toId      String
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])

  @@unique([fromId, toId])
  @@index([fromId])
  @@index([toId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String
  message   String
  isRead    Boolean  @default(false)
  href      String?
  createdAt DateTime @default(now())

  @@index([userId])
}

model Challenge {
  id          String   @id @default(cuid())
  title       String
  description String
  discipline  String
  wager       Int
  status      ChallengeStatus @default(OPEN)
  result      String?
  
  creatorId   String
  creator     User     @relation("ChallengeCreator", fields: [creatorId], references: [id])
  
  opponentId  String?
  opponent    User?    @relation("ChallengeOpponent", fields: [opponentId], references: [id])
  
  createdAt   DateTime @default(now())
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Playground {
  id              String   @id @default(cuid())
  name            String
  address         String
  type            String
  surface         String
  features        String[]
  rating          Float
  checkIns        Int
  status          String   @default("PENDING_MODERATION") // PENDING_MODERATION, APPROVED, REJECTED
  coverImage      String?
  coverImageHint  String?
  
  creatorId       String
  creator         User     @relation(fields: [creatorId], references: [id])
}

model Exercise {
    id              String @id @default(cuid())
    name            String @unique
    description     String
    category        String
    equipment       String
    image           String?
    imageHint       String?
    techniqueTips   String[]
    commonMistakes  String[]
    alternatives    String[]
}

model LfgLobby {
  id            String   @id @default(cuid())
  type          LobbyType
  sport         String
  location      String
  playgroundId  String?
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  playersJoined Int      @default(1)
  comment       String
  
  creatorId     String
  creator       User     @relation(fields: [creatorId], references: [id])

  players       User[]   @relation("LobbyPlayers")
}

enum LobbyType {
  GAME
  TRAINING
}

model FaqItem {
    id String @id @default(cuid())
    question String
    answer String
    category String
}

model GalleryItem {
    id String @id @default(cuid())
    src String
    alt String
    dataAiHint String
    userId String
    user User @relation(fields: [userId], references: [id])
}

model CareerHistoryItem {
    id String @id @default(cuid())
    teamName String
    period String
    role String
    review String
    createdAt DateTime @default(now())
    userId String
    user User @relation(fields: [userId], references: [id])
}

model Message {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  
  chatId    String
}

model StoreItem {
    id            String @id @default(cuid())
    name          String
    description   String
    price         Float
    image         String?
    imageHint     String?
    category      String
    isRealMoney   Boolean @default(false)
    users         UserInventoryItem[]
}

model UserInventoryItem {
    id          String @id @default(cuid())
    userId      String
    user        User @relation(fields: [userId], references: [id])

    itemId      String
    item        StoreItem @relation(fields: [itemId], references: [id])

    purchaseDate DateTime @default(now())

    @@unique([userId, itemId])
}
