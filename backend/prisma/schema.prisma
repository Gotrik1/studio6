// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================================================================
// Enums
// ==============================================================================

enum UserStatus {
  ACTIVE
  BANNED
  PENDING
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

enum TournamentType {
  TEAM
  INDIVIDUAL
}

enum TournamentFormat {
  SINGLE_ELIMINATION
  ROUND_ROBIN
  GROUPS
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
  CANCELLED
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  TEAM_INVITE
  TOURNAMENT_START
  ANNOUNCEMENT
  CHALLENGE_ACCEPTED
  OTHER
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}


// ==============================================================================
// Models
// ==============================================================================

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  name                    String
  passwordHash            String
  role                    String                   @default("Игрок")
  status                  String                   @default("Активен")
  avatar                  String?
  xp                      Int                      @default(0)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  isVerified              Boolean                  @default(false)
  preferredSports         String[]
  telegram                String?
  discord                 String?
  teamsAsCaptain          Team[]                   @relation("TeamCaptains")
  teamsAsCreator          Team[]                   @relation("TeamCreators")
  teamsAsMember           Team[]                   @relation("TeamMembers")
  organizedTournaments    Tournament[]             @relation("OrganizedTournaments")
  judgedMatches           Match[]                  @relation("JudgedMatches")
  matchEvents             MatchEvent[]
  createdPlaygrounds      Playground[]
  createdFriendRequests   FriendRequest[]          @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]          @relation("ReceivedFriendRequests")
  friends                 User[]                   @relation("Friends")
  friendOf                User[]                   @relation("Friends")
  reportsSent             Report[]                 @relation("ReportsSent")
  reportsReceived         Report[]                 @relation("ReportsReceived")
  reportsResolved         Report[]                 @relation("ReportsResolved")
  careerHistory           CareerHistory[]
  coachProfile            CoachProfile?
  coaching                User[]                   @relation("Coaches")
  coachedBy               User?                    @relation("Coaches", fields: [coachId], references: [id])
  coachId                 String?
  sponsorships            Sponsorship[]            @relation("UserSponsorships")
  sponsorshipOffers       SponsorshipOffer[]
  trainingProposalsSent   TrainingProposal[]       @relation("ProposalsSent")
  trainingProposalsRcvd   TrainingProposal[]       @relation("ProposalsReceived")
  pollsVoted              PollVote[]
  authoredPolls           Poll[]                   @relation("AuthoredPolls")
  authoredReviews         PlaygroundReview[]
  authoredReports         PlaygroundReport[]       @relation("AuthoredReports")
  notifications           Notification[]
  sentAnnouncements       TournamentAnnouncement[]
  trainingLogs            TrainingLog[]
  assignedTrainingProgram UserTrainingProgram[]
  activities              Activity[]
  inventory               InventoryItem[]
  foodLog                 FoodLogEntry[]
  measurements            Measurement[]
  judgedTournaments       Tournament[]             @relation("TournamentJudges")
  lfgLobbiesCreated       LfgLobby[]               @relation("LobbyCreator")
  lfgLobbiesJoined        LfgLobby[]               @relation("LobbyPlayers")

  @@map("users")
}

model Team {
  id                 String              @id @default(cuid())
  name               String              @unique
  slug               String              @unique
  game               String
  motto              String?
  description        String?
  logo               String?
  dataAiHint         String?
  wins               Int                 @default(0)
  losses             Int                 @default(0)
  draws              Int                 @default(0)
  rank               Int                 @default(1)
  seekingSponsorship Boolean             @default(false)
  pitch              String?
  creator            User                @relation("TeamCreators", fields: [creatorId], references: [id])
  creatorId          String
  captain            User                @relation("TeamCaptains", fields: [captainId], references: [id])
  captainId          String
  members            User[]              @relation("TeamMembers")
  matchesAsTeam1     Match[]             @relation("Team1Matches")
  matchesAsTeam2     Match[]             @relation("Team2Matches")
  tournaments        Tournament[]
  applications       TeamApplication[]
  sponsorships       Sponsorship[]       @relation("SponsoredTeams")
  sponsorshipOffers  SponsorshipOffer[]
  homePlayground     Playground?         @relation("HomeTeams", fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?
  chat               Chat?
  practices          TeamPractice[]
  leagueTeams        LeagueTeam[]
  matchEvents        MatchEvent[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  sponsors           Sponsor[]           @relation("SponsoredBy")

  @@map("teams")
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  game                    String
  description             String?
  status                  TournamentStatus         @default(REGISTRATION)
  type                    TournamentType           @default(TEAM)
  format                  TournamentFormat         @default(SINGLE_ELIMINATION)
  participantCount        Int
  prizePool               String?
  rules                   String?
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  category                String
  location                String
  bannerImage             String?
  bannerImageHint         String?
  organizer               User                     @relation("OrganizedTournaments", fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
  sponsors                Sponsor[]                @relation("SponsoredTournaments")
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  applications            TeamApplication[]
  judges                  User[]                   @relation("TournamentJudges")
  media                   TournamentMedia[]
  league                  League?                  @relation(fields: [leagueId], references: [id])
  leagueId                String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt

  @@map("tournaments")
}

model Match {
  id              String       @id @default(cuid())
  team1           Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus  @default(PLANNED)
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournament      Tournament?  @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  round           Int?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  referee         User?        @relation("JudgedMatches", fields: [refereeId], references: [id])
  refereeId       String?
  refereeName     String?
  playground      Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId    String?
  location        String?
  events          MatchEvent[]
  notifications   Notification[]
  league          League?      @relation(fields: [leagueId], references: [id])
  leagueId        String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@map("matches")
}

model MatchEvent {
  id        String         @id @default(cuid())
  type      MatchEventType
  timestamp DateTime
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  player    User?          @relation(fields: [playerId], references: [id])
  playerId  String?
  team      Team?          @relation(fields: [teamId], references: [id])
  teamId    String?
  metadata  Json?

  @@map("match_events")
}

model Playground {
  id             String                @id @default(cuid())
  name           String
  address        String
  type           String
  coverImage     String?
  coverImageHint String?
  surface        String
  features       String[]
  rating         Float                 @default(0)
  checkIns       Int                   @default(0)
  status         PlaygroundStatus      @default(PENDING_MODERATION)
  creator        User                  @relation(fields: [creatorId], references: [id])
  creatorId      String
  reviews        PlaygroundReview[]
  reports        PlaygroundReport[]
  matches        Match[]
  homeTeams      Team[]                @relation("HomeTeams")
  lfgLobbies     LfgLobby[]
  teamPractices  TeamPractice[]
  activities     Activity[]
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  @@map("playgrounds")
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
  REJECTED
}

model Sport {
  id          String      @id @unique
  name        String
  icon        String
  category    String
  challenges  Challenge[]

  @@map("sports")
}

model CareerHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())

  @@map("career_history")
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@map("friend_requests")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Report {
  id               String       @id @default(cuid())
  reporter         User         @relation("ReportsSent", fields: [reporterId], references: [id])
  reporterId       String
  reportedUser     User         @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  reportedUserId   String
  category         String
  description      String?
  status           ReportStatus @default(PENDING)
  resolver         User?        @relation("ReportsResolved", fields: [resolverId], references: [id])
  resolverId       String?
  resolution       String?
  createdAt        DateTime     @default(now())
  resolvedAt       DateTime?

  @@map("reports")
}

model PlaygroundReport {
  id           String           @id @default(cuid())
  playground   Playground       @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User             @relation("AuthoredReports", fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus     @default(PENDING)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@map("playground_reports")
}

model Sponsor {
  id          String       @id @unique
  name        String
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  promotions  Promotion[]
  teams       Team[]       @relation("SponsoredBy")
  tournaments Tournament[] @relation("SponsoredTournaments")

  @@map("sponsors")
}

model Promotion {
  id           String    @id @default(cuid())
  name         String
  description  String
  prize        String
  imageDataUri String
  imageHint    String
  cost         String
  endDate      DateTime
  organizer    User      @relation("OrganizedPromotions", fields: [organizerId], references: [id])
  organizerId  String
  sponsor      Sponsor?  @relation(fields: [sponsorId], references: [id])
  sponsorId    String?
  createdAt    DateTime  @default(now())

  @@map("promotions")
}

model Sponsorship {
  id        String   @id @default(cuid())
  team      Team     @relation("SponsoredTeams", fields: [teamId], references: [id])
  teamId    String
  user      User     @relation("UserSponsorships", fields: [userId], references: [id])
  userId    String
  amount    Decimal
  signedAt  DateTime
  endsAt    DateTime
  createdAt DateTime @default(now())

  @@map("sponsorships")
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  status       TeamApplicationStatus @default(PENDING)
  message      String?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  @@map("team_applications")
}

model Activity {
  id           String        @id @default(cuid())
  type         ActivityType
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  playground   Playground?   @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  metadata     Json
  createdAt    DateTime      @default(now())

  @@map("activities")
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  status       ChallengeStatus @default(OPEN)
  result       String?
  creator      User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  opponentId   String?
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@map("challenges")
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("coach_profiles")
}

model UserTrainingProgram {
    user      User            @relation(fields: [userId], references: [id])
    userId    String
    program   TrainingProgram @relation(fields: [programId], references: [id])
    programId String
    assignedAt DateTime @default(now())
    isActive Boolean @default(true)

    @@id([userId, programId])
    @@map("user_training_programs")
}

model TrainingProposal {
  id          String                 @id @default(cuid())
  from        User                   @relation("ProposalsSent", fields: [fromId], references: [id])
  fromId      String
  to          User                   @relation("ProposalsReceived", fields: [toId], references: [id])
  toId        String
  sport       String
  date        DateTime
  comment     String?
  status      TrainingProposalStatus @default(PENDING)
  program     TrainingProgram?       @relation(fields: [programId], references: [id])
  programId   String?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  @@map("training_proposals")
}

model LfgLobby {
  id           String         @id @default(cuid())
  type         LfgLobbyType
  sport        String
  location     String
  playground   Playground?    @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  startTime    DateTime
  endTime      DateTime
  status       LfgLobbyStatus @default(OPEN)
  playersNeeded Int
  comment      String
  creator      User           @relation("LobbyCreator", fields: [creatorId], references: [id])
  creatorId    String
  players      User[]         @relation("LobbyPlayers")
  createdAt    DateTime       @default(now())

  @@map("lfg_lobbies")
}

model TeamPractice {
  id           String     @id @default(cuid())
  title        String
  description  String?
  date         DateTime
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("team_practices")
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String         @unique
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]

  @@map("food_items")
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String
  createdAt  DateTime @default(now())

  @@map("food_log_entries")
}

model Measurement {
  id      String   @id @default(cuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?

  @@map("measurements")
}

model Poll {
  id        String      @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  votes     PollVote[]
  author    User?       @relation("AuthoredPolls", fields: [authorId], references: [id])
  authorId  String?
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("polls")
}

model PollOption {
  id     String     @id @default(cuid())
  text   String
  poll   Poll       @relation(fields: [pollId], references: [id])
  pollId String
  votes  PollVote[]

  @@map("poll_options")
}

model PollVote {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@id([userId, pollId])
  @@map("poll_votes")
}

model Notification {
  id             String          @id @default(cuid())
  user           User            @relation(fields: [userId], references: [id])
  userId         String
  type           NotificationType
  message        String
  href           String?
  isRead         Boolean         @default(false)
  match          Match?          @relation(fields: [matchId], references: [id])
  matchId        String?
  announcement   TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
  announcementId String?
  createdAt      DateTime        @default(now())

  @@map("notifications")
}

model TournamentAnnouncement {
  id           String         @id @default(cuid())
  tournament   Tournament     @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User           @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime       @default(now())
  notifications Notification[]

  @@map("tournament_announcements")
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String  @unique
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())

  @@map("inventory_items")
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

model TrainingProgram {
  id            String                @id @unique
  name          String
  description   String
  goal          String // e.g., "mass gain", "fat loss"
  daysPerWeek   Int
  splitType     String // e.g., "full-body", "split"
  author        String // Could be a userId or "ProDvor AI"
  coverImage    String
  coverImageHint String
  isAiGenerated Boolean               @default(false)
  weeklySplit   WorkoutDay[]
  assignedTo    UserTrainingProgram[]
  proposals     TrainingProposal[]
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  day               Int // 1 for Monday, etc.
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model TrainingLog {
  id         String           @id @default(cuid())
  user       User             @relation(fields: [userId], references: [id])
  userId     String
  date       DateTime
  workoutName String?
  status     TrainingLogStatus
  exercises  LoggedExercise[]
  mood       Mood?
  notes      String?
  coachNotes String?
  createdAt  DateTime         @default(now())
}

model LoggedExercise {
  id                     String      @id @default(cuid())
  trainingLog            TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId          String
  exercise               Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId             String
  notes                  String?
  isSupersetWithPrevious Boolean?
  sets                   LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean        @default(false)
}

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  logEntries     LoggedExercise[]
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
  tournaments Tournament[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model LeagueTeam {
  league    League   @relation(fields: [leagueId], references: [id])
  leagueId  String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  played    Int
  wins      Int
  draws     Int
  losses    Int
  points    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([leagueId, teamId])
}

model MedicalPartner {
  id            String       @id @default(cuid())
  name          String
  specialization String
  contact       String
  avatar        String?
  avatarHint    String?
  tournaments   Tournament[]
}

model SponsorshipOffer {
  id          String                @id @default(cuid())
  team        Team                  @relation(fields: [teamId], references: [id])
  teamId      String
  user        User                  @relation(fields: [userId], references: [id])
  userId      String
  offerText   String
  status      TeamApplicationStatus @default(PENDING) // Reusing status
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
}

model TournamentMedia {
  id          String     @id @default(cuid())
  tournament  Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type        MediaType
  src         String
  description String?
  hint        String?
  createdAt   DateTime   @default(now())
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("playground_reviews")
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]    @relation("ChatParticipants")
  messages     Message[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum ChatType {
  PRIVATE
  GROUP
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation("AuthoredMessages", fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}
