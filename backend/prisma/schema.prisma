
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---

enum UserRole {
  ADMIN       @map("Администратор")
  MODERATOR   @map("Модератор")
  CAPTAIN     @map("Капитан")
  PLAYER      @map("Игрок")
  JUDGE       @map("Судья")
  MANAGER     @map("Менеджер")
  ORGANIZER   @map("Организатор")
  SPONSOR     @map("Спонсор")
  FAN         @map("Болельщик")
  COACH       @map("Тренер")
}

enum UserStatus {
  ACTIVE @map("Активен")
  BANNED @map("Забанен")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TournamentType {
  TEAM       @map("team")
  INDIVIDUAL @map("individual")
}

enum TournamentFormat {
  SINGLE_ELIMINATION @map("single_elimination")
  ROUND_ROBIN        @map("round_robin")
  GROUPS             @map("groups")
}

enum TournamentStatus {
  REGISTRATION @map("Регистрация")
  ONGOING      @map("Идет")
  FINISHED     @map("Завершен")
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  SHOT
  SHOT_ON_TARGET
  CORNER
  FOUL
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ChatType {
  DIRECT
  GROUP
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  TEAM_INVITE
  OTHER
}

enum TrainingGoal {
  MASS_GAIN       @map("Набор массы")
  WEIGHT_LOSS     @map("Снижение веса")
  DEFINITION      @map("Рельеф")
  STRENGTH        @map("Сила")
}

enum TrainingSplitType {
  FULL_BODY @map("Full-body")
  SPLIT     @map("Split")
  UPPER_LOWER @map("Upper/Lower")
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}


// --- MODELS ---

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    UserRole                 @default(PLAYER)
  status                  UserStatus               @default(ACTIVE)
  xp                      Int                      @default(0)
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  isVerified              Boolean                  @default(false)
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt

  // Relations
  teamsAsMember           Team[]                   @relation("TeamMembers")
  teamsAsCaptain          Team[]                   @relation("TeamCaptain")
  teamsAsCreator          Team[]                   @relation("TeamCreator")
  organizedTournaments    Tournament[]
  friends                 User[]                   @relation("Friends")
  friendOf                User[]                   @relation("Friends")
  sentFriendRequests      FriendRequest[]          @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]          @relation("ReceivedFriendRequests")
  reportsSent             Report[]                 @relation("ReportsSent")
  reportsReceived         Report[]                 @relation("ReportsReceived")
  reportsResolved         Report[]                 @relation("ReportsResolved")
  careerHistory           CareerHistory[]
  coachProfile            CoachProfile?
  coaching                User[]                   @relation("CoachedBy")
  coachedBy               User?                    @relation("CoachedBy", fields: [coachId], references: [id])
  coachId                 String?
  judgedMatches           Match[]                  @relation("JudgedMatches")
  refereedMatches         Match[]                  @relation("RefereeMatches")
  sponsorships            Sponsorship[]
  sponsorshipOffers       SponsorshipOffer[]
  measurements            Measurement[]
  trainingProposalsSent   TrainingProposal[]       @relation("ProposalsSent")
  trainingProposalsRcvd   TrainingProposal[]       @relation("ProposalsReceived")
  pollsVoted              PollVote[]
  createdPlaygrounds      Playground[]
  playgroundReviews       PlaygroundReview[]
  playgroundReports       PlaygroundReport[]       @relation("PlaygroundReportsSent")
  achievements            UserAchievement[]
  trainingLogs            TrainingLog[]
  notifications           Notification[]
  sentAnnouncements       TournamentAnnouncement[]
  inventory               InventoryItem[]
  foodLog                 FoodLogEntry[]
  activities              Activity[]
  joinedLobbies           LfgLobby[]               @relation("JoinedLobbies")
  createdLobbies          LfgLobby[]               @relation("CreatedLobbies")
  teamApplications        TeamApplication[]
  pollCreations           Poll[]
  matchEvents             MatchEvent[]
}

model Team {
  id                 String              @id @default(cuid())
  name               String
  motto              String?
  description        String?
  logo               String?
  dataAiHint         String?
  game               String
  rank               Int                 @default(1)
  wins               Int                 @default(0)
  losses             Int                 @default(0)
  draws              Int                 @default(0)
  seekingSponsorship Boolean             @default(false)
  pitch              String?
  slug               String              @unique
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  // Relations
  captainId          String
  captain            User                @relation("TeamCaptain", fields: [captainId], references: [id])
  creatorId          String
  creator            User                @relation("TeamCreator", fields: [creatorId], references: [id])
  members            User[]              @relation("TeamMembers")
  tournaments        Tournament[]
  chat               Chat?
  practices          TeamPractice[]
  matchesAsTeam1     Match[]             @relation("Team1Matches")
  matchesAsTeam2     Match[]             @relation("Team2Matches")
  leagueTeams        LeagueTeam[]
  homePlayground     Playground?         @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?
  matchEvents        MatchEvent[]
  sponsorships       Sponsorship[]
  sponsorshipOffers  SponsorshipOffer[]
  applications       TeamApplication[]
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  game                    String
  description             String?
  rules                   String?
  type                    TournamentType
  format                  TournamentFormat
  status                  TournamentStatus         @default(REGISTRATION)
  participantCount        Int
  prizePool               String?
  location                String
  category                String
  bannerImage             String?
  bannerImageHint         String?
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt

  // Relations
  teams                   Team[]
  matches                 Match[]
  judges                  User[]                   @relation("JudgedTournaments")
  sponsors                Sponsor[]                @relation("SponsoredTournaments")
  medicalPartners         MedicalPartner[]
  organizer               User                     @relation(fields: [organizerId], references: [id])
  organizerId             String
  announcements           TournamentAnnouncement[]
  teamApplications        TeamApplication[]
  league                  League?
  leagueId                String?
  media                   TournamentMedia[]
}

model Match {
  id                String       @id @default(cuid())
  team1Id           String
  team2Id           String
  team1             Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team2             Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team1Score        Int?
  team2Score        Int?
  status            MatchStatus  @default(PLANNED)
  scheduledAt       DateTime
  finishedAt        DateTime?
  round             Int?
  location          String?
  disputeReason     String?
  disputeOpenedAt   DateTime?
  resolution        String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  tournamentId    String?
  tournament      Tournament?  @relation(fields: [tournamentId], references: [id])
  leagueId        String?
  league          League?      @relation(fields: [leagueId], references: [id])
  referee         User?        @relation("RefereeMatches", fields: [refereeId], references: [id])
  refereeId       String?
  refereeName     String?
  playgroundId    String?
  playground      Playground?  @relation(fields: [playgroundId], references: [id])
  events          MatchEvent[]
  notifications   Notification[]
  judges          User[]       @relation("JudgedMatches")
}

model TournamentMedia {
    id String @id @default(cuid())
    tournament Tournament @relation(fields: [tournamentId], references: [id])
    tournamentId String
    type MediaType
    src String
    description String?
    hint String?
    createdAt DateTime @default(now())
}

model MatchEvent {
  id        String         @id @default(cuid())
  matchId   String
  match     Match          @relation(fields: [matchId], references: [id])
  teamId    String
  team      Team           @relation(fields: [teamId], references: [id])
  player    User           @relation(fields: [playerId], references: [id])
  playerId  String
  type      MatchEventType
  timestamp DateTime
}

model Playground {
  id             String             @id @default(cuid())
  name           String
  address        String
  type           String
  coverImage     String?
  coverImageHint String?
  surface        String
  features       String[]
  rating         Float
  checkIns       Int                @default(0)
  status         PlaygroundStatus   @default(PENDING_MODERATION)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  // Relations
  creatorId      String
  creator        User               @relation(fields: [creatorId], references: [id])
  reviews        PlaygroundReview[]
  reports        PlaygroundReport[]
  matches        Match[]
  practices      TeamPractice[]
  lobbies        LfgLobby[]
  residentTeams  Team[]
  activities     Activity[]
}

model MedicalPartner {
    id String @id @default(cuid())
    name String
    specialization String
    contact String
    avatar String?
    avatarHint String?
    tournaments Tournament[]
}

model Sponsor {
  id              String             @id @default(cuid())
  name            String             @unique
  logo            String?
  logoHint        String?
  description     String
  profileUrl      String
  interests       String[]
  // Relations
  tournaments     Tournament[] @relation("SponsoredTournaments")
  teams           Team[]       @relation("SponsoredTeams")
  promotions      Promotion[]
  sponsorships    Sponsorship[]
  sponsorshipOffers SponsorshipOffer[]
}

model Promotion {
    id String @id @default(cuid())
    name String
    description String
    prize String
    cost String
    imageDataUri String
    imageHint String
    endDate DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    organizer User @relation(fields: [organizerId], references: [id])
    organizerId String
    sponsor Sponsor? @relation(fields: [sponsorId], references: [id])
    sponsorId String?
}

model Sponsorship {
    id String @id @default(cuid())
    team Team @relation(fields: [teamId], references: [id])
    teamId String
    sponsor Sponsor @relation(fields: [sponsorId], references: [id])
    sponsorId String
    amount Float
    signedAt DateTime @default(now())
}

model SponsorshipOffer {
    id String @id @default(cuid())
    team Team @relation(fields: [teamId], references: [id])
    teamId String
    sponsor Sponsor @relation(fields: [sponsorId], references: [id])
    sponsorId String
    offerText String
    status String @default("PENDING") // PENDING, ACCEPTED, DECLINED
    createdAt DateTime @default(now())
    user User @relation(fields: [userId], references: [id])
    userId String
}

model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("ReportsSent", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  reportedUserId String
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  createdAt      DateTime     @default(now())
  resolvedAt     DateTime?
  resolver       User?        @relation("ReportsResolved", fields: [resolverId], references: [id])
  resolverId     String?
  resolution     String?
}

model TeamApplication {
  id           String                  @id @default(cuid())
  team         Team                    @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                    @relation(fields: [userId], references: [id])
  userId       String
  message      String?
  status       TeamApplicationStatus   @default(PENDING)
  tournament   Tournament?             @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  createdAt    DateTime                @default(now())
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  status       ChallengeStatus @default(OPEN)
  result       String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relations
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  creator      User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  opponentId   String?
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playgroundId String
  playground   Playground @relation(fields: [playgroundId], references: [id])
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String           @id @default(cuid())
  playgroundId String
  playground   Playground       @relation(fields: [playgroundId], references: [id])
  reporter     User             @relation("PlaygroundReportsSent", fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus     @default(PENDING)
  createdAt    DateTime         @default(now())
}

model LfgLobby {
  id             String         @id @default(cuid())
  type           LfgLobbyType
  sport          String
  location       String
  startTime      DateTime
  endTime        DateTime
  playersNeeded  Int
  comment        String
  status         LfgLobbyStatus @default(OPEN)
  createdAt      DateTime       @default(now())

  // Relations
  creator      User         @relation("CreatedLobbies", fields: [creatorId], references: [id])
  creatorId    String
  players      User[]       @relation("JoinedLobbies")
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId String?
}

model Sport {
    id          String      @id @unique
    name        String
    icon        String
    category    String
    challenges  Challenge[]
}

model TrainingProgram {
    id                 String                @id @default(cuid())
    name               String
    description        String
    goal               TrainingGoal
    daysPerWeek        Int
    splitType          TrainingSplitType
    author             String
    coverImage         String
    coverImageHint     String
    isAiGenerated      Boolean               @default(false)
    createdAt          DateTime              @default(now())
    updatedAt          DateTime              @updatedAt
    
    // Relations
    weeklySplit        WorkoutDay[]
    assignedTo         UserTrainingProgram[]
    proposals          TrainingProposal[]
}

model WorkoutDay {
    id                String            @id @default(cuid())
    day               Int
    title             String

    // Relations
    program           TrainingProgram   @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
    trainingProgramId String
    exercises         WorkoutExercise[]
}

model WorkoutExercise {
    id                     String   @id @default(cuid())
    name                   String
    sets                   String
    reps                   String
    plannedWeight          String?
    isSupersetWithPrevious Boolean?
    technique              String?

    // Relations
    day            WorkoutDay @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
    workoutDayId   String
}

model UserTrainingProgram {
    user      User            @relation(fields: [userId], references: [id])
    userId    String
    program   TrainingProgram @relation(fields: [programId], references: [id])
    programId String
    assignedAt DateTime        @default(now())
    isActive  Boolean         @default(true)

    @@id([userId, programId])
}

model TrainingLog {
    id         String            @id @default(cuid())
    date       DateTime
    workoutName String?
    status     TrainingLogStatus @default(PLANNED)
    mood       Mood?
    notes      String?
    coachNotes String?

    // Relations
    user      User             @relation(fields: [userId], references: [id])
    userId    String
    exercises LoggedExercise[]
}

model LoggedExercise {
    id                     String      @id @default(cuid())
    trainingLogId          String
    trainingLog            TrainingLog @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
    exerciseId             String
    exercise               Exercise    @relation(fields: [exerciseId], references: [id])
    notes                  String?
    isSupersetWithPrevious Boolean?

    // Relations
    sets LoggedSet[]
}

model LoggedSet {
    id               String         @id @default(cuid())
    plannedReps      String?
    plannedWeight    String?
    loggedReps       Int?
    loggedWeight     Float?
    rpe              Int? // Rate of Perceived Exertion
    isCompleted      Boolean        @default(false)

    // Relations
    loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
    loggedExerciseId String
}

model Exercise {
    id              String           @id @default(cuid())
    name            String           @unique
    description     String
    category        String
    equipment       String
    image           String?
    imageHint       String?
    videoUrl        String?
    techniqueTips   Json             @default("[]")
    commonMistakes  Json             @default("[]")
    alternatives    Json             @default("[]")

    // Relations
    loggedExercises LoggedExercise[]
}

model TeamPractice {
    id           String   @id @default(cuid())
    title        String
    description  String?
    date         DateTime
    createdAt    DateTime @default(now())

    // Relations
    team         Team       @relation(fields: [teamId], references: [id])
    teamId       String
    playground   Playground @relation(fields: [playgroundId], references: [id])
    playgroundId String
}

model CareerHistory {
    id        String   @id @default(cuid())
    teamName  String
    period    String
    role      String
    review    String
    createdAt DateTime @default(now())

    // Relations
    user   User   @relation(fields: [userId], references: [id])
    userId String
}

model CoachProfile {
    id             String  @id @default(cuid())
    specialization String
    description    String
    tags           String[]
    experience     String
    rating         Float
    price          Decimal

    // Relations
    user   User   @relation(fields: [userId], references: [id])
    userId String @unique
}

model UserAchievement {
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@id([userId, achievementId])
}

model Achievement {
  id          String            @id @default(cuid())
  name        String            @unique
  description String
  icon        String
  users       UserAchievement[]
}

model StoreItem {
    id          String  @id @default(cuid())
    name        String
    description String
    price       Float
    image       String?
    imageHint   String?
    category    String
    isRealMoney Boolean @default(false)
}

model InventoryItem {
    id             String   @id @default(cuid())
    name           String
    category       String
    type           String
    purchaseDate   DateTime
    lifespanMonths Int // Estimated lifespan
    createdAt      DateTime @default(now())

    // Relations
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    image     String?
    imageHint String?
}

model FaqItem {
    id        String   @id @default(cuid())
    category  String
    question  String
    answer    String
    createdAt DateTime @default(now())
}

model FoodItem {
    id          String         @id @default(cuid())
    name        String
    category    String
    image       String?
    imageHint   String?
    calories    Float
    protein     Float
    fat         Float
    carbs       Float
    description String?

    // Relations
    logEntries FoodLogEntry[]
}

model FoodLogEntry {
    id         String   @id @default(cuid())
    grams      Int
    meal       String
    createdAt  DateTime @default(now())

    // Relations
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
    foodItemId String
}

model Measurement {
    id      String   @id @default(cuid())
    date    DateTime
    weight  Float
    bodyFat Float?
    chest   Float?
    waist   Float?
    hips    Float?
    biceps  Float?
    thigh   Float?

    // Relations
    user   User   @relation(fields: [userId], references: [id])
    userId String
}

model TrainingProposal {
  id        String                 @id @default(cuid())
  from      User                   @relation("ProposalsSent", fields: [fromId], references: [id])
  fromId    String
  to        User                   @relation("ProposalsReceived", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  status    TrainingProposalStatus @default(PENDING)
  comment   String?
  program   TrainingProgram?       @relation(fields: [programId], references: [id])
  programId String?
  createdAt DateTime               @default(now())
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  
  // Relations
  options   PollOption[]
  votes     PollVote[]
  author    User?        @relation(fields: [authorId], references: [id])
  authorId  String?
}

model PollOption {
  id     String     @id @default(cuid())
  text   String
  poll   Poll       @relation(fields: [pollId], references: [id])
  pollId String
  
  // Relations
  votes  PollVote[]
}

model PollVote {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())
  
  @@id([userId, pollId])
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  createdAt    DateTime  @default(now())

  // Relations
  participants User[]    @relation("ChatParticipants")
  messages     Message[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  // Relations
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Notification {
  id             String                  @id @default(cuid())
  type           NotificationType
  message        String
  isRead         Boolean                 @default(false)
  href           String?
  createdAt      DateTime                @default(now())

  // Relations
  userId         String
  user           User                    @relation(fields: [userId], references: [id])
  matchId        String?
  match          Match?                  @relation(fields: [matchId], references: [id])
  announcementId String?
  announcement   TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
}

model TournamentAnnouncement {
    id            String         @id @default(cuid())
    subject       String
    message       String
    sentTo        Int
    createdAt     DateTime       @default(now())
    
    // Relations
    tournament    Tournament     @relation(fields: [tournamentId], references: [id])
    tournamentId  String
    sender        User           @relation(fields: [senderId], references: [id])
    senderId      String
    notifications Notification[]
}


model Activity {
    id           String       @id @default(cuid())
    type         ActivityType
    user         User         @relation(fields: [userId], references: [id])
    userId       String
    createdAt    DateTime     @default(now())
    metadata     Json
    playground   Playground?  @relation(fields: [playgroundId], references: [id])
    playgroundId String?
}


model League {
    id          String       @id @default(cuid())
    name        String
    description String
    game        String
    image       String?
    imageHint   String?
    
    // Relations
    teams       LeagueTeam[]
    matches     Match[]
    tournaments Tournament[]
}

model LeagueTeam {
    leagueId String
    league   League @relation(fields: [leagueId], references: [id])
    teamId   String
    team     Team   @relation(fields: [teamId], references: [id])
    
    played   Int
    wins     Int
    draws    Int
    losses   Int
    points   Int
    
    @@id([leagueId, teamId])
}
