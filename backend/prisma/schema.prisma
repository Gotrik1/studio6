// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String                      @id @default(cuid())
  name                        String
  email                       String                      @unique
  passwordHash                String
  avatar                      String?
  role                        Role                        @default(PLAYER)
  status                      UserStatus                  @default(ACTIVE)
  xp                          Int                         @default(0)
  location                    String?
  mainSport                   String?
  isVerified                  Boolean                     @default(false)
  dateOfBirth                 DateTime?
  preferredSports             String[]
  telegram                    String?
  discord                     String?
  createdAt                   DateTime                    @default(now())
  updatedAt                   DateTime                    @updatedAt
  teamsAsMember               Team[]                      @relation("TeamMembers")
  teamsAsCaptain              Team[]                      @relation("TeamCaptain")
  organizedTournaments        Tournament[]                @relation("TournamentOrganizer")
  judgedMatches               Match[]                     @relation("MatchJudges")
  createdPlaygrounds          Playground[]                @relation("CreatedBy")
  reviews                     PlaygroundReview[]
  reportsMade                 Report[]                    @relation("Reported")
  reportsReceived             Report[]                    @relation("ReportedUser")
  reportsResolved             Report[]                    @relation("ResolvedBy")
  teamApplications            TeamApplication[]
  coachProfile                CoachProfile?
  coaching                    User[]                      @relation("CoachToPlayer")
  coach                       User?                       @relation("CoachToPlayer", fields: [coachId], references: [id])
  coachId                     String?
  friends                     User[]                      @relation("Friends")
  friendOf                    User[]                      @relation("Friends")
  sentFriendRequests          FriendRequest[]             @relation("SentFriendRequests")
  receivedFriendRequests      FriendRequest[]             @relation("ReceivedFriendRequests")
  activities                  Activity[]
  trainingLogs                TrainingLog[]
  measurements                Measurement[]
  inventory                   InventoryItem[]
  organizedPromotions         Promotion[]                 @relation("PromotionOrganizer")
  trainingProposalsSent       TrainingProposal[]          @relation("ProposalsSent")
  trainingProposalsReceived   TrainingProposal[]          @relation("ProposalsReceived")
  pollVotes                   PollVote[]
  notifications               Notification[]
  judgedTournaments           Tournament[]                @relation("TournamentJudges")
  resolvedPlaygroundReports   PlaygroundReport[]          @relation("ResolvedPlaygroundReportsBy")
  createdPlaygroundReports    PlaygroundReport[]          @relation("ReportedBy")
  tournamentAnnouncementsSent TournamentAnnouncement[]
  lfgLobbiesCreated           LfgLobby[]                  @relation("LfgCreator")
  lfgLobbiesJoined            LfgLobby[]                  @relation("LfgPlayers")
  teamPractices               TeamPractice[]
  foodLogEntries              FoodLogEntry[]
}

model Team {
  id                 String              @id @default(cuid())
  name               String
  slug               String              @unique
  game               String
  motto              String?
  logo               String?
  dataAiHint         String?
  rank               Int                 @default(1)
  wins               Int                 @default(0)
  losses             Int                 @default(0)
  draws              Int                 @default(0)
  seekingSponsorship Boolean             @default(false)
  description        String?
  goals              String?
  homePlaygroundId   String?
  creator            User                @relation(fields: [creatorId], references: [id])
  creatorId          String
  captain            User                @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId          String
  members            User[]              @relation("TeamMembers")
  tournaments        Tournament[]        @relation("TournamentParticipants")
  team1Matches       Match[]             @relation("Team1Matches")
  team2Matches       Match[]             @relation("Team2Matches")
  sponsors           Sponsor[]
  applications       TeamApplication[]
  chat               Chat?
  practices          TeamPractice[]
  careerHistoryItems CareerHistoryItem[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model Match {
  id              String         @id @default(cuid())
  team1           Team           @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team           @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  tournament      Tournament?    @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  events          MatchEvent[]
  scheduledAt     DateTime?
  startedAt       DateTime?
  finishedAt      DateTime?
  location        String?
  refereeName     String? // For simplicity, not a full relation
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  judges          User[]         @relation("MatchJudges")
  league          League?        @relation(fields: [leagueId], references: [id])
  leagueId        String?
  playground      Playground?    @relation(fields: [playgroundId], references: [id])
  playgroundId    String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  description           String?
  status                TournamentStatus
  game                  String
  type                  TournamentType
  format                TournamentFormat
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  organizer             User                     @relation("TournamentOrganizer", fields: [organizerId], references: [id])
  organizerId           String
  teams                 Team[]                   @relation("TournamentParticipants")
  matches               Match[]
  announcements         TournamentAnnouncement[]
  sponsors              Sponsor[]
  judges                User[]                   @relation("TournamentJudges")
  medicalPartners       MedicalPartner[]
  media                 TournamentMedia[]
  applications          TeamApplication[]
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
}

model Playground {
  id             String             @id @default(cuid())
  name           String
  address        String
  type           String
  coverImage     String?
  coverImageHint String?
  surface        String
  features       String[]
  rating         Float              @default(0)
  checkIns       Int                @default(0)
  status         PlaygroundStatus   @default(PENDING_MODERATION)
  creator        User               @relation("CreatedBy", fields: [creatorId], references: [id])
  creatorId      String
  reviews        PlaygroundReview[]
  reports        PlaygroundReport[]
  activities     Activity[]
  matches        Match[]
  practices      TeamPractice[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model LfgLobby {
  id           String       @id @default(cuid())
  creator      User         @relation("LfgCreator", fields: [creatorId], references: [id])
  creatorId    String
  type         LfgLobbyType
  sport        String
  location     String
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  comment      String
  status       LfgLobbyStatus @default(OPEN)
  playgroundId String?
  players      User[]       @relation("LfgPlayers")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String         @id @default(cuid())
  playground   Playground     @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User           @relation("ReportedBy", fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     ReportSeverity
  summary      String
  status       ReportStatus   @default(PENDING)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  resolver     User?          @relation("ResolvedPlaygroundReportsBy", fields: [resolverId], references: [id])
  resolverId   String?
  resolution   String?
  resolvedAt   DateTime?
}

model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("Reported", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportedUser", fields: [reportedUserId], references: [id])
  reportedUserId String
  reason         String
  context        String
  status         ReportStatus @default(PENDING)
  resolver       User?        @relation("ResolvedBy", fields: [resolverId], references: [id])
  resolverId     String?
  resolution     String?
  resolvedAt     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  wager        Int
  status       ChallengeStatus
  creator      User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  opponentId   String?
  result       String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

model MatchEvent {
  id      String @id @default(cuid())
  match   Match  @relation(fields: [matchId], references: [id])
  matchId String
  time    String // e.g. "45+2'"
  event   String // e.g. "Гол", "Желтая карточка"
  player  String // Player name
  team    String // Team name
}

model Sport {
  id          String      @id
  name        String
  icon        String
  category    String
  challenges  Challenge[]
  proposals   TrainingProposal[]
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StoreItem {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean   @default(false)
}

model Sponsor {
  id          String       @id @default(cuid())
  name        String
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  teams       Team[]
  tournaments Tournament[]
  promotions  Promotion[]
}

model Promotion {
  id          String   @id @default(cuid())
  name        String
  description String
  prize       String
  sponsor     Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId   String?
  organizer   User     @relation("PromotionOrganizer", fields: [organizerId], references: [id])
  organizerId String
  imageDataUri String
  imageHint   String
  endDate     DateTime
  cost        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int    @default(0)
  wins     Int    @default(0)
  draws    Int    @default(0)
  losses   Int    @default(0)
  points   Int    @default(0)
}

model GalleryImage {
  id         String   @id @default(cuid())
  src        String
  alt        String
  dataAiHint String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())
}

model CareerHistoryItem {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fromId, toId])
}

model Chat {
  id         String    @id @default(cuid())
  name       String?
  type       ChatType  @default(PRIVATE)
  messages   Message[]
  teamId     String?   @unique
  team       Team?     @relation(fields: [teamId], references: [id])
  participants User[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  text      String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}

model Activity {
  id           String       @id @default(cuid())
  type         ActivityType
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  metadata     Json
  timestamp    DateTime     @default(now())
}

model TrainingProgram {
  id              String           @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean          @default(false)
  weeklySplit     WorkoutDay[]
  proposals       TrainingProposal[]
}

model WorkoutDay {
  id                String             @id @default(cuid())
  day               Int
  title             String
  trainingProgram   TrainingProgram    @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
}

model Exercise {
  id              String             @id @default(cuid())
  name            String
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json
  commonMistakes  Json
  alternatives    Json
  loggedExercises LoggedExercise[]
}

model TrainingLog {
  id              String           @id @default(cuid())
  user            User             @relation(fields: [userId], references: [id])
  userId          String
  date            DateTime
  workoutName     String
  status          String           @default("planned") // planned, completed, skipped
  mood            String?          // great, good, ok, bad
  notes           String?
  coachNotes      String?
  exercises       LoggedExercise[]
}

model LoggedExercise {
  id            String      @id @default(cuid())
  trainingLog   TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId String
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  notes         String?
  sets          LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int? // Rate of Perceived Exertion (1-10)
  isCompleted      Boolean        @default(false)
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  rating         Float
  price          Float
  tags           String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  attendees    User[]
}

model Measurement {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  weight    Float
  bodyFat   Float?
  chest     Float?
  waist     Float?
  hips      Float?
  biceps    Float?
  thigh     Float?
}

model TrainingProposal {
  id        String          @id @default(cuid())
  from      User            @relation("ProposalsSent", fields: [fromId], references: [id])
  fromId    String
  to        User            @relation("ProposalsReceived", fields: [toId], references: [id])
  toId      String
  sport     Sport           @relation(fields: [sportId], references: [id])
  sportId   String
  date      DateTime
  comment   String?
  status    String          @default("PENDING") // PENDING, ACCEPTED, DECLINED
  program   TrainingProgram? @relation(fields: [programId], references: [id])
  programId String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  isActive  Boolean      @default(true)
  options   PollOption[]
  votes     PollVote[]
  createdAt DateTime     @default(now())
}

model PollOption {
  id      String     @id @default(cuid())
  text    String
  poll    Poll       @relation(fields: [pollId], references: [id])
  pollId  String
  votes   PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@unique([userId, pollId])
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model Notification {
  id      String   @id @default(cuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  message String
  type    String // FRIEND_REQUEST, MATCH_RESULT, ANNOUNCEMENT etc.
  href    String?
  isRead  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}

model TournamentMedia {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type         String // IMAGE, VIDEO, AUDIO
  src          String
  description  String?
  hint         String?
  createdAt    DateTime   @default(now())
}

model FoodItem {
  id             String          @id @default(cuid())
  name           String
  category       String // "Продукты", "Спортивное питание"
  image          String?
  imageHint      String?
  calories       Int // per 100g
  protein        Float // per 100g
  fat            Float // per 100g
  carbs          Float // per 100g
  description    String?
  foodLogEntries FoodLogEntry[]
}

model FoodLogEntry {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  foodItem    FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId  String
  grams       Int
  meal        String // "Завтрак", "Обед", "Ужин", "Перекус"
  createdAt   DateTime @default(now())
}

enum Role {
  PLAYER
  CAPTAIN
  COACH
  JUDGE
  MANAGER
  ORGANIZER
  MODERATOR
  ADMIN
  SPONSOR
  FAN
}

enum UserStatus {
  ACTIVE
  BANNED
  PENDING
}

enum ChatType {
  PRIVATE
  GROUP
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

enum TournamentType {
  team
  individual
}

enum TournamentFormat {
  single_elimination
  round_robin
  groups
}

enum PlaygroundStatus {
  PENDING_MODERATION
  APPROVED
  REJECTED
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum ReportSeverity {
  low
  medium
  high
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}
