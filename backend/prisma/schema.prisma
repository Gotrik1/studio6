// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    String
  status                  String
  xp                      Int
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  teamsAsCaptain          Team[]                   @relation("Captain")
  teamsAsCreator          Team[]                   @relation("Creator")
  teamsAsMember           Team[]                   @relation("Members")
  organizedTournaments    Tournament[]
  organizedPromotions     Promotion[]
  activities              Activity[]
  gallery                 GalleryItem[]
  careerHistory           CareerHistoryItem[]
  coachProfile            CoachProfile?
  coaching                User[]                   @relation("Coaching")
  coach                   User?                    @relation("Coaching", fields: [coachId], references: [id])
  coachId                 String?
  judgedMatches           Match[]
  friends                 User[]                   @relation("Friendship")
  friendOf                User[]                   @relation("Friendship")
  sentFriendRequests      FriendRequest[]          @relation("SentRequests")
  receivedFriendRequests  FriendRequest[]          @relation("ReceivedRequests")
  notifications           Notification[]
  inventory               InventoryItem[]
  measurements            Measurement[]
  trainingLogs            TrainingLog[]
  foodLogEntries          FoodLogEntry[]
  sentTrainingProposals   TrainingProposal[]       @relation("FromUser")
  receivedTrainingProposals TrainingProposal[]       @relation("ToUser")
  pollVotes               PollVote[]
  authoredMessages        Message[]
  chats                   Chat[]
  sentAnnouncements       TournamentAnnouncement[]
}

model Team {
  id                  String   @id @default(cuid())
  name                String
  slug                String   @unique
  logo                String?
  dataAiHint          String?
  game                String
  motto               String?
  rank                Int      @default(999)
  wins                Int      @default(0)
  losses              Int      @default(0)
  draws               Int      @default(0)
  seekingSponsorship  Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  captain             User     @relation("Captain", fields: [captainId], references: [id])
  captainId           String
  creator             User     @relation("Creator", fields: [creatorId], references: [id])
  creatorId           String
  members             User[]   @relation("Members")
  tournaments         Tournament[]
  matchesAsTeam1      Match[]  @relation("Team1")
  matchesAsTeam2      Match[]  @relation("Team2")
  homePlaygroundId    String?
  sponsors            Sponsor[]
  chat                Chat?    @relation(fields: [chatId], references: [id])
  chatId              String?  @unique
}

model Tournament {
  id                    String    @id @default(cuid())
  name                  String
  slug                  String    @unique
  game                  String
  description           String?
  type                  String
  format                String
  prizePool             String?
  category              String
  location              String
  rules                 String?
  status                String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  bannerImage           String?
  bannerImageHint       String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  organizer             User      @relation(fields: [organizerId], references: [id])
  organizerId           String
  teams                 Team[]
  matches               Match[]
  announcements         TournamentAnnouncement[]
}

model Match {
  id              String      @id @default(cuid())
  team1           Team        @relation("Team1", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team        @relation("Team2", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournamentId    String?
  tournament      Tournament? @relation(fields: [tournamentId], references: [id])
  playgroundId    String?
  location        String?
  referee         User?       @relation(fields: [refereeId], references: [id])
  refereeId       String?
  refereeName     String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Activity {
  id        String   @id @default(cuid())
  type      ActivityType
  timestamp DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  metadata  Json
}

enum ActivityType {
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
}

model GalleryItem {
  id         String   @id @default(cuid())
  src        String
  alt        String
  dataAiHint String
  createdAt  DateTime @default(now())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
}

model CareerHistoryItem {
  id        String   @id @default(cuid())
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model CoachProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id])
  specialization String
  description    String
  tags           String[]
  rating         Float
  price          Decimal
}

model FriendRequest {
  id        String   @id @default(cuid())
  fromId    String
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  from      User     @relation("SentRequests", fields: [fromId], references: [id])
  to        User     @relation("ReceivedRequests", fields: [toId], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  message   String
  href      String?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  userId    String
  user      User             @relation(fields: [userId], references: [id])
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
}

model Challenge {
  id          String          @id @default(cuid())
  title       String
  description String
  discipline  String
  wager       Int
  status      ChallengeStatus
  result      String?
  createdAt   DateTime        @default(now())
  creator     User            @relation(fields: [creatorId], references: [id])
  creatorId   String
  opponent    User?           @relation(fields: [opponentId], references: [id])
  opponentId  String?
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Playground {
  id             String    @id @default(cuid())
  name           String
  address        String
  type           String
  coverImage     String?
  coverImageHint String?
  surface        String
  features       String[]
  rating         Float
  checkIns       Int
  status         PlaygroundStatus
  creatorId      String
  creator        User      @relation(fields: [creatorId], references: [id])
  createdAt      DateTime  @default(now())
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

model Sponsor {
  id          String   @id @default(cuid())
  name        String   @unique
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  teams       Team[]
  promotions  Promotion[]
}

model Promotion {
  id            String    @id @default(cuid())
  name          String
  description   String
  prize         String
  cost          String
  imageDataUri  String
  imageHint     String
  endDate       DateTime
  organizerId   String
  organizer     User      @relation(fields: [organizerId], references: [id])
  sponsorId     String?
  sponsor       Sponsor?  @relation(fields: [sponsorId], references: [id])
  createdAt     DateTime  @default(now())
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean
}

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  techniqueTips  String[]
  commonMistakes String[]
  alternatives   String[]
  loggedExercises LoggedExercise[]
}

model TrainingProgram {
  id              String           @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean
  weeklySplit     WorkoutDay[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model WorkoutDay {
  id              String          @id @default(cuid())
  day             Int
  title           String
  program         TrainingProgram @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId       String
  exercises       ExerciseDetail[]
}

model ExerciseDetail {
  id                      String     @id @default(cuid())
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
  workoutDay              WorkoutDay @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
  workoutDayId            String
}

model TrainingLog {
  id          String           @id @default(cuid())
  date        DateTime
  workoutName String
  status      String
  notes       String?
  coachNotes  String?
  mood        String?
  userId      String
  user        User             @relation(fields: [userId], references: [id])
  exercises   LoggedExercise[]
}

model LoggedExercise {
  id            String      @id @default(cuid())
  trainingLog   TrainingLog @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
  trainingLogId String
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  notes         String?
  sets          LoggedSet[]
}

model LoggedSet {
  id                 String         @id @default(cuid())
  loggedExercise     LoggedExercise @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
  loggedExerciseId   String
  plannedReps        String?
  plannedWeight      String?
  loggedReps         Int?
  loggedWeight       Float?
  rpe                Int?
  isCompleted        Boolean
}

model LfgLobby {
    id            String    @id @default(cuid())
    type          LfgLobbyType
    sport         String
    location      String
    playgroundId  String?
    startTime     DateTime
    endTime       DateTime
    playersNeeded Int
    comment       String
    creator       User      @relation(fields: [creatorId], references: [id])
    creatorId     String
    players       User[]
    createdAt     DateTime  @default(now())
}

enum LfgLobbyType {
    GAME
    TRAINING
}

model InventoryItem {
  id             String   @id @default(cuid())
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
}

model Measurement {
  id      String    @id @default(cuid())
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
  userId  String
  user    User      @relation(fields: [userId], references: [id])
}

model FoodItem {
  id           String         @id @default(cuid())
  name         String
  category     String
  image        String?
  imageHint    String?
  calories     Int
  protein      Float
  fat          Float
  carbs        Float
  description  String?
  logEntries   FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String
  createdAt  DateTime @default(now())
}

model FaqItem {
  id       String @id @default(cuid())
  category String
  question String
  answer   String
  createdAt  DateTime @default(now())
}

model TrainingProposal {
  id        String   @id @default(cuid())
  fromId    String
  toId      String
  sport     String
  date      DateTime
  comment   String?
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  from      User     @relation("FromUser", fields: [fromId], references: [id])
  to        User     @relation("ToUser", fields: [toId], references: [id])
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  options   PollOption[]
  votes     PollVote[]
}

model PollOption {
  id     String     @id @default(cuid())
  text   String
  poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String
  votes  PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@unique([userId, pollId])
}

model Message {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         String // DIRECT, GROUP
  participants User[]
  messages     Message[]
  team         Team?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model TournamentAnnouncement {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subject   String
  message   String
  sentTo    Int

  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId String

  sender   User   @relation(fields: [senderId], references: [id])
  senderId String
}
