// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                @id @default(cuid())
  name                      String
  email                     String                @unique
  passwordHash              String
  role                      String                @default("Игрок")
  avatar                    String?
  status                    String                @default("Активен")
  xp                        Int                   @default(0)
  location                  String?
  mainSport                 String?
  isVerified                Boolean               @default(false)
  dateOfBirth               DateTime?
  preferredSports           String[]
  telegram                  String?
  discord                   String?
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime              @updatedAt
  teamsAsCaptain            Team[]                @relation("TeamCaptain")
  teamsAsMember             Team[]                @relation("TeamMembers")
  createdTeams              Team[]                @relation("TeamCreator")
  tournamentsAsParticipant  Tournament[]          @relation("TournamentParticipants")
  organizedTournaments      Tournament[]          @relation("TournamentOrganizer")
  friends                   User[]                @relation("Friends")
  friendOf                  User[]                @relation("Friends")
  sentFriendRequests        FriendRequest[]       @relation("SentFriendRequests")
  receivedFriendRequests    FriendRequest[]       @relation("ReceivedFriendRequests")
  careerHistory             CareerHistoryItem[]
  gallery                   GalleryItem[]
  activities                Activity[]
  judgedMatches             Match[]               @relation("JudgedMatches")
  resolvedReports           Report[]              @relation("ResolvedReports")
  reportedReports           Report[]              @relation("ReportedReports")
  resolvedPlaygroundReports PlaygroundReport[]    @relation("ResolvedPlaygroundReports")
  reportedPlaygroundReports PlaygroundReport[]    @relation("ReportedPlaygroundReports")
  createdPlaygrounds        Playground[]
  reviews                   PlaygroundReview[]
  challengesAsCreator       Challenge[]           @relation("ChallengeCreator")
  challengesAsOpponent      Challenge[]           @relation("ChallengeOpponent")
  trainingLogs              TrainingLog[]
  organizedPromotions       Promotion[]
  measurements              Measurement[]
  trainingProposalsSent     TrainingProposal[]    @relation("SentTrainingProposals")
  trainingProposalsReceived TrainingProposal[]    @relation("ReceivedTrainingProposals")
  pollVotes                 PollVote[]
  inventory                 InventoryItem[]
  chatMessages              Message[]
  chats                     Chat[]
  notifications             Notification[]
  sentAnnouncements         TournamentAnnouncement[]
  coachProfile              CoachProfile?
  coaching                  User[]                @relation("CoachingRelationship")
  coachedBy                 User?                 @relation("CoachingRelationship", fields: [coachId], references: [id])
  coachId                   String?
}

model Team {
  id                 String              @id @default(cuid())
  name               String
  slug               String              @unique
  logo               String?
  dataAiHint         String?
  motto              String?
  description        String?
  game               String
  rank               Int                 @default(0)
  wins               Int                 @default(0)
  losses             Int                 @default(0)
  draws              Int                 @default(0)
  captainId          String
  creatorId          String
  homePlaygroundId   String?
  seekingSponsorship Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  captain            User                @relation("TeamCaptain", fields: [captainId], references: [id])
  creator            User                @relation("TeamCreator", fields: [creatorId], references: [id])
  members            User[]              @relation("TeamMembers")
  tournaments        Tournament[]        @relation("TournamentParticipants")
  matchesAsTeam1     Match[]             @relation("Team1Matches")
  matchesAsTeam2     Match[]             @relation("Team2Matches")
  applications       TeamApplication[]
  homePlayground     Playground?         @relation(fields: [homePlaygroundId], references: [id])
  chat               Chat?               @relation(fields: [chatId], references: [id])
  chatId             String?             @unique
  practices          TeamPractice[]
  sponsors           Sponsor[]           @relation("SponsoredTeams")
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  createdAt    DateTime   @default(now())

  @@index([teamId])
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  @@unique([teamId, userId, tournamentId])
  @@index([teamId])
  @@index([userId])
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

model Match {
  id              String       @id @default(cuid())
  team1           Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  startedAt       DateTime?
  finishedAt      DateTime?
  location        String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  refereeName     String?
  tournament      Tournament?  @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  playground      Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId    String?
  judges          User[]       @relation("JudgedMatches")
  events          MatchEvent[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  league          League?      @relation(fields: [leagueId], references: [id])
  leagueId        String?
}

model MatchEvent {
  id        String   @id @default(cuid())
  match     Match    @relation(fields: [matchId], references: [id])
  matchId   String
  minute    Int
  type      String // e.g., "GOAL", "YELLOW_CARD", "SUBSTITUTION"
  playerId  String // ID of the player involved
  teamId    String // ID of the team involved
  details   Json?
  createdAt DateTime @default(now())

  @@index([matchId])
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  game                  String
  description           String?
  format                TournamentFormat
  type                  TournamentType
  status                TournamentStatus
  prizePool             String?
  rules                 String?
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  bannerImage           String?
  bannerImageHint       String?
  organizerId           String
  organizer             User                     @relation("TournamentOrganizer", fields: [organizerId], references: [id])
  teams                 Team[]                   @relation("TournamentParticipants")
  matches               Match[]
  announcements         TournamentAnnouncement[]
  sponsors              Sponsor[]
  judges                User[]
  medicalPartners       MedicalPartner[]
  media                 TournamentMedia[]
  applications          TeamApplication[]
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String     @db.Text
  sentTo       Int
  createdAt    DateTime   @default(now())

  @@index([tournamentId])
}

model Sponsor {
  id           String       @id @default(cuid())
  name         String
  logo         String?
  logoHint     String?
  description  String
  profileUrl   String
  interests    String[]
  teams        Team[]       @relation("SponsoredTeams")
  tournaments  Tournament[]
  promotions   Promotion[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model TournamentMedia {
  id          String   @id @default(cuid())
  tournament  Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type        String // IMAGE, VIDEO, AUDIO
  src         String
  description String?
  hint        String?
  createdAt   DateTime @default(now())

  @@index([tournamentId])
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
  createdAt      DateTime     @default(now())
}

enum TournamentFormat {
  single_elimination
  round_robin
  groups
}

enum TournamentType {
  team
  individual
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

model CareerHistoryItem {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  teamName String
  period   String
  role     String
  review   String

  createdAt DateTime @default(now())

  @@index([userId])
}

model GalleryItem {
  id         String @id @default(cuid())
  user       User   @relation(fields: [userId], references: [id])
  userId     String
  src        String
  alt        String
  dataAiHint String

  createdAt DateTime @default(now())

  @@index([userId])
}

model FriendRequest {
  id        String                @id @default(cuid())
  fromId    String
  toId      String
  status    FriendRequestStatus   @default(PENDING)
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  from      User                  @relation("SentFriendRequests", fields: [fromId], references: [id])
  to        User                  @relation("ReceivedFriendRequests", fields: [toId], references: [id])

  @@unique([fromId, toId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Activity {
  id           String      @id @default(cuid())
  type         ActivityType
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  playgroundId String?
  playground   Playground? @relation(fields: [playgroundId], references: [id], onDelete: SetNull)
  metadata     Json
  createdAt    DateTime    @default(now())

  @@index([userId])
  @@index([playgroundId])
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model Playground {
  id                   String             @id @default(cuid())
  name                 String
  address              String
  type                 String
  coverImage           String?
  coverImageHint       String?
  surface              String
  features             String[]
  rating               Float
  checkIns             Int
  status               PlaygroundStatus
  creatorId            String
  creator              User               @relation(fields: [creatorId], references: [id])
  matches              Match[]
  reviews              PlaygroundReview[]
  reports              PlaygroundReport[]
  activities           Activity[]
  homeForTeams         Team[]
  practices            TeamPractice[]
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())

  @@index([playgroundId])
}

model PlaygroundReport {
  id           String         @id @default(cuid())
  playground   Playground     @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  playgroundId String
  reporter     User           @relation("ReportedPlaygroundReports", fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     ReportSeverity
  summary      String
  status       ReportStatus
  resolver     User?          @relation("ResolvedPlaygroundReports", fields: [resolverId], references: [id])
  resolverId   String?
  resolution   String?
  resolvedAt   DateTime?
  createdAt    DateTime       @default(now())

  @@index([playgroundId])
}

model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("ReportedReports", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ResolvedReports", fields: [reportedUserId], references: [id])
  reportedUserId String
  reason         String
  context        String
  status         ReportStatus @default(PENDING)
  resolver       User?        @relation("ResolvedReports", fields: [resolverId], references: [id])
  resolverId     String?
  resolution     String?
  resolvedAt     DateTime?
  createdAt      DateTime     @default(now())
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum ReportSeverity {
  low
  medium
  high
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  status       ChallengeStatus
  result       String?
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  creator      User            @relation("ChallengeCreator", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("ChallengeOpponent", fields: [opponentId], references: [id])
  opponentId   String?
  createdAt    DateTime        @default(now())
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Sport {
  id         String      @id @unique
  name       String
  icon       String
  category   String // Командный, Некомандный, Киберспорт
  createdAt  DateTime    @default(now())
  challenges Challenge[]
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
  createdAt   DateTime     @default(now())
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int    @default(0)
  wins     Int    @default(0)
  losses   Int    @default(0)
  draws    Int    @default(0)
  points   Int    @default(0)

  @@unique([leagueId, teamId])
}

model LfgLobby {
  id           String       @id @default(cuid())
  creator      User         @relation(fields: [creatorId], references: [id])
  creatorId    String
  type         LfgLobbyType
  sport        String
  location     String
  playgroundId String?
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  comment      String
  players      User[]
  status       LfgLobbyStatus @default(OPEN)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

model TrainingLog {
  id           String            @id @default(cuid())
  user         User              @relation(fields: [userId], references: [id])
  userId       String
  date         DateTime
  workoutName  String?
  status       TrainingLogStatus
  mood         Mood?
  notes        String?
  coachNotes   String?
  exercises    LoggedExercise[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@index([userId, date])
}

model LoggedExercise {
  id                      String         @id @default(cuid())
  trainingLog             TrainingLog    @relation(fields: [trainingLogId], references: [id])
  trainingLogId           String
  exercise                Exercise       @relation(fields: [exerciseId], references: [id])
  exerciseId              String
  notes                   String?
  isSupersetWithPrevious  Boolean?       @default(false)
  sets                    LoggedSet[]
}

model LoggedSet {
  id               String          @id @default(cuid())
  loggedExercise   LoggedExercise  @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Float?
  isCompleted      Boolean         @default(false)
}

enum TrainingLogStatus {
  planned
  completed
  skipped
}

enum Mood {
  great
  good
  ok
  bad
}

model TrainingProgram {
  id              String             @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean            @default(false)
  weeklySplit     WorkoutDay[]
  trainingProposals TrainingProposal[]
}

model WorkoutDay {
  id              String             @id @default(cuid())
  trainingProgram TrainingProgram    @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  day             Int
  title           String
  exercises       WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?    @default(false)
  technique               String?
}

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String           @db.Text
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  String[]
  commonMistakes String[]
  alternatives   String[]
  loggedExercises LoggedExercise[]
  createdAt      DateTime         @default(now())
}

model Measurement {
  id      String    @id @default(cuid())
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?

  @@index([userId])
}

model TrainingProposal {
  id        String              @id @default(cuid())
  from      User                @relation("SentTrainingProposals", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedTrainingProposals", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  comment   String?
  program   TrainingProgram?    @relation(fields: [programId], references: [id])
  programId String?
  status    TrainingProposalStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@index([fromId])
  @@index([toId])
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Poll {
  id        String     @id @default(cuid())
  title     String
  question  String
  isActive  Boolean    @default(true)
  options   PollOption[]
  votes     PollVote[]
  createdAt DateTime   @default(now())
}

model PollOption {
  id        String     @id @default(cuid())
  poll      Poll       @relation(fields: [pollId], references: [id])
  pollId    String
  text      String
  votes     PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@unique([userId, pollId])
}

model StoreItem {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean   @default(false)
  createdAt   DateTime  @default(now())
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

model InventoryItem {
  id             String   @id @default(cuid())
  name           String
  category       String // "Обувь", "Одежда", "Аксессуары", "Периферия"
  type           String // "Футбольные бутсы", "Игровая мышь"
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String

  @@index([userId])
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String   @db.Text
  createdAt DateTime @default(now())
}

model Promotion {
  id            String   @id @default(cuid())
  name          String
  description   String
  prize         String
  cost          String
  imageDataUri  String
  imageHint     String
  endDate       DateTime
  organizer     User     @relation(fields: [organizerId], references: [id])
  organizerId   String
  sponsor       Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([organizerId])
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String   @db.Text
  price          Decimal
  rating         Float
  tags           String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]
  messages     Message[]
  team         Team?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum ChatType {
  PRIVATE
  GROUP
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String   @db.Text
  createdAt DateTime @default(now())

  @@index([chatId])
}

model Notification {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  type      NotificationType
  message   String
  href      String?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  @@index([userId])
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  TOURNAMENT_INVITE
  ANNOUNCEMENT
}
