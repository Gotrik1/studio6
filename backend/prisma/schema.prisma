// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Игрок
  Капитан
  Тренер
  Организатор
  Судья
  Модератор
  Администратор
  Спонсор
  Болельщик
  Менеджер
}

enum UserStatus {
  Активен
  Забанен
}

model User {
  id                      String    @id @default(cuid())
  name                    String
  email                   String    @unique
  passwordHash            String
  avatar                  String?
  role                    Role      @default(Игрок)
  status                  UserStatus @default(Активен)
  xp                      Int       @default(0)
  location                String?
  mainSport               String?
  isVerified              Boolean   @default(false)
  dateOfBirth             DateTime?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  
  teamsAsMember           Team[]               @relation("TeamMembers")
  teamsAsCaptain          Team[]               @relation("TeamCaptain")
  teamsAsCreator          Team[]               @relation("TeamCreator")
  organizedTournaments    Tournament[]
  judgedMatches           Match[]              @relation("JudgedMatches")
  organizedPromotions     Promotion[]
  createdPlaygrounds      Playground[]
  friends                 User[]               @relation("Friends")
  friendOf                User[]               @relation("Friends")
  sentFriendRequests      FriendRequest[]      @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]      @relation("ReceivedFriendRequests")
  coachProfile            CoachProfile?
  coaching                User[]               @relation("CoachStudents")
  coach                   User?                @relation("CoachStudents", fields: [coachId], references: [id])
  coachId                 String?
  trainingLogs            TrainingLog[]
  inventoryItems          InventoryItem[]
  measurements            Measurement[]
  foodLogEntries          FoodLogEntry[]
  trainingProposalsSent   TrainingProposal[]   @relation("SentProposals")
  trainingProposalsRcvd   TrainingProposal[]   @relation("ReceivedProposals")
  pollVotes               PollVote[]
  playgroundReviews       PlaygroundReview[]
  playgroundReports       PlaygroundReport[]
  reportsSent             Report[]             @relation("Reporter")
  reportsReceived         Report[]             @relation("ReportedUser")
  announcementsSent       TournamentAnnouncement[]
  achievements            UserAchievement[]
  activities              Activity[]
  lfgLobbiesCreated       LfgLobby[]           @relation("LfgLobbyCreator")
  lfgLobbiesJoined        LfgLobby[]           @relation("LfgLobbyPlayers")
  matchEvents             MatchEvent[]
}

model Team {
  id                  String   @id @default(cuid())
  name                String
  slug                String   @unique
  game                String
  motto               String?
  logo                String?
  dataAiHint          String?
  rank                Int      @default(0)
  wins                Int      @default(0)
  losses              Int      @default(0)
  draws               Int      @default(0)
  seekingSponsorship  Boolean  @default(false)
  description         String?
  goals               String?
  homePlaygroundId    String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  creator             User       @relation("TeamCreator", fields: [creatorId], references: [id])
  creatorId           String
  captain             User       @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId           String
  members             User[]     @relation("TeamMembers")
  matchesAsTeam1      Match[]    @relation("Team1Matches")
  matchesAsTeam2      Match[]    @relation("Team2Matches")
  tournaments         Tournament[] @relation("TournamentTeams")
  sponsors            Sponsor[]    @relation("TeamSponsors")
  chat                Chat?
  applications        TeamApplication[]
  practices           TeamPractice[]
  matchEvents         MatchEvent[]
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Match {
  id                  String   @id @default(cuid())
  team1Id             String
  team2Id             String
  team1Score          Int?
  team2Score          Int?
  status              MatchStatus @default(PLANNED)
  tournamentId        String?
  leagueId            String?
  playgroundId        String?
  scheduledAt         DateTime
  startedAt           DateTime?
  finishedAt          DateTime?
  location            String?
  disputeReason       String?
  disputeOpenedAt     DateTime?
  resolution          String?
  refereeName         String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  team1               Team       @relation("Team1Matches", fields: [team1Id], references: [id], onDelete: Cascade)
  team2               Team       @relation("Team2Matches", fields: [team2Id], references: [id], onDelete: Cascade)
  tournament          Tournament? @relation(fields: [tournamentId], references: [id], onDelete: SetNull)
  league              League?    @relation(fields: [leagueId], references: [id], onDelete: SetNull)
  judges              User[]     @relation("JudgedMatches")
  playground          Playground? @relation(fields: [playgroundId], references: [id], onDelete: SetNull)
  events              MatchEvent[]
}

model MatchEvent {
  id        String   @id @default(cuid())
  matchId   String
  timestamp DateTime
  type      String 
  playerId  String
  teamId    String
  comment   String?

  match  Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)
  player User   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}


model Tournament {
  id                      String   @id @default(cuid())
  name                    String
  slug                    String   @unique
  game                    String
  description             String?
  type                    String   // e.g., 'team', 'individual'
  format                  String   // e.g., 'single_elimination', 'round_robin'
  category                String?
  location                String?
  participantCount        Int
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  status                  String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  organizer               User       @relation(fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]     @relation("TournamentTeams")
  matches                 Match[]
  applications            TeamApplication[]
  sponsors                Sponsor[]  @relation("TournamentSponsors")
  judges                  User[]     @relation("TournamentJudges")
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  media                   TournamentMedia[]
}

model Chat {
    id   String @id @default(cuid())
    name String?
    type String @default("PRIVATE") // PRIVATE or GROUP

    teamId String? @unique
    team   Team?   @relation(fields: [teamId], references: [id], onDelete: Cascade)
    
    participants User[]
    messages     Message[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Message {
    id        String   @id @default(cuid())
    text      String
    createdAt DateTime @default(now())
    chatId    String
    authorId  String
    
    chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
    author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

enum TeamApplicationStatus {
    PENDING
    APPROVED
    DECLINED
}

model TeamApplication {
    id           String   @id @default(cuid())
    teamId       String
    userId       String
    tournamentId String?
    message      String?
    status       TeamApplicationStatus @default(PENDING)
    createdAt    DateTime @default(now())

    team       Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
    user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    tournament Tournament? @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

    @@unique([teamId, userId, tournamentId])
}

model FriendRequest {
    id        String   @id @default(cuid())
    fromId    String
    toId      String
    status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
    createdAt DateTime @default(now())
    
    from User @relation("SentFriendRequests", fields: [fromId], references: [id])
    to   User @relation("ReceivedFriendRequests", fields: [toId], references: [id])
    
    @@unique([fromId, toId])
}

model Playground {
  id              String   @id @default(cuid())
  name            String
  address         String
  type            String
  surface         String
  features        String[]
  rating          Float
  checkIns        Int
  status          String   // PENDING_MODERATION, APPROVED
  coverImage      String?
  coverImageHint  String?
  creatorId       String
  
  creator         User        @relation(fields: [creatorId], references: [id])
  matches         Match[]
  reviews         PlaygroundReview[]
  reports         PlaygroundReport[]
  practices       TeamPractice[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Sponsor {
    id              String @id @default(cuid())
    name            String
    logo            String?
    logoHint        String?
    description     String
    profileUrl      String
    interests       String[]
    
    teams           Team[] @relation("TeamSponsors")
    promotions      Promotion[]
    tournaments     Tournament[] @relation("TournamentSponsors")
}

model Promotion {
    id              String @id @default(cuid())
    name            String
    description     String
    prize           String
    imageDataUri    String
    imageHint       String
    endDate         DateTime
    cost            String
    organizerId     String
    sponsorId       String?

    organizer       User      @relation(fields: [organizerId], references: [id])
    sponsor         Sponsor?  @relation(fields: [sponsorId], references: [id])
}

model League {
    id          String @id @default(cuid())
    name        String
    description String
    game        String
    image       String?
    imageHint   String?

    teams       LeagueTeam[]
    matches     Match[]
}

model LeagueTeam {
    id        String @id @default(cuid())
    leagueId  String
    teamId    String
    played    Int @default(0)
    wins      Int @default(0)
    losses    Int @default(0)
    draws     Int @default(0)
    points    Int @default(0)

    league    League @relation(fields: [leagueId], references: [id])
    team      Team   @relation(fields: [teamId], references: [id])

    @@unique([leagueId, teamId])
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model Activity {
  id           String       @id @default(cuid())
  type         ActivityType
  userId       String
  metadata     Json
  timestamp    DateTime     @default(now())
  playgroundId String?

  user         User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model CoachProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  specialization  String
  description     String
  tags            String[]
  rating          Float
  price           Decimal
  
  user            User     @relation(fields: [userId], references: [id])
}

model Challenge {
  id              String   @id @default(cuid())
  title           String
  description     String
  disciplineId    String
  wager           Int
  status          String // OPEN, IN_PROGRESS, COMPLETED, CANCELLED
  result          String?
  
  creatorId       String
  opponentId      String?
  
  creator         User     @relation("CreatedChallenges", fields: [creatorId], references: [id])
  opponent        User?    @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  discipline      Sport    @relation(fields: [disciplineId], references: [id])
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Sport {
    id          String @id
    name        String @unique
    icon        String
    category    String

    challenges  Challenge[]
}

model TeamPractice {
    id           String @id @default(cuid())
    teamId       String
    title        String
    description  String?
    date         DateTime
    playgroundId String

    team         Team        @relation(fields: [teamId], references: [id])
    playground   Playground  @relation(fields: [playgroundId], references: [id])
}

enum LfgLobbyType {
    GAME
    TRAINING
}

model LfgLobby {
    id            String       @id @default(cuid())
    type          LfgLobbyType
    sport         String
    location      String
    playgroundId  String?
    startTime     DateTime
    endTime       DateTime
    playersNeeded Int
    comment       String
    creatorId     String

    creator       User   @relation("LfgLobbyCreator", fields: [creatorId], references: [id])
    players       User[] @relation("LfgLobbyPlayers")

    createdAt     DateTime @default(now())
}

model Measurement {
    id        String   @id @default(cuid())
    userId    String
    date      DateTime
    weight    Float
    bodyFat   Float?
    chest     Float?
    waist     Float?
    hips      Float?
    biceps    Float?
    thigh     Float?

    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
}

model TrainingProposal {
    id          String   @id @default(cuid())
    fromId      String
    toId        String
    sport       String
    date        DateTime
    comment     String?
    status      String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
    programId   String?

    from        User      @relation("SentProposals", fields: [fromId], references: [id])
    to          User      @relation("ReceivedProposals", fields: [toId], references: [id])
    program     TrainingProgram? @relation(fields: [programId], references: [id])
    
    createdAt   DateTime @default(now())
}

model Poll {
    id        String   @id @default(cuid())
    title     String
    question  String
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    
    options   PollOption[]
    votes     PollVote[]
}

model PollOption {
    id        String   @id @default(cuid())
    text      String
    pollId    String

    poll      Poll     @relation(fields: [pollId], references: [id])
    votes     PollVote[]
}

model PollVote {
    id           String @id @default(cuid())
    userId       String
    pollId       String
    pollOptionId String
    createdAt    DateTime @default(now())

    user         User   @relation(fields: [userId], references: [id])
    poll         Poll   @relation(fields: [pollId], references: [id])
    pollOption   PollOption @relation(fields: [pollOptionId], references: [id])

    @@unique([userId, pollId])
}

model Quest {
    id          String   @id @default(cuid())
    title       String
    description String
    reward      Int
    goal        Int
    href        String
    type        QuestType
    createdAt   DateTime @default(now())
}

enum QuestType {
    DAILY
    WEEKLY
    SPECIAL
}

model UserAchievement {
    id            String   @id @default(cuid())
    userId        String
    achievementId String
    unlockedAt    DateTime @default(now())

    user          User     @relation(fields: [userId], references: [id])
    achievement   Achievement @relation(fields: [achievementId], references: [id])

    @@unique([userId, achievementId])
}

model Achievement {
    id          String   @id @default(cuid())
    name        String
    description String
    icon        String
    users       UserAchievement[]
}


model InventoryItem {
    id              String   @id @default(cuid())
    userId          String
    name            String
    category        String
    type            String
    purchaseDate    DateTime
    lifespanMonths  Int
    image           String?
    imageHint       String?

    user            User     @relation(fields: [userId], references: [id])
    createdAt       DateTime @default(now())
}

model FoodItem {
    id          String   @id @default(cuid())
    name        String
    category    String
    image       String?
    imageHint   String?
    calories    Int
    protein     Float
    fat         Float
    carbs       Float
    description String?
    
    logEntries  FoodLogEntry[]
}

model FoodLogEntry {
    id          String   @id @default(cuid())
    userId      String
    foodItemId  String
    grams       Int
    meal        String // Breakfast, Lunch, Dinner, Snack
    createdAt   DateTime @default(now())

    user        User     @relation(fields: [userId], references: [id])
    foodItem    FoodItem @relation(fields: [foodItemId], references: [id])
}

model FaqItem {
    id        String   @id @default(cuid())
    category  String
    question  String
    answer    String
    createdAt DateTime @default(now())
}

model TrainingProgram {
  id              String   @id @default(cuid())
  name            String
  description     String
  goal            String // Набор массы, Снижение веса, Рельеф, Сила
  daysPerWeek     Int
  splitType       String // Full-body, Split, Upper/Lower
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean @default(false)
  
  weeklySplit     WorkoutDay[]
  proposals       TrainingProposal[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model WorkoutDay {
  id                String   @id @default(cuid())
  day               Int
  title             String
  trainingProgramId String
  
  program           TrainingProgram @relation(fields: [trainingProgramId], references: [id])
  exercises         ExerciseDetail[]
}

model ExerciseDetail {
  id                      String   @id @default(cuid())
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
  workoutDayId            String
  
  workoutDay              WorkoutDay @relation(fields: [workoutDayId], references: [id])
}

model TrainingLog {
    id           String   @id @default(cuid())
    userId       String
    date         DateTime
    workoutName  String
    status       String // planned, completed, skipped
    mood         String?  // great, good, ok, bad
    notes        String?
    coachNotes   String?

    user         User     @relation(fields: [userId], references: [id])
    exercises    LoggedExercise[]

    createdAt    DateTime @default(now())
}

model LoggedExercise {
    id            String @id @default(cuid())
    trainingLogId String
    exerciseId    String
    notes         String?
    
    trainingLog   TrainingLog @relation(fields: [trainingLogId], references: [id])
    exercise      Exercise    @relation(fields: [exerciseId], references: [id])
    sets          LoggedSet[]
}

model LoggedSet {
    id               String  @id @default(cuid())
    loggedExerciseId String
    plannedReps      String?
    plannedWeight    String?
    loggedReps       Int?
    loggedWeight     Int?
    rpe              Int?
    isCompleted      Boolean @default(false)

    loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
}

model TournamentAnnouncement {
    id              String @id @default(cuid())
    tournamentId    String
    senderId        String
    subject         String
    message         String
    sentTo          Int
    createdAt       DateTime @default(now())

    tournament      Tournament @relation(fields: [tournamentId], references: [id])
    sender          User       @relation(fields: [senderId], references: [id])
}


model MedicalPartner {
    id              String @id @default(cuid())
    name            String
    specialization  String
    contact         String
    avatar          String?
    avatarHint      String?

    tournaments     Tournament[]
}

model TournamentMedia {
    id              String @id @default(cuid())
    tournamentId    String
    type            String // IMAGE, VIDEO, AUDIO
    src             String
    description     String?
    hint            String?
    createdAt       DateTime @default(now())

    tournament      Tournament @relation(fields: [tournamentId], references: [id])
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model Report {
    id              String       @id @default(cuid())
    reporterId      String
    reportedUserId  String
    reason          String
    context         String
    status          ReportStatus @default(PENDING)
    resolution      String?
    resolverId      String?
    createdAt       DateTime     @default(now())
    resolvedAt      DateTime?

    reporter        User @relation("Reporter", fields: [reporterId], references: [id])
    reportedUser    User @relation("ReportedUser", fields: [reportedUserId], references: [id])
}

model PlaygroundReport {
  id              String       @id @default(cuid())
  playgroundId    String
  reporterId      String
  category        String
  comment         String
  severity        String       // low, medium, high
  summary         String
  status          ReportStatus @default(PENDING)
  createdAt       DateTime     @default(now())

  playground      Playground @relation(fields: [playgroundId], references: [id])
  reporter        User       @relation(fields: [reporterId], references: [id])
}

model StoreItem {
    id          String   @id @default(cuid())
    name        String
    description String
    price       Float
    image       String?
    imageHint   String?
    category    String
    isRealMoney Boolean  @default(false)
    createdAt   DateTime @default(now())
}
