datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   String      @id @default(cuid())
  email                String      @unique
  name                 String
  passwordHash         String
  role                 String      @default("Игрок")
  status               String      @default("Активен")
  avatar               String?
  xp                   Int         @default(0)
  dateOfBirth          DateTime?
  location             String?
  mainSport            String?
  preferredSports      String[]
  telegram             String?
  discord              String?
  teams                Team[]      @relation("TeamMembers")
  ownedTeams           Team[]      @relation("TeamCaptain")
  createdChallenges    Challenge[] @relation("CreatedChallenges")
  acceptedChallenges   Challenge[] @relation("AcceptedChallenges")
  createdPlaygrounds   Playground[]
  organizedTournaments Tournament[]
  activities           Activity[]
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
}

model Team {
  id               String       @id @default(cuid())
  slug             String       @unique
  name             String
  game             String
  motto            String?
  logo             String?
  dataAiHint       String?
  rank             Int          @default(0)
  wins             Int          @default(0)
  losses           Int          @default(0)
  draws            Int          @default(0)
  homePlaygroundId String?
  captainId        String
  captain          User         @relation("TeamCaptain", fields: [captainId], references: [id])
  members          User[]       @relation("TeamMembers")
  tournaments      Tournament[] @relation("TournamentTeams")
  matchesAsTeam1   Match[]      @relation("Team1Matches")
  matchesAsTeam2   Match[]      @relation("Team2Matches")
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Tournament {
  id              String           @id @default(cuid())
  slug            String           @unique
  name            String
  game            String
  format          String
  prizePool       Float
  startDate       DateTime
  description     String?
  rules           String?
  bannerImage     String?
  bannerImageHint String?
  status          TournamentStatus @default(REGISTRATION)
  organizerId     String
  organizer       User             @relation(fields: [organizerId], references: [id])
  teams           Team[]           @relation("TournamentTeams")
  matches         Match[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Match {
  id           String      @id @default(cuid())
  team1Score   Int?
  team2Score   Int?
  status       MatchStatus @default(PLANNED)
  scheduledAt  DateTime
  finishedAt   DateTime?
  location     String?
  refereeName  String?
  team1Id      String
  team1        Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team2Id      String
  team2        Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  tournamentId String?
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Playground {
  id             String           @id @default(cuid())
  name           String
  address        String
  type           String
  surface        String
  features       String[]
  coverImage     String?
  coverImageHint String?
  rating         Float
  checkIns       Int
  status         PlaygroundStatus @default(PENDING_MODERATION)
  creatorId      String
  creator        User             @relation(fields: [creatorId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Challenge {
  id          String          @id @default(cuid())
  title       String
  description String
  discipline  String
  wager       Int             @default(0)
  status      ChallengeStatus @default(OPEN)
  result      String?
  creatorId   String
  creator     User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  opponentId  String?
  opponent    User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Activity {
  id        String       @id @default(cuid())
  type      ActivityType
  timestamp DateTime     @default(now())
  metadata  Json
  userId    String
  user      User         @relation(fields: [userId], references: [id])
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum PlaygroundStatus {
  PENDING_MODERATION
  APPROVED
  REJECTED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ActivityType {
  MATCH_PLAYED
  ACHIEVEMENT_UNLOCKED
  WORKOUT_COMPLETED
  TEAM_JOINED
}
