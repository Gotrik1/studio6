// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// ENUMS
// =============================================================================

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  SHOT
  SHOT_ON_TARGET
  CORNER
  FOUL
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  TOURNAMENT_INVITE
  TEAM_INVITE
  ANNOUNCEMENT
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

// =============================================================================
// MODELS
// =============================================================================

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    String
  status                  String
  xp                      Int
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  preferredSports         String[]                 @default([])
  isVerified              Boolean                  @default(false)
  telegram                String?
  discord                 String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  teamsAsMember           Team[]                   @relation("TeamMembers")
  teamsAsCaptain          Team[]                   @relation("TeamCaptain")
  organizedTournaments    Tournament[]
  createdPlaygrounds      Playground[]
  reportsSent             Report[]                 @relation("ReportsSent")
  reportsReceived         Report[]                 @relation("ReportsReceived")
  reportsResolved         Report[]                 @relation("ReportsResolved")
  careerHistory           CareerHistory[]
  coachProfile            CoachProfile?
  sponsorships            Sponsorship[]
  sponsorshipOffers       SponsorshipOffer[]
  measurements            Measurement[]
  trainingProposalsSent   TrainingProposal[]       @relation("ProposalsSent")
  trainingProposalsRcvd   TrainingProposal[]       @relation("ProposalsReceived")
  pollsVoted              PollVote[]
  createdPolls            Poll[]
  achievements            UserAchievement[]
  notifications           Notification[]
  sentAnnouncements       TournamentAnnouncement[]
  inventory               InventoryItem[]
  foodLog                 FoodLogEntry[]
  activities              Activity[]
  trainingLogs            TrainingLog[]
  userTrainingPrograms    UserTrainingProgram[]
  createdLfgLobbies       LfgLobby[]               @relation("CreatedLobbies")
  joinedLfgLobbies        LfgLobby[]               @relation("JoinedLobbies")
  createdChallenges       Challenge[]              @relation("CreatedChallenges")
  acceptedChallenges      Challenge[]              @relation("AcceptedChallenges")
  friends                 User[]                   @relation("Friends")
  friendOf                User[]                   @relation("Friends")
  sentFriendRequests      FriendRequest[]          @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]          @relation("ReceivedFriendRequests")
  teamApplications        TeamApplication[]
  matchEvents             MatchEvent[]
  judgedMatches           Match[]                  @relation("JudgedMatches")
  judgedTournaments       Tournament[]             @relation("JudgedTournaments")
  organizedPromotions     Promotion[]
  playgroundReports       PlaygroundReport[]
}

model Team {
  id                 String               @id @default(cuid())
  name               String
  motto              String?
  logo               String?
  dataAiHint         String?
  game               String
  rank               Int                  @default(0)
  wins               Int                  @default(0)
  losses             Int                  @default(0)
  draws              Int                  @default(0)
  captainId          String
  creatorId          String
  slug               String               @unique
  pitch              String?
  seekingSponsorship Boolean              @default(false)
  homePlaygroundId   String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  creator            User                 @relation(fields: [creatorId], references: [id])
  captain            User                 @relation("TeamCaptain", fields: [captainId], references: [id])
  members            User[]               @relation("TeamMembers")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]              @relation("Team1Matches")
  matchesAsTeam2     Match[]              @relation("Team2Matches")
  chat               Chat?
  practices          TeamPractice[]
  leagueTeams        LeagueTeam[]
  applications       TeamApplication[]
  sponsorships       Sponsorship[]
  sponsorshipOffers  SponsorshipOffer[]
  matchEvents        MatchEvent[]
  homePlayground     Playground?          @relation(fields: [homePlaygroundId], references: [id])
  sponsoredBy        Sponsor[]
}

model Tournament {
  id                      String                     @id @default(cuid())
  name                    String
  game                    String
  description             String?
  status                  String
  type                    String
  format                  String
  category                String
  location                String
  participantCount        Int
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  slug                    String                     @unique
  organizerId             String
  organizer               User                       @relation(fields: [organizerId], references: [id])
  teams                   Team[]
  matches                 Match[]
  judges                  User[]                     @relation("JudgedTournaments")
  sponsors                Sponsor[]                  @relation("SponsoredTournaments")
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  applications            TeamApplication[]
  media                   TournamentMedia[]
  leagueId                String?
  league                  League?                    @relation(fields: [leagueId], references: [id])
  createdAt               DateTime                   @default(now())
  updatedAt               DateTime                   @updatedAt
}

model Match {
  id                String       @id @default(cuid())
  team1Id           String
  team2Id           String
  team1Score        Int?
  team2Score        Int?
  status            MatchStatus
  scheduledAt       DateTime
  finishedAt        DateTime?
  tournamentId      String?
  playgroundId      String?
  location          String?
  refereeName       String?
  disputeReason     String?
  disputeOpenedAt   DateTime?
  resolution        String?
  round             Int?
  leagueId          String?
  team1             Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team2             Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  tournament        Tournament?  @relation(fields: [tournamentId], references: [id])
  playground        Playground?  @relation(fields: [playgroundId], references: [id])
  events            MatchEvent[]
  notifications     Notification[]
  judges            User[]       @relation("JudgedMatches")
  league            League?      @relation(fields: [leagueId], references: [id])
}

model MatchEvent {
  id        String         @id @default(cuid())
  matchId   String
  match     Match          @relation(fields: [matchId], references: [id])
  timestamp DateTime
  type      MatchEventType
  teamId    String
  team      Team           @relation(fields: [teamId], references: [id])
  playerId  String
  player    User           @relation(fields: [playerId], references: [id])
  metadata  Json?
}

model Sport {
  id          String      @id
  name        String      @unique
  icon        String
  category    String
  challenges  Challenge[]
}

model Playground {
  id              String               @id @default(cuid())
  name            String
  address         String
  type            String
  surface         String
  features        String[]             @default([])
  rating          Float
  checkIns        Int
  status          String
  coverImage      String?
  coverImageHint  String?
  creatorId       String
  creator         User                 @relation(fields: [creatorId], references: [id])
  matches         Match[]
  lfgLobbies      LfgLobby[]
  residentTeams   Team[]
  reviews         PlaygroundReview[]
  reports         PlaygroundReport[]
  activities      Activity[]
  practices       TeamPractice[]
}

model Sponsor {
  id           String       @id @default(cuid())
  name         String       @unique
  logo         String?
  logoHint     String?
  description  String
  profileUrl   String
  interests    String[]     @default([])
  promotions   Promotion[]
  sponsorships Sponsorship[]
  tournaments  Tournament[] @relation("SponsoredTournaments")
  teams        Team[]
}

model Promotion {
  id            String   @id @default(cuid())
  name          String
  description   String
  prize         String
  cost          String
  organizerId   String
  sponsorId     String?
  imageDataUri  String
  imageHint     String
  endDate       DateTime
  organizer     User     @relation(fields: [organizerId], references: [id])
  sponsor       Sponsor? @relation(fields: [sponsorId], references: [id])
}

model Sponsorship {
  id        String   @id @default(cuid())
  teamId    String
  sponsorId String
  amount    Decimal
  signedAt  DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id])
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  disciplineId String
  creatorId    String
  opponentId   String?
  status       ChallengeStatus
  result       String?
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  creator      User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  opponent     User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
}

model Report {
  id             String       @id @default(cuid())
  reporterId     String
  reportedUserId String
  resolverId     String?
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  createdAt      DateTime     @default(now())
  resolvedAt     DateTime?
  resolution     String?
  reporter       User         @relation("ReportsSent", fields: [reporterId], references: [id])
  reportedUser   User         @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  resolver       User?        @relation("ReportsResolved", fields: [resolverId], references: [id])
}

model CareerHistory {
  id        String   @id @default(cuid())
  userId    String
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model CoachProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
  user           User     @relation(fields: [userId], references: [id])
}

model TeamApplication {
  id           String                @id @default(cuid())
  teamId       String
  userId       String
  tournamentId String?
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  createdAt    DateTime              @default(now())
  team         Team                  @relation(fields: [teamId], references: [id])
  user         User                  @relation(fields: [userId], references: [id])
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
}

model FriendRequest {
  id        String              @id @default(cuid())
  fromId    String
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
}

model Achievement {
  id           String            @id @default(cuid())
  name         String
  description  String
  icon         String
  userAchievers UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id])
  achievement   Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
}

model Activity {
  id           String      @id @default(cuid())
  type         ActivityType
  userId       String
  playgroundId String?
  metadata     Json
  createdAt    DateTime    @default(now())
  user         User        @relation(fields: [userId], references: [id])
  playground   Playground? @relation(fields: [playgroundId], references: [id])
}

model PlaygroundReport {
  id           String     @id @default(cuid())
  playgroundId String
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus
  createdAt    DateTime   @default(now())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  reporter     User       @relation(fields: [reporterId], references: [id])
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  userId     String
  foodItemId String
  grams      Int
  meal       String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
}

model Measurement {
  id        String    @id @default(cuid())
  userId    String
  date      DateTime
  weight    Float
  bodyFat   Float?
  chest     Float?
  waist     Float?
  hips      Float?
  biceps    Float?
  thigh     Float?
  user      User      @relation(fields: [userId], references: [id])
}

model TrainingProposal {
  id        String                 @id @default(cuid())
  fromId    String
  toId      String
  sport     String
  date      DateTime
  comment   String?
  status    TrainingProposalStatus @default(PENDING)
  programId String?
  createdAt DateTime               @default(now())
  from      User                   @relation("ProposalsSent", fields: [fromId], references: [id])
  to        User                   @relation("ProposalsReceived", fields: [toId], references: [id])
  program   TrainingProgram?       @relation(fields: [programId], references: [id])
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

model Poll {
  id        String      @id @default(cuid())
  title     String
  question  String
  isActive  Boolean     @default(true)
  authorId  String?
  createdAt DateTime    @default(now())
  author    User?       @relation(fields: [authorId], references: [id])
  options   PollOption[]
  votes     PollVote[]
}

model PollOption {
  id     String     @id @default(cuid())
  pollId String
  text   String
  poll   Poll       @relation(fields: [pollId], references: [id])
  votes  PollVote[]
}

model PollVote {
  userId       String
  pollId       String
  pollOptionId String
  votedAt      DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
  poll         Poll     @relation(fields: [pollId], references: [id])
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])

  @@id([userId, pollId])
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournamentId String
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  sender       User       @relation(fields: [senderId], references: [id])
  notifications Notification[]
}

model MedicalPartner {
  id            String       @id @default(cuid())
  name          String
  specialization String
  contact       String
  avatar        String?
  avatarHint    String?
  tournaments   Tournament[]
}

model SponsorshipOffer {
  id          String   @id @default(cuid())
  teamId      String
  sponsorId   String
  offerText   String
  status      String // PENDING, ACCEPTED, DECLINED
  createdAt   DateTime @default(now())
  team        Team     @relation(fields: [teamId], references: [id])
  sponsor     User     @relation(fields: [sponsorId], references: [id])
}

model TeamPractice {
  id           String     @id @default(cuid())
  teamId       String
  title        String
  description  String?
  date         DateTime
  playgroundId String
  team         Team       @relation(fields: [teamId], references: [id])
  playground   Playground @relation(fields: [playgroundId], references: [id])
}

model Exercise {
  id              String            @id @default(cuid())
  name            String
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json
  commonMistakes  Json
  alternatives    Json
  loggedExercises LoggedExercise[]
}

model TrainingProgram {
  id              String                 @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean                @default(false)
  weeklySplit     WorkoutDay[]
  assignedTo      UserTrainingProgram[]
  proposals       TrainingProposal[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgramId String
  day               Int
  title             String
  program           TrainingProgram   @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
  day                     WorkoutDay  @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
}

model TrainingLog {
  id          String            @id @default(cuid())
  userId      String
  date        DateTime
  workoutName String?
  status      TrainingLogStatus
  exercises   LoggedExercise[]
  mood        Mood?
  notes       String?
  coachNotes  String?
  user        User              @relation(fields: [userId], references: [id])
}

model LoggedExercise {
  id                String      @id @default(cuid())
  trainingLogId     String
  exerciseId        String
  notes             String?
  isSupersetWithPrevious Boolean?
  trainingLog       TrainingLog @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
  exercise          Exercise    @relation(fields: [exerciseId], references: [id])
  sets              LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean
  exercise         LoggedExercise @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
}

model UserTrainingProgram {
  userId      String
  programId   String
  assignedAt  DateTime        @default(now())
  isActive    Boolean         @default(true)
  user        User            @relation(fields: [userId], references: [id])
  program     TrainingProgram @relation(fields: [programId], references: [id])

  @@id([userId, programId])
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         String // DIRECT, GROUP
  participants User[]    @relation("ChatParticipants")
  messages     Message[]
  teamId       String?   @unique
  team         Team?     @relation(fields: [teamId], references: [id])
  createdAt    DateTime  @default(now())
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  authorId  String
  content   String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])
}

model Notification {
  id             String                  @id @default(cuid())
  userId         String
  type           NotificationType
  message        String
  href           String?
  isRead         Boolean                 @default(false)
  createdAt      DateTime                @default(now())
  matchId        String?
  announcementId String?
  user           User                    @relation(fields: [userId], references: [id])
  match          Match?                  @relation(fields: [matchId], references: [id])
  announcement   TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
}

model InventoryItem {
    id              String      @id @default(cuid())
    userId          String
    name            String
    category        String
    type            String
    purchaseDate    DateTime
    lifespanMonths  Int
    image           String?
    imageHint       String?
    createdAt       DateTime    @default(now())
    user            User        @relation(fields: [userId], references: [id])
}

model StoreItem {
    id              String      @id @default(cuid())
    name            String
    description     String
    price           Float
    image           String?
    imageHint       String?
    category        String
    isRealMoney     Boolean     @default(false)
}

model League {
    id String @id @default(cuid())
    name String
    description String
    game String
    image String
    imageHint String
    teams LeagueTeam[]
    matches Match[]
    tournaments Tournament[]
}

model LeagueTeam {
    leagueId String
    teamId String
    played Int
    wins Int
    draws Int
    losses Int
    points Int

    league League @relation(fields: [leagueId], references: [id])
    team Team @relation(fields: [teamId], references: [id])

    @@id([leagueId, teamId])
}

model LfgLobby {
    id String @id @default(cuid())
    type LfgLobbyType
    sport String
    location String
    playgroundId String?
    startTime DateTime
    endTime DateTime
    playersNeeded Int
    comment String
    status LfgLobbyStatus @default(OPEN)
    creatorId String
    creator User @relation("CreatedLobbies", fields: [creatorId], references: [id])
    players User[] @relation("JoinedLobbies")
    playground Playground? @relation(fields: [playgroundId], references: [id])
    createdAt DateTime @default(now())
}

model TournamentMedia {
  id          String      @id @default(cuid())
  tournamentId String
  type        MediaType
  src         String
  description String?
  hint        String?
  createdAt   DateTime    @default(now())
  tournament  Tournament  @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
}
