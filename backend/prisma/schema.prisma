// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(uuid())
  email           String       @unique
  name            String
  passwordHash    String
  role            String
  avatar          String?
  status          String
  xp              Int
  dateOfBirth     DateTime?
  location        String?
  mainSport       String?
  preferredSports String[]
  telegram        String?
  discord         String?
  teams           Team[]       @relation("TeamMembers")
  captainOf       Team[]       @relation("TeamCaptains")
  playgrounds     Playground[]
  challenges      Challenge[]  @relation("UserChallenges")
  opponents       Challenge[]  @relation("OpponentChallenges")
  activities      Activity[]

  organizedTournaments Tournament[] @relation("OrganizedTournaments")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id               String       @id @default(uuid())
  name             String       @unique
  slug             String       @unique
  game             String
  motto            String?
  logo             String?
  dataAiHint       String?
  rank             Int          @default(0)
  wins             Int          @default(0)
  losses           Int          @default(0)
  draws            Int          @default(0)
  captain          User         @relation("TeamCaptains", fields: [captainId], references: [id])
  captainId        String
  members          User[]       @relation("TeamMembers")
  tournaments      Tournament[]
  homePlaygroundId String?
  matchesAsTeam1   Match[]      @relation("Team1Matches")
  matchesAsTeam2   Match[]      @relation("Team2Matches")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tournament {
  id                String       @id @default(uuid())
  name              String       @unique
  slug              String       @unique
  game              String
  status            String
  format            String
  prizePool         Int
  startDate         DateTime
  bannerImage       String?
  bannerImageHint   String?
  description       String?
  rules             String?
  organizer         User         @relation("OrganizedTournaments", fields: [organizerId], references: [id])
  organizerId       String
  teams             Team[]
  matches           Match[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model Match {
  id           String      @id @default(uuid())
  team1        Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id      String
  team2        Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id      String
  team1Score   Int?
  team2Score   Int?
  status       MatchStatus
  scheduledAt  DateTime
  finishedAt   DateTime?
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  location     String?
  refereeName  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Playground {
  id             String    @id @default(uuid())
  name           String
  address        String
  type           String
  surface        String
  features       String[]
  coverImage     String?
  coverImageHint String?
  rating         Float
  checkIns       Int
  status         String    @default("PENDING_MODERATION")
  creator        User      @relation(fields: [creatorId], references: [id])
  creatorId      String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Challenge {
  id          String           @id @default(uuid())
  title       String
  description String
  discipline  String
  wager       Int
  status      ChallengeStatus
  result      String?
  creator     User             @relation("UserChallenges", fields: [creatorId], references: [id])
  creatorId   String
  opponent    User?            @relation("OpponentChallenges", fields: [opponentId], references: [id])
  opponentId  String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Activity {
  id        String       @id @default(uuid())
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  type      ActivityType
  metadata  Json
  timestamp DateTime     @default(now())
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ActivityType {
  MATCH_PLAYED
  ACHIEVEMENT_UNLOCKED
  WORKOUT_COMPLETED
}
