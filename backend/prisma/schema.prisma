// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========== ENUMS ==========

enum Role {
  Игрок
  Капитан
  Тренер
  Организатор
  Судья
  Менеджер
  Спонсор
  Болельщик
  Модератор
  Администратор
}

enum UserStatus {
  Активен
  Забанен
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum ChatType {
  P2P
  GROUP
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

// ========== MODELS ==========

model User {
  id                      String                  @id @default(cuid())
  name                    String
  email                   String                  @unique
  passwordHash            String
  avatar                  String?
  role                    Role                    @default(Игрок)
  status                  UserStatus              @default(Активен)
  xp                      Int                     @default(0)
  location                String?
  mainSport               String?
  isVerified              Boolean                 @default(false)
  dateOfBirth             DateTime?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  teamsAsMember           Team[]                  @relation("TeamMembers")
  createdTeams            Team[]                  @relation("CreatedTeams")
  captainOf               Team?                   @relation("CaptainOfTeams")
  organizedTournaments    Tournament[]
  friends                 User[]                  @relation("Friends")
  friendOf                User[]                  @relation("Friends")
  sentFriendRequests      FriendRequest[]         @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]         @relation("ReceivedFriendRequests")
  chats                   Chat[]
  messages                Message[]
  reportsMade             Report[]                @relation("Reporter")
  reportsAgainst          Report[]                @relation("Reported")
  reportsResolved         Report[]                @relation("Resolver")
  judgedMatches           Match[]
  organizedPromotions     Promotion[]
  createdPlaygrounds      Playground[]
  reviews                 PlaygroundReview[]
  checkIns                Activity[]
  sentTrainingProposals   TrainingProposal[]      @relation("SentTrainingProposals")
  receivedTrainingProposals TrainingProposal[]      @relation("ReceivedTrainingProposals")
  trainingLogs            TrainingLog[]
  coachProfile            CoachProfile?
  coaching                User[]                  @relation("CoachStudents")
  coach                   User?                   @relation("CoachStudents", fields: [coachId], references: [id])
  coachId                 String?
  measurements            Measurement[]
  inventory               InventoryItem[]
  foodLog                 FoodLogEntry[]
  pollVotes               PollVote[]
  teamApplications        TeamApplication[]
  tournamentAnnouncements TournamentAnnouncement[]
  gallery                 GalleryItem[]
  careerHistory           CareerHistoryItem[]
}

model Team {
  id                  String              @id @default(cuid())
  name                String
  slug                String              @unique
  game                String
  motto               String?
  logo                String?
  dataAiHint          String?
  rank                Int                 @default(0)
  wins                Int                 @default(0)
  losses              Int                 @default(0)
  draws               Int                 @default(0)
  seekingSponsorship  Boolean             @default(false)
  description         String?
  goals               String?
  homePlaygroundId    String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  creator             User                @relation("CreatedTeams", fields: [creatorId], references: [id])
  creatorId           String
  captain             User                @relation("CaptainOfTeams", fields: [captainId], references: [id])
  captainId           String              @unique
  members             User[]              @relation("TeamMembers")
  tournaments         Tournament[]        @relation("TeamTournaments")
  sponsors            Sponsor[]
  matchesAsTeam1      Match[]             @relation("Team1Matches")
  matchesAsTeam2      Match[]             @relation("Team2Matches")
  chat                Chat?
  leagueTeams         LeagueTeam[]
  applications        TeamApplication[]
  practices           TeamPractice[]
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())

  @@unique([fromId, toId])
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  game                    String
  description             String?
  type                    String // team, individual
  format                  String // single_elimination, round_robin, groups
  category                String
  location                String
  participantCount        Int
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  status                  TournamentStatus
  organizer               User                     @relation(fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]                   @relation("TeamTournaments")
  matches                 Match[]
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  announcements           TournamentAnnouncement[]
  judges                  User[]
  sponsors                Sponsor[]
  medicalPartners         MedicalPartner[]
}

model Match {
  id              String       @id @default(cuid())
  team1           Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournament      Tournament?  @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  playgroundId    String?
  location        String?
  refereeName     String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  referee         User?        @relation(fields: [refereeId], references: [id])
  refereeId       String?
  league          League?      @relation(fields: [leagueId], references: [id])
  leagueId        String?
}

model Chat {
  id           String    @id @default(cuid())
  type         ChatType
  name         String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  participants User[]
  messages     Message[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
}

model Message {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Report {
  id           String       @id @default(cuid())
  reason       String
  context      String
  status       ReportStatus @default(PENDING)
  createdAt    DateTime     @default(now())
  resolvedAt   DateTime?
  resolution   String?
  reporter     User         @relation("Reporter", fields: [reporterId], references: [id])
  reporterId   String
  reportedUser User         @relation("Reported", fields: [reportedUserId], references: [id])
  reportedUserId String
  resolver     User?        @relation("Resolver", fields: [resolverId], references: [id])
  resolverId   String?
}

model Playground {
  id                      String               @id @default(cuid())
  name                    String
  address                 String
  type                    String
  coverImage              String?
  coverImageHint          String?
  surface                 String
  features                String[]
  rating                  Float
  checkIns                Int
  status                  String // PENDING_MODERATION, APPROVED
  creator                 User                 @relation(fields: [creatorId], references: [id])
  creatorId               String
  reviews                 PlaygroundReview[]
  reports                 PlaygroundReport[]
  practices               TeamPractice[]
  matches                 Match[]              @relation(fields: [matchId], references: [id])
  matchId                 String?
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
}

model Sponsor {
  id          String       @id @default(cuid())
  name        String
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  teams       Team[]
  tournaments Tournament[]
  promotions  Promotion[]
}

model Challenge {
  id           String    @id @default(cuid())
  title        String
  description  String
  wager        Int
  status       String // OPEN, IN_PROGRESS, COMPLETED, CANCELLED
  result       String?
  creator      User      @relation(fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?     @relation(fields: [opponentId], references: [id])
  opponentId   String?
  discipline   Sport     @relation(fields: [disciplineId], references: [id])
  disciplineId String
  createdAt    DateTime  @default(now())
}

model Sport {
  id        String      @id @unique
  name      String
  icon      String
  category  String
  challenges Challenge[]
}

model CoachProfile {
  id             String    @id @default(cuid())
  user           User      @relation(fields: [userId], references: [id])
  userId         String    @unique
  specialization String
  description    String
  tags           String[]
  rating         Float
  price          Decimal
  createdAt      DateTime  @default(now())
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int    @default(0)
  wins     Int    @default(0)
  losses   Int    @default(0)
  draws    Int    @default(0)
  points   Int    @default(0)

  @@unique([leagueId, teamId])
}

model Promotion {
  id           String   @id @default(cuid())
  name         String
  description  String
  prize        String
  cost         String
  imageDataUri String
  imageHint    String
  endDate      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  organizer    User     @relation(fields: [organizerId], references: [id])
  organizerId  String
  sponsor      Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId    String?
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)
}

model TrainingProgram {
  id              String               @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean              @default(false)
  weeklySplit     WorkoutDay[]
  trainingLogs    TrainingLog[]
  trainingProposals TrainingProposal[]
}

model WorkoutDay {
  id              String              @id @default(cuid())
  day             Int
  title           String
  exercises       ExerciseInProgram[]
  trainingProgram TrainingProgram     @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
}

model ExerciseInProgram {
  id                      String      @id @default(cuid())
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
}

model LfgLobby {
  id           String       @id @default(cuid())
  type         LfgLobbyType
  sport        String
  location     String
  playgroundId String?
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  comment      String
  creator      User         @relation(fields: [creatorId], references: [id])
  creatorId    String
  players      User[]
}

model Measurement {
  id      String    @id @default(cuid())
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
  user    User      @relation(fields: [userId], references: [id])
  userId  String
}

model TrainingProposal {
  id        String           @id @default(cuid())
  from      User             @relation("SentTrainingProposals", fields: [fromId], references: [id])
  fromId    String
  to        User             @relation("ReceivedTrainingProposals", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  program   TrainingProgram? @relation(fields: [programId], references: [id])
  programId String?
  comment   String?
  status    String           @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime         @default(now())
}

model Poll {
  id       String       @id @default(cuid())
  title    String
  question String
  isActive Boolean      @default(true)
  createdAt DateTime    @default(now())
  options  PollOption[]
  votes    PollVote[]
}

model PollOption {
  id       String     @id @default(cuid())
  text     String
  poll     Poll       @relation(fields: [pollId], references: [id])
  pollId   String
  votes    PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@unique([userId, pollId])
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

model InventoryItem {
  id             String   @id @default(cuid())
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime @default(now())
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String         @unique
  category    String // Продукты, Спортивное питание
  image       String?
  imageHint   String?
  calories    Int // per 100g
  protein     Float // per 100g
  fat         Float // per 100g
  carbs       Float // per 100g
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String // Завтрак, Обед, Ужин, Перекус
  createdAt  DateTime @default(now())
}

model FaqItem {
  id       String @id @default(cuid())
  category String
  question String
  answer   String
  createdAt DateTime @default(now())
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
}

model MedicalPartner {
  id           String       @id @default(cuid())
  name         String
  specialization String
  contact      String
  avatar       String?
  avatarHint   String?
  tournaments  Tournament[]
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  createdAt    DateTime              @default(now())
}

model Activity {
  id           String      @id @default(cuid())
  type         ActivityType
  timestamp    DateTime    @default(now())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  metadata     Json
  playgroundId String?
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model GalleryItem {
  id         String   @id @default(cuid())
  src        String
  alt        String
  dataAiHint String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())
}

model CareerHistoryItem {
  id       String   @id @default(cuid())
  teamName String
  period   String
  role     String
  review   String
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  createdAt DateTime @default(now())
}

model TeamPractice {
  id           String     @id @default(cuid())
  title        String
  description  String?
  date         DateTime
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model TrainingLog {
  id            String           @id @default(cuid())
  date          DateTime
  workoutName   String
  status        String // planned, completed, skipped
  mood          String? // great, good, ok, bad
  notes         String?
  coachNotes    String?
  user          User             @relation(fields: [userId], references: [id])
  userId        String
  program       TrainingProgram? @relation(fields: [programId], references: [id])
  programId     String?
  exercises     LoggedExercise[]
}

model LoggedExercise {
  id            String        @id @default(cuid())
  trainingLog   TrainingLog   @relation(fields: [trainingLogId], references: [id])
  trainingLogId String
  exercise      Exercise      @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  notes         String?
  sets          LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean
}

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  loggedExercise LoggedExercise[]
}
