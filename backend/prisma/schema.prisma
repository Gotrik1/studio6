// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  ADMINISTRATOR @map("Администратор")
  MODERATOR     @map("Модератор")
  CAPTAIN       @map("Капитан")
  PLAYER        @map("Игрок")
  COACH         @map("Тренер")
  JUDGE         @map("Судья")
  MANAGER       @map("Менеджер")
  ORGANIZER     @map("Организатор")
  SPONSOR       @map("Спонсор")
  FAN           @map("Болельщик")
}

enum UserStatus {
  ACTIVE   @map("Активен")
  BANNED   @map("Забанен")
  INACTIVE @map("Неактивен")
}


// User and Profile Models
model User {
  id                        String                   @id @default(cuid())
  email                     String                   @unique
  name                      String
  passwordHash              String
  avatar                    String?
  role                      UserRole                 @default(PLAYER)
  status                    UserStatus               @default(ACTIVE)
  xp                        Int                      @default(0)
  isVerified                Boolean                  @default(false)
  location                  String?
  dateOfBirth               DateTime?
  mainSport                 String?
  preferredSports           String[]                 @default([])
  telegram                  String?
  discord                   String?
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  teamsAsMember             Team[]                   @relation("TeamMembers")
  teamsAsCaptain            Team[]                   @relation("TeamCaptain")
  createdTeams              Team[]                   @relation("TeamCreator")
  sentFriendRequests        FriendRequest[]          @relation("SentFriendRequests")
  receivedFriendRequests    FriendRequest[]          @relation("ReceivedFriendRequests")
  judgedMatches             Match[]                  @relation("JudgedMatches")
  refereedMatches           Match[]                  @relation("RefereeMatches")
  matchEvents               MatchEvent[]
  notifications             Notification[]
  sponsorships              Sponsorship[]
  sponsorshipOffers         SponsorshipOffer[]
  measurements              Measurement[]
  trainingLogs              TrainingLog[]
  createdChallenges         Challenge[]              @relation("CreatedChallenges")
  acceptedChallenges        Challenge[]              @relation("AcceptedChallenges")
  createdPlaygrounds        Playground[]
  reviews                   PlaygroundReview[]
  reportsSent               PlaygroundReport[]       @relation("ReportsSent")
  reportsReceived           Report[]                 @relation("ReportedUser")
  reportsResolved           Report[]                 @relation("Resolver")
  teamApplications          TeamApplication[]
  organizedTournaments      Tournament[]             @relation("OrganizedTournaments")
  judgedTournaments         Tournament[]             @relation("JudgedTournaments")
  organizedPromotions       Promotion[]
  achievements              UserAchievement[]
  createdLobbies            LfgLobby[]               @relation("CreatedLobbies")
  joinedLobbies             LfgLobby[]               @relation("JoinedLobbies")
  trainingPrograms          UserTrainingProgram[]
  sentTrainingProposals     TrainingProposal[]       @relation("SentProposals")
  receivedTrainingProposals TrainingProposal[]       @relation("ReceivedProposals")
  pollVotes                 PollVote[]
  sentAnnouncements         TournamentAnnouncement[]
  foodLog                   FoodLogEntry[]
  inventory                 InventoryItem[]
  activities                Activity[]
  friends                   User[]                   @relation("Friends")
  friendOf                  User[]                   @relation("Friends")
  careerHistory             CareerHistory[]
  coachProfile              CoachProfile?
}

model CareerHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String   @db.Text
  tags           String[]
  experience     String
  rating         Float    @default(0)
  price          Decimal  @default(0)
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@unique([fromId, toId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}


// Team Models
model Team {
  id                 String             @id @default(cuid())
  name               String             @unique
  motto              String?
  logo               String?
  dataAiHint         String?
  game               String
  description        String?            @db.Text
  pitch              String?            @db.Text
  seekingSponsorship Boolean            @default(false)
  slug               String             @unique
  rank               Int                @default(0)
  wins               Int                @default(0)
  losses             Int                @default(0)
  draws              Int                @default(0)
  creator            User               @relation("TeamCreator", fields: [creatorId], references: [id])
  creatorId          String
  captain            User               @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId          String
  members            User[]             @relation("TeamMembers")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]            @relation("Team1Matches")
  matchesAsTeam2     Match[]            @relation("Team2Matches")
  chat               Chat?
  practices          TeamPractice[]
  sponsorships       Sponsorship[]      @relation("SponsoredTeams")
  sponsorshipOffers  SponsorshipOffer[]
  applications       TeamApplication[]
  leagueTeams        LeagueTeam[]
  homePlayground     Playground?        @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?
  matchEvents        MatchEvent[]
}

model TeamPractice {
  id           String      @id @default(cuid())
  team         Team        @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground  @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

// Tournament and Match Models
model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  game                    String
  format                  String
  type                    String
  status                  String
  description             String?                  @db.Text
  rules                   String?                  @db.Text
  prizePool               String?
  location                String
  participantCount        Int
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  category                String?
  bannerImage             String?
  bannerImageHint         String?
  organizer               User                     @relation("OrganizedTournaments", fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
  judges                  User[]                   @relation("JudgedTournaments")
  sponsors                Sponsor[]                @relation("SponsoredTournaments")
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  applications            TeamApplication[]
  media                   TournamentMedia[]
}

model TournamentMedia {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type         String
  src          String
  description  String?
  hint         String?
  createdAt    DateTime   @default(now())
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Match {
  id              String       @id @default(cuid())
  team1           Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus  @default(PLANNED)
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournament      Tournament?  @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  league          League?      @relation(fields: [leagueId], references: [id])
  leagueId        String?
  referee         User?        @relation("RefereeMatches", fields: [refereeId], references: [id])
  refereeId       String?
  playgroundId    String?
  location        String?
  round           Int?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  events          MatchEvent[]
  judges          User[]       @relation("JudgedMatches")
}

model MatchEvent {
  id        String         @id @default(cuid())
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  team      Team           @relation(fields: [teamId], references: [id])
  teamId    String
  player    User           @relation(fields: [playerId], references: [id])
  playerId  String
  type      MatchEventType
  timestamp DateTime       @default(now())
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  SHOT
  SHOT_ON_TARGET
  CORNER
  FOUL
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

// Sponsor Models
model Sponsor {
  id                String             @id @default(cuid())
  name              String             @unique
  logo              String?
  logoHint          String?
  description       String
  profileUrl        String
  interests         String[]           @default([])
  tournaments       Tournament[]       @relation("SponsoredTournaments")
  teams             Team[]             @relation("SponsoredTeams")
  promotions        Promotion[]
  sponsorships      Sponsorship[]
  sponsorshipOffers SponsorshipOffer[]
}

// Playground Models
model Playground {
  id                 String               @id @default(cuid())
  name               String
  address              String
  type               String
  coverImage         String?
  coverImageHint     String?
  surface            String
  features           String[]             @default([])
  rating             Float                @default(0)
  checkIns           Int                  @default(0)
  status             PlaygroundStatus     @default(PENDING_MODERATION)
  creator            User                 @relation(fields: [creatorId], references: [id])
  creatorId          String
  reviews            PlaygroundReview[]
  reports            PlaygroundReport[]
  practices          TeamPractice[]
  lobbies            LfgLobby[]
  residentTeams      Team[]
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
  REJECTED
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String       @id @default(cuid())
  playground   Playground   @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User         @relation("ReportsSent", fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus @default(PENDING)
  createdAt    DateTime     @default(now())
}

// Report model for user reports
model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation(fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportedUser", fields: [reportedUserId], references: [id])
  reportedUserId String
  resolver       User?        @relation("Resolver", fields: [resolverId], references: [id])
  resolverId     String?
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  resolution     String?
  createdAt      DateTime     @default(now())
  resolvedAt     DateTime?
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

// Chat Models
model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]    @relation("UserChats")
  messages     Message[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
  createdAt    DateTime  @default(now())
}

enum ChatType {
  PRIVATE
  GROUP
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
}

// Application and Offer Models
model TeamApplication {
  id           String                  @id @default(cuid())
  team         Team                    @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                    @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?             @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  status       TeamApplicationStatus   @default(PENDING)
  message      String?
  createdAt    DateTime                @default(now())
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

model Sponsorship {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  amount    Decimal
  signedAt  DateTime @default(now())
}

model SponsorshipOffer {
  id        String                 @id @default(cuid())
  team      Team                   @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor                @relation(fields: [sponsorId], references: [id])
  sponsorId String
  user      User                   @relation(fields: [userId], references: [id])
  userId    String
  offerText String
  status    SponsorshipOfferStatus @default(PENDING)
  createdAt DateTime               @default(now())
}

enum SponsorshipOfferStatus {
  PENDING
  ACCEPTED
  DECLINED
}

// Gamification Models
model Achievement {
  id          String            @id @default(cuid())
  name        String            @unique
  description String
  icon        String
  users       UserAchievement[]
}

model UserAchievement {
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@id([userId, achievementId])
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  creator      User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  opponentId   String?
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  status       ChallengeStatus @default(OPEN)
  result       String?
  createdAt    DateTime        @default(now())
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// LFG Models
model LfgLobby {
  id            String         @id @default(cuid())
  creator       User           @relation("CreatedLobbies", fields: [creatorId], references: [id])
  creatorId     String
  players       User[]         @relation("JoinedLobbies")
  playground    Playground?    @relation(fields: [playgroundId], references: [id])
  playgroundId  String?
  type          LfgLobbyType
  sport         String
  location      String
  startTime     DateTime
  endTime       DateTime
  status        LfgLobbyStatus @default(OPEN)
  playersNeeded Int
  comment       String
  createdAt     DateTime       @default(now())
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

// Training & Nutrition Models
model UserTrainingProgram {
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  program   TrainingProgram @relation(fields: [programId], references: [id])
  programId String
  assignedAt DateTime        @default(now())
  isActive  Boolean         @default(true)

  @@id([userId, programId])
}

model TrainingProgram {
  id                String                @id @default(cuid())
  name              String
  description       String
  goal              String
  daysPerWeek       Int
  splitType         String
  author            String
  coverImage        String
  coverImageHint    String
  isAiGenerated     Boolean               @default(false)
  weeklySplit       WorkoutDay[]
  assignedToUsers   UserTrainingProgram[]
  trainingProposals TrainingProposal[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  day               Int
  title             String
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                     String      @id @default(cuid())
  name                   String
  sets                   String
  reps                   String
  plannedWeight          String?
  isSupersetWithPrevious Boolean?
  technique              String?
  workoutDay             WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId           String
}

model TrainingLog {
  id         String           @id @default(cuid())
  user       User             @relation(fields: [userId], references: [id])
  userId     String
  date       DateTime
  workoutName String?
  status     TrainingLogStatus @default(PLANNED)
  mood       Mood?
  notes      String?
  coachNotes String?
  exercises  LoggedExercise[]
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

model LoggedExercise {
  id                     String      @id @default(cuid())
  trainingLog            TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId          String
  exercise               Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId             String
  notes                  String?
  isSupersetWithPrevious Boolean?
  sets                   LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean        @default(false)
}

model Exercise {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json
  commonMistakes  Json
  alternatives    Json
  loggedExercises LoggedExercise[]
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String         @unique
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String
  createdAt  DateTime @default(now())
}

model Measurement {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  weight    Float
  bodyFat   Float?
  chest     Float?
  waist     Float?
  hips      Float?
  biceps    Float?
  thigh     Float?
  createdAt DateTime @default(now())
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)
}

// Polls
model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  votes     PollVote[]
  author    User?        @relation(fields: [authorId], references: [id])
  authorId  String?
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
}

model PollOption {
  id     String     @id @default(cuid())
  poll   Poll       @relation(fields: [pollId], references: [id])
  pollId String
  text   String
  votes  PollVote[]
}

model PollVote {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@id([userId, pollId])
}

// Notifications and Announcements
model Notification {
  id             String                  @id @default(cuid())
  user           User                    @relation(fields: [userId], references: [id])
  userId         String
  type           NotificationType
  message        String
  isRead         Boolean                 @default(false)
  href           String?
  matchId        String?
  announcement   TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
  announcementId String?                 @unique
  createdAt      DateTime                @default(now())
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  TEAM_INVITE
  TOURNAMENT_START
}

model TournamentAnnouncement {
  id            String         @id @default(cuid())
  tournament    Tournament     @relation(fields: [tournamentId], references: [id])
  tournamentId  String
  sender        User           @relation(fields: [senderId], references: [id])
  senderId      String
  subject       String
  message       String
  sentTo        Int
  createdAt     DateTime       @default(now())
  notifications Notification[]
}


// Misc
model Activity {
  id           String      @id @default(cuid())
  type         ActivityType
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  metadata     Json
  playground   Playground? @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  createdAt    DateTime    @default(now())
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model TrainingProposal {
  id        String                 @id @default(cuid())
  from      User                   @relation("SentProposals", fields: [fromId], references: [id])
  fromId    String
  to        User                   @relation("ReceivedProposals", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  status    TrainingProposalStatus @default(PENDING)
  program   TrainingProgram?       @relation(fields: [programId], references: [id])
  programId String?
  comment   String?
  createdAt DateTime               @default(now())
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Promotion {
  id           String   @id @default(cuid())
  name         String
  description  String
  prize        String
  cost         String
  imageDataUri String
  imageHint    String
  endDate      DateTime
  organizer    User     @relation(fields: [organizerId], references: [id])
  organizerId  String
  sponsor      Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId    String?
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int    @default(0)
  wins     Int    @default(0)
  draws    Int    @default(0)
  losses   Int    @default(0)
  points   Int    @default(0)

  @@id([leagueId, teamId])
}

model Sport {
  id           String      @id @default(cuid())
  name         String      @unique
  icon         String
  category     String
  challenges   Challenge[]
}
