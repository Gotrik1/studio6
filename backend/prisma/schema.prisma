
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ==============================================================================
// === User & Auth Models
// ==============================================================================
model User {
  id                        String                   @id @default(cuid())
  email                     String                   @unique
  name                      String
  passwordHash              String
  avatar                    String?
  role                      String                   @default("Игрок")
  status                    String                   @default("Активен")
  xp                        Int                      @default(0)
  dateOfBirth               DateTime?
  location                  String?
  mainSport                 String?
  isVerified                Boolean                  @default(false)
  preferredSports           String[]
  telegram                  String?
  discord                   String?
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  teamsAsCaptain            Team[]                   @relation("TeamCaptain")
  teamsAsMember             Team[]                   @relation("TeamMembers")
  createdTeams              Team[]                   @relation("TeamCreator")
  organizedTournaments      Tournament[]             @relation("TournamentOrganizer")
  judgedMatches             Match[]                  @relation("JudgedMatches")
  sponsorships              Sponsorship[]
  sponsorshipOffers         SponsorshipOffer[]
  trainingLogs              TrainingLog[]
  assignedTrainingPrograms  UserTrainingProgram[]
  matchEvents               MatchEvent[]
  createdChallenges         Challenge[]              @relation("CreatedChallenges")
  acceptedChallenges        Challenge[]              @relation("AcceptedChallenges")
  reportsSent               Report[]                 @relation("ReportsSent")
  reportsReceived           Report[]                 @relation("ReportsReceived")
  reportsResolved           Report[]                 @relation("ReportsResolved")
  careerHistory             CareerHistory[]
  coachProfile              CoachProfile?
  coaching                  User[]                   @relation("CoachingRelationship")
  coachedBy                 User[]                   @relation("CoachingRelationship")
  friends                   User[]                   @relation("Friendship")
  friendsOf                 User[]                   @relation("Friendship")
  sentFriendRequests        FriendRequest[]          @relation("SentFriendRequests")
  receivedFriendRequests    FriendRequest[]          @relation("ReceivedFriendRequests")
  measurements              Measurement[]
  trainingProposalsSent     TrainingProposal[]       @relation("ProposalsSent")
  trainingProposalsRcvd     TrainingProposal[]       @relation("ProposalsReceived")
  pollsVoted                PollVote[]
  createdPlaygrounds        Playground[]
  playgroundReviews         PlaygroundReview[]
  notifications             Notification[]
  sentAnnouncements         TournamentAnnouncement[]
  activities                Activity[]
  inventory                 InventoryItem[]
  foodLog                   FoodLogEntry[]
  lobbies                   LfgLobby[]               @relation("LobbyParticipants")
  createdLobbies            LfgLobby[]               @relation("LobbyCreator")
  judgedTournaments         Tournament[]             @relation("JudgedTournaments")
  messages                  Message[]
  chats                     Chat[]                   @relation("ChatParticipants")
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ==============================================================================
// === Team & Tournament Models
// ==============================================================================
model Team {
  id                   String                   @id @default(cuid())
  name                 String                   @unique
  slug                 String                   @unique
  game                 String
  motto                String?
  description          String?
  logo                 String?
  dataAiHint           String?
  rank                 Int                      @default(0)
  wins                 Int                      @default(0)
  losses               Int                      @default(0)
  draws                Int                      @default(0)
  seekingSponsorship   Boolean                  @default(false)
  pitch                String?
  creatorId            String
  captainId            String
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  creator              User                     @relation("TeamCreator", fields: [creatorId], references: [id])
  captain              User                     @relation("TeamCaptain", fields: [captainId], references: [id])
  members              User[]                   @relation("TeamMembers")
  tournaments          Tournament[]
  team1Matches         Match[]                  @relation("Team1Matches")
  team2Matches         Match[]                  @relation("Team2Matches")
  chat                 Chat?
  sponsorships         Sponsorship[]            @relation("SponsoredTeams")
  sponsorshipOffers    SponsorshipOffer[]
  homePlayground       Playground?              @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId     String?
  applications         TeamApplication[]
  matchEvents          MatchEvent[]
  practices            TeamPractice[]
  leagueTeams          LeagueTeam[]
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  game                    String
  description             String?
  type                    String
  format                  String
  category                String
  location                String
  participantCount        Int
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  status                  String
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  organizerId             String
  organizer               User                     @relation("TournamentOrganizer", fields: [organizerId], references: [id])
  teams                   Team[]
  matches                 Match[]
  sponsors                Sponsor[]                @relation("SponsoredTournaments")
  judges                  User[]                   @relation("JudgedTournaments")
  medicalPartners         MedicalPartner[]
  leagueId                String?
  league                  League?                  @relation(fields: [leagueId], references: [id])
  announcements           TournamentAnnouncement[]
  media                   TournamentMedia[]
}

model Match {
  id               String         @id @default(cuid())
  team1Id          String
  team2Id          String
  team1Score       Int?
  team2Score       Int?
  status           MatchStatus    @default(PLANNED)
  scheduledAt      DateTime
  finishedAt       DateTime?
  disputeReason    String?
  disputeOpenedAt  DateTime?
  resolution       String?
  refereeId        String?
  location         String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  team1            Team           @relation("Team1Matches", fields: [team1Id], references: [id])
  team2            Team           @relation("Team2Matches", fields: [team2Id], references: [id])
  tournamentId     String?
  tournament       Tournament?    @relation(fields: [tournamentId], references: [id])
  playgroundId     String?
  playground       Playground?    @relation(fields: [playgroundId], references: [id])
  events           MatchEvent[]
  leagueId         String?
  league           League?        @relation(fields: [leagueId], references: [id])
  referee          User?          @relation("JudgedMatches", fields: [refereeId], references: [id])
  notifications    Notification[]
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model MatchEvent {
  id        String         @id @default(cuid())
  matchId   String
  teamId    String
  playerId  String
  type      MatchEventType
  timestamp DateTime       @default(now())
  match     Match          @relation(fields: [matchId], references: [id])
  team      Team           @relation(fields: [teamId], references: [id])
  player    User           @relation(fields: [playerId], references: [id])
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  SHOT
  SHOT_ON_TARGET
  CORNER
  FOUL
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}

model Playground {
  id               String                @id @default(cuid())
  name             String
  address          String
  type             String
  coverImage       String?
  coverImageHint   String?
  surface          String
  features         String[]
  rating           Float
  checkIns         Int
  status           PlaygroundStatus
  creatorId        String
  creator          User                  @relation(fields: [creatorId], references: [id])
  matches          Match[]
  residentTeams    Team[]
  activities       Activity[]
  reports          PlaygroundReport[]
  reviews          PlaygroundReview[]
  practices        TeamPractice[]
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

model Sponsor {
  id          String             @id @default(cuid())
  name        String             @unique
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  tournaments Tournament[]       @relation("SponsoredTournaments")
  promotions  Promotion[]
  teams       Team[]             @relation("SponsoredTeams")
  offers      SponsorshipOffer[]
}

model Promotion {
  id            String   @id @default(cuid())
  name          String
  description   String
  prize         String
  sponsorId     String?
  organizerId   String
  imageDataUri  String
  imageHint     String
  cost          String
  endDate       DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  sponsor       Sponsor? @relation(fields: [sponsorId], references: [id])
  organizer     User     @relation(fields: [organizerId], references: [id])
}

model TeamApplication {
  id           String                  @id @default(cuid())
  teamId       String
  userId       String
  tournamentId String?
  message      String?
  status       TeamApplicationStatus   @default(PENDING)
  createdAt    DateTime                @default(now())
  team         Team                    @relation(fields: [teamId], references: [id])
  user         User                    @relation(fields: [userId], references: [id])
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model PlaygroundReport {
  id           String       @id @default(cuid())
  playgroundId String
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  playground   Playground   @relation(fields: [playgroundId], references: [id])
  reporter     User         @relation(fields: [reporterId], references: [id])
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playgroundId String
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
  author       User       @relation(fields: [authorId], references: [id])
  playground   Playground @relation(fields: [playgroundId], references: [id])
}

model Report {
  id              String       @id @default(cuid())
  reporterId      String
  reportedUserId  String
  resolverId      String?
  category        String
  description     String?
  status          ReportStatus @default(PENDING)
  resolution      String?
  createdAt       DateTime     @default(now())
  resolvedAt      DateTime?
  reporter        User         @relation("ReportsSent", fields: [reporterId], references: [id])
  reportedUser    User         @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  resolver        User?        @relation("ReportsResolved", fields: [resolverId], references: [id])
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model CareerHistory {
  id        String   @id @default(cuid())
  userId    String
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model CoachProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
  user           User     @relation(fields: [userId], references: [id])
}

model Sponsorship {
  id        String   @id @default(cuid())
  teamId    String
  sponsorId String
  amount    Float
  signedAt  DateTime @default(now())
  team      Team     @relation("SponsoredTeams", fields: [teamId], references: [id])
  sponsor   User     @relation(fields: [sponsorId], references: [id])
}

model SponsorshipOffer {
  id        String                @id @default(cuid())
  teamId    String
  sponsorId String
  offerText String
  status    TeamApplicationStatus @default(PENDING)
  createdAt DateTime              @default(now())
  team      Team                  @relation(fields: [teamId], references: [id])
  sponsor   Sponsor               @relation(fields: [sponsorId], references: [id])
}

model UserTrainingProgram {
  id         String          @id @default(cuid())
  userId     String
  programId  String
  assignedAt DateTime        @default(now())
  isActive   Boolean         @default(true)
  user       User            @relation(fields: [userId], references: [id])
  program    TrainingProgram @relation(fields: [programId], references: [id])

  @@unique([userId, programId])
}

model TrainingLog {
  id          String           @id @default(cuid())
  userId      String
  date        DateTime
  workoutName String?
  status      TrainingLogStatus
  notes       String?
  coachNotes  String?
  mood        Mood?
  exercises   LoggedExercise[]
  user        User             @relation(fields: [userId], references: [id])
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

model LoggedExercise {
  id                     String      @id @default(cuid())
  trainingLogId          String
  exerciseId             String
  notes                  String?
  isSupersetWithPrevious Boolean?
  trainingLog            TrainingLog @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
  exercise               Exercise    @relation(fields: [exerciseId], references: [id])
  sets                   LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean        @default(false)
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
}

model Measurement {
  id      String   @id @default(cuid())
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
  user    User     @relation(fields: [userId], references: [id])
}

model TrainingProposal {
  id           String                   @id @default(cuid())
  fromId       String
  toId         String
  sport        String
  date         DateTime
  comment      String?
  programId    String?
  status       TrainingProposalStatus   @default(PENDING)
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  from         User                     @relation("ProposalsSent", fields: [fromId], references: [id])
  to           User                     @relation("ProposalsReceived", fields: [toId], references: [id])
  program      TrainingProgram?         @relation(fields: [programId], references: [id])
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  authorId  String?
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  author    User?        @relation(fields: [authorId], references: [id])
  options   PollOption[]
  votes     PollVote[]
}

model PollOption {
  id    String     @id @default(cuid())
  pollId  String
  text    String
  poll    Poll       @relation(fields: [pollId], references: [id])
  votes   PollVote[]
}

model PollVote {
  userId       String
  pollId       String
  pollOptionId String
  votedAt      DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id])
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])

  @@id([userId, pollId])
}

model Notification {
  id             String                  @id @default(cuid())
  userId         String
  type           NotificationType
  message        String
  href           String?
  isRead         Boolean                 @default(false)
  createdAt      DateTime                @default(now())
  user           User                    @relation(fields: [userId], references: [id])
  matchId        String?
  match          Match?                  @relation(fields: [matchId], references: [id])
  announcementId String?
  announcement   TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  SYSTEM
}

model TournamentAnnouncement {
  id            String         @id @default(cuid())
  tournamentId  String
  senderId      String
  subject       String
  message       String
  sentTo        Int
  createdAt     DateTime       @default(now())
  tournament    Tournament     @relation(fields: [tournamentId], references: [id])
  sender        User           @relation(fields: [senderId], references: [id])
  notifications Notification[]
}

model InventoryItem {
  id             String   @id @default(cuid())
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])
}

model StoreItem {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String
  category    String
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  userId     String
  foodItemId String
  grams      Int
  meal       String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  leagueId String
  teamId   String
  played   Int    @default(0)
  wins     Int    @default(0)
  draws    Int    @default(0)
  losses   Int    @default(0)
  points   Int    @default(0)
  league   League @relation(fields: [leagueId], references: [id])
  team     Team   @relation(fields: [teamId], references: [id])
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}

model TeamPractice {
  id           String     @id @default(cuid())
  teamId       String
  playgroundId String
  title        String
  description  String?
  date         DateTime
  team         Team       @relation(fields: [teamId], references: [id])
  playground   Playground @relation(fields: [playgroundId], references: [id])
}

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  logged         LoggedExercise[]
}

model TrainingProgram {
  id              String                @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean               @default(false)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  weeklySplit     WorkoutDay[]
  assignedTo      UserTrainingProgram[]
  proposals       TrainingProposal[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgramId String
  day               Int
  title             String
  program           TrainingProgram   @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                     String      @id @default(cuid())
  workoutDayId           String
  name                   String
  sets                   String
  reps                   String
  plannedWeight          String?
  isSupersetWithPrevious Boolean?
  technique              String?
  day                    WorkoutDay  @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
}

model LfgLobby {
  id            String         @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  playgroundId  String?
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  creatorId     String
  status        LfgLobbyStatus @default(OPEN)
  createdAt     DateTime       @default(now())
  creator       User           @relation("LobbyCreator", fields: [creatorId], references: [id])
  players       User[]         @relation("LobbyParticipants")
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

model Sport {
  id         String      @id
  name       String
  icon       String
  category   String
  challenges Challenge[]
}

model Challenge {
  id           String   @id @default(cuid())
  title        String
  description  String
  wager        Int
  disciplineId String
  status       String
  result       String?
  creatorId    String
  opponentId   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  discipline   Sport    @relation(fields: [disciplineId], references: [id])
  creator      User     @relation("CreatedChallenges", fields: [creatorId], references: [id])
  opponent     User?    @relation("AcceptedChallenges", fields: [opponentId], references: [id])
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         String // DIRECT, GROUP
  participants User[]    @relation("ChatParticipants")
  messages     Message[]
  teamId       String?   @unique
  team         Team?     @relation(fields: [teamId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  authorId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chat      Chat     @relation(fields: [chatId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])
}

model TournamentMedia {
  id           String     @id @default(cuid())
  tournamentId String
  type         String // IMAGE, VIDEO, AUDIO
  src          String
  description  String?
  hint         String?
  createdAt    DateTime   @default(now())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}
