// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------
// ENUMS
// -----------------------------------------------------

enum UserRole {
  ADMIN       @map("Администратор")
  MODERATOR   @map("Модератор")
  CAPTAIN     @map("Капитан")
  PLAYER      @map("Игрок")
  COACH       @map("Тренер")
  JUDGE       @map("Судья")
  MANAGER     @map("Менеджер")
  ORGANIZER   @map("Организатор")
  SPONSOR     @map("Спонсор")
  FAN         @map("Болельщик")
}

enum UserStatus {
  ACTIVE    @map("Активен")
  BANNED    @map("Забанен")
  INACTIVE  @map("Неактивен")
}

// -----------------------------------------------------
// AUTH & USER MODELS
// -----------------------------------------------------
model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    UserRole                 @default(PLAYER)
  status                  UserStatus               @default(ACTIVE)
  xp                      Int                      @default(0)
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  preferredSports         String[]
  isVerified              Boolean                  @default(false)
  telegram                String?
  discord                 String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  
  // Relations
  organizedTournaments      Tournament[]             @relation("OrganizedTournaments")
  createdTeams              Team[]                   @relation("CreatedTeams")
  captainOfTeams            Team[]                   @relation("CaptainOfTeams")
  teamsAsMember             Team[]                   @relation("TeamMembers")
  createdPlaygrounds        Playground[]
  sentFriendRequests        FriendRequest[]          @relation("SentFriendRequests")
  receivedFriendRequests    FriendRequest[]          @relation("ReceivedFriendRequests")
  friends                   User[]                   @relation("Friends")
  friendOf                  User[]                   @relation("Friends")
  judgedTournaments         Tournament[]             @relation("JudgedTournaments")
  refereedMatches           Match[]                  @relation("RefereeMatches")
  trainingLogs              TrainingLog[]
  createdPromotions         Promotion[]
  sponsorships              Sponsorship[]
  sponsorshipOffers         SponsorshipOffer[]
  measurements              Measurement[]
  reportsSent               PlaygroundReport[]       @relation("ReportsSent")
  trainingProposalsSent     TrainingProposal[]       @relation("SentProposals")
  trainingProposalsReceived TrainingProposal[]       @relation("ReceivedProposals")
  pollVotes                 PollVote[]
  sentAnnouncements         TournamentAnnouncement[]
  careerHistory             CareerHistory[]
  coachProfile              CoachProfile?
  coaching                  User[]                   @relation("CoachStudents")
  coach                     User?                    @relation("CoachStudents", fields: [coachId], references: [id])
  coachId                   String?
  createdChallenges         Challenge[]              @relation("CreatedChallenges")
  acceptedChallenges        Challenge[]              @relation("AcceptedChallenges")
  chats                     Chat[]                   @relation("UserChats")
  messages                  Message[]
  notifications             Notification[]
  reportsAgainst            Report[]                 @relation("ReportedUser")
  reportsMade               Report[]                 @relation("Reporter")
  resolvedReports           Report[]                 @relation("Resolver")
  teamApplications          TeamApplication[]
  userAchievements          UserAchievement[]
  inventory                 InventoryItem[]
  foodLog                   FoodLogEntry[]
  activities                Activity[]
  createdLobbies            LfgLobby[]               @relation("CreatedLobbies")
  joinedLobbies             LfgLobby[]               @relation("JoinedLobbies")
  assignedTrainingPrograms  UserTrainingProgram[]
  matchEvents               MatchEvent[]
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@unique([fromId, toId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}


// -----------------------------------------------------
// TEAM & TOURNAMENT MODELS
// -----------------------------------------------------

model Team {
  id                 String             @id @default(cuid())
  name               String             @unique
  slug               String             @unique
  motto              String?
  logo               String?
  dataAiHint         String?
  game               String
  rank               Int                @default(0)
  wins               Int                @default(0)
  losses             Int                @default(0)
  draws              Int                @default(0)
  seekingSponsorship Boolean            @default(false)
  pitch              String?
  
  // Relations
  creator          User               @relation("CreatedTeams", fields: [creatorId], references: [id])
  creatorId        String
  captain          User               @relation("CaptainOfTeams", fields: [captainId], references: [id])
  captainId        String
  members          User[]             @relation("TeamMembers")
  tournaments      Tournament[]
  matchesAsTeam1   Match[]            @relation("Team1Matches")
  matchesAsTeam2   Match[]            @relation("Team2Matches")
  matchEvents      MatchEvent[]
  sponsorships     Sponsorship[]      @relation("SponsoredTeams")
  sponsorshipOffers SponsorshipOffer[]
  homePlayground     Playground?        @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?
  teamPractices    TeamPractice[]
  applications     TeamApplication[]
  chat             Chat?
  leagues          LeagueTeam[]
}

model TeamPractice {
    id String @id @default(cuid())
    team Team @relation(fields: [teamId], references: [id])
    teamId String
    title String
    description String?
    date DateTime
    playground Playground @relation(fields: [playgroundId], references: [id])
    playgroundId String
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  description             String?
  game                    String
  status                  TournamentStatus         @default(REGISTRATION)
  format                  TournamentFormat
  type                    TournamentType
  category                String
  location                String
  participantCount        Int
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt

  // Relations
  organizer               User                     @relation("OrganizedTournaments", fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
  judges                  User[]                   @relation("JudgedTournaments")
  sponsors                Sponsor[]                @relation("SponsoredTournaments")
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  applications            TeamApplication[]
  media                   TournamentMedia[]
  league                  League?                  @relation(fields: [leagueId], references: [id])
  leagueId                String?
}

model TournamentMedia {
    id String @id @default(cuid())
    tournament Tournament @relation(fields: [tournamentId], references: [id])
    tournamentId String
    type MediaType
    src String
    description String?
    hint String?
    createdAt DateTime @default(now())
}

enum MediaType {
    IMAGE
    VIDEO
    AUDIO
}


model Match {
  id              String       @id @default(cuid())
  team1           Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  round           Int?
  location        String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  
  // Relations
  tournament      Tournament?  @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  leagueId        String?
  league          League?      @relation(fields: [leagueId], references: [id])
  referee         User?        @relation("RefereeMatches", fields: [refereeId], references: [id])
  refereeId       String?
  events          MatchEvent[]
}

model MatchEvent {
  id        String         @id @default(cuid())
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  team      Team           @relation(fields: [teamId], references: [id])
  teamId    String
  player    User           @relation(fields: [playerId], references: [id])
  playerId  String
  type      MatchEventType
  timestamp DateTime       @default(now())
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

enum TournamentFormat {
  SINGLE_ELIMINATION
  ROUND_ROBIN
  GROUPS
}

enum TournamentType {
  TEAM
  INDIVIDUAL
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}


// -----------------------------------------------------
// SPONSORSHIP MODELS
// -----------------------------------------------------

model Sponsor {
  id          String       @id @default(cuid())
  name        String       @unique
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]

  // Relations
  tournaments     Tournament[] @relation("SponsoredTournaments")
  teams           Team[]       @relation("SponsoredTeams")
  promotions      Promotion[]
  sponsorships    Sponsorship[]
  offersSent      SponsorshipOffer[]
}

model Promotion {
  id            String   @id @default(cuid())
  name          String
  description   String
  prize         String
  cost          String
  imageDataUri  String
  imageHint     String
  endDate       DateTime
  
  // Relations
  organizer     User     @relation(fields: [organizerId], references: [id])
  organizerId   String
  sponsor       Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId     String?
}

// -----------------------------------------------------
// PLAYGROUND MODELS
// -----------------------------------------------------

model Playground {
  id                String             @id @default(cuid())
  name              String
  address           String
  type              String
  coverImage        String?
  coverImageHint    String?
  surface           String
  features          String[]
  rating            Float
  checkIns          Int
  status            PlaygroundStatus

  // Relations
  creator           User               @relation(fields: [creatorId], references: [id])
  creatorId         String
  matches           Match[]
  reports           PlaygroundReport[]
  reviews           PlaygroundReview[]
  homeTeams         Team[]
  lobbies           LfgLobby[]
  teamPractices     TeamPractice[]
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id            String       @id @default(cuid())
  playground    Playground   @relation(fields: [playgroundId], references: [id])
  playgroundId  String
  reporter      User         @relation("ReportsSent", fields: [reporterId], references: [id])
  reporterId    String
  category      String
  comment       String
  severity      String
  summary       String
  status        ReportStatus
  createdAt     DateTime     @default(now())
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

// -----------------------------------------------------
// GAMIFICATION & SOCIAL MODELS
// -----------------------------------------------------

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  status       ChallengeStatus
  result       String?
  
  // Relations
  creator      User            @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  opponentId   String?
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  createdAt    DateTime        @default(now())
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model LfgLobby {
  id            String         @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  status        LfgLobbyStatus @default(OPEN)

  // Relations
  creator      User         @relation("CreatedLobbies", fields: [creatorId], references: [id])
  creatorId    String
  players      User[]       @relation("JoinedLobbies")
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId String?
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

// -----------------------------------------------------
// COMMUNICATION MODELS
// -----------------------------------------------------
model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]    @relation("UserChats")
  messages     Message[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChatType {
  PRIVATE
  GROUP
}


// -----------------------------------------------------
// MISC MODELS
// -----------------------------------------------------

model Sponsorship {
    id String @id @default(cuid())
    team Team @relation(fields: [teamId], references: [id])
    teamId String
    sponsor Sponsor @relation(fields: [sponsorId], references: [id])
    sponsorId String
    amount Decimal
    signedAt DateTime @default(now())
    user User @relation(fields: [userId], references: [id])
    userId String
}

model SponsorshipOffer {
    id String @id @default(cuid())
    team Team @relation(fields: [teamId], references: [id])
    teamId String
    sponsor Sponsor @relation(fields: [sponsorId], references: [id])
    sponsorId String
    offerText String
    status SponsorshipOfferStatus @default(PENDING)
    user User @relation(fields: [userId], references: [id])
    userId String
}

enum SponsorshipOfferStatus {
  PENDING
  ACCEPTED
  DECLINED
}


model TeamApplication {
  id           String                  @id @default(cuid())
  team         Team                    @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                    @relation(fields: [userId], references: [id])
  userId       String
  message      String?
  status       TeamApplicationStatus   @default(PENDING)
  tournament   Tournament?             @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("Reporter", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportedUser", fields: [reportedUserId], references: [id])
  reportedUserId String
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  resolver       User?        @relation("Resolver", fields: [resolverId], references: [id])
  resolverId     String?
  resolution     String?
  createdAt      DateTime     @default(now())
  resolvedAt     DateTime?
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model UserTrainingProgram {
    user User @relation(fields: [userId], references: [id])
    userId String
    program TrainingProgram @relation(fields: [programId], references: [id])
    programId String
    assignedAt DateTime @default(now())
    isActive Boolean @default(true)

    @@id([userId, programId])
}

model Notification {
  id             String           @id @default(cuid())
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  type           NotificationType
  message        String
  href           String?
  isRead         Boolean          @default(false)
  createdAt      DateTime         @default(now())
  
  announcement TournamentAnnouncement? @relation(fields: [announcementId], references: [id])
  announcementId String?
  
  matchId String? // For linking to match results
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  TEAM_INVITE
  OTHER
}

model CareerHistory {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    teamName  String
    period    String
    role      String
    review    String
    createdAt DateTime @default(now())
}

model UserAchievement {
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@id([userId, achievementId])
}

model Achievement {
  id          String            @id @default(cuid())
  name        String
  description String
  icon        String
  users       UserAchievement[]
}

model Sport {
  id         String      @id @unique
  name       String
  icon       String
  category   String
  challenges Challenge[]
}

model League {
    id String @id @default(cuid())
    name String
    description String
    game String
    image String?
    imageHint String?
    teams LeagueTeam[]
    matches Match[]
    tournaments Tournament[]
}

model LeagueTeam {
    league League @relation(fields: [leagueId], references: [id])
    leagueId String
    team Team @relation(fields: [teamId], references: [id])
    teamId String
    played Int
    wins Int
    draws Int
    losses Int
    points Int

    @@id([leagueId, teamId])
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  votes     PollVote[]
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  author    User?        @relation(fields: [authorId], references: [id])
  authorId  String?
}

model PollOption {
  id      String     @id @default(cuid())
  poll    Poll       @relation(fields: [pollId], references: [id])
  pollId  String
  text    String
  votes   PollVote[]
}

model PollVote {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@id([userId, pollId])
}

model TournamentAnnouncement {
    id        String   @id @default(cuid())
    tournament Tournament @relation(fields: [tournamentId], references: [id])
    tournamentId String
    sender    User     @relation(fields: [senderId], references: [id])
    senderId  String
    subject   String
    message   String
    sentTo    Int
    createdAt DateTime @default(now())
    notifications Notification[]
}


model Activity {
    id String @id @default(cuid())
    type ActivityType
    user User @relation(fields: [userId], references: [id])
    userId String
    metadata Json
    createdAt DateTime @default(now())
    playgroundId String?
}

enum ActivityType {
    STATUS_POSTED
    MATCH_PLAYED
    TEAM_JOINED
    TOURNAMENT_REGISTERED
    ACHIEVEMENT_UNLOCKED
    PLAYGROUND_CHECK_IN
}


model TrainingProposal {
    id String @id @default(cuid())
    from User @relation("SentProposals", fields: [fromId], references: [id])
    fromId String
    to User @relation("ReceivedProposals", fields: [toId], references: [id])
    toId String
    sport String
    date DateTime
    comment String?
    status TrainingProposalStatus @default(PENDING)
    program TrainingProgram? @relation(fields: [programId], references: [id])
    programId String?
    createdAt DateTime @default(now())
}

enum TrainingProposalStatus {
    PENDING
    ACCEPTED
    DECLINED
}

// TRAINING
model TrainingProgram {
  id             String                @id @default(cuid())
  name           String
  description    String
  goal           String
  daysPerWeek    Int
  splitType      String
  author         String
  coverImage     String
  coverImageHint String
  isAiGenerated  Boolean               @default(false)
  weeklySplit    WorkoutDay[]
  assignedUsers  UserTrainingProgram[]
  trainingProposals TrainingProposal[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model TrainingLog {
  id          String           @id @default(cuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  workoutName String?
  status      TrainingLogStatus
  exercises   LoggedExercise[]
  mood        Mood?
  notes       String?
  coachNotes  String?
}

model LoggedExercise {
  id             String      @id @default(cuid())
  trainingLog    TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId  String
  exercise       Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId     String
  notes          String?
  isSupersetWithPrevious Boolean?
  sets           LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Int?
  isCompleted      Boolean
}

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  logged         LoggedExercise[]
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model FoodItem {
  id           String         @id @default(cuid())
  name         String         @unique
  category     String
  image        String?
  imageHint    String?
  calories     Float
  protein      Float
  fat          Float
  carbs        Float
  description  String?
  loggedEntries FoodLogEntry[]
}

model FoodLogEntry {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  foodItem    FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId  String
  grams       Int
  meal        String
  createdAt   DateTime @default(now())
}

model InventoryItem {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    name String
    category String
    type String
    purchaseDate DateTime
    lifespanMonths Int
    image String?
    imageHint String?
    createdAt DateTime @default(now())
}

model StoreItem {
    id String @id @default(cuid())
    name String
    description String
    price Float
    image String?
    imageHint String?
    category String
    isRealMoney Boolean @default(false)
}

model Measurement {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    date DateTime
    weight Float
    bodyFat Float?
    chest Float?
    waist Float?
    hips Float?
    biceps Float?
    thigh Float?
}

model MedicalPartner {
    id String @id @default(cuid())
    name String
    specialization String
    contact String
    avatar String?
    avatarHint String?
    tournaments Tournament[]
}
