datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ==============================================================================
// === Основные сущности (Пользователи, Команды, Матчи, Турниры)
// ==============================================================================

model User {
  id                        String                     @id @default(cuid())
  name                      String
  email                     String                     @unique
  passwordHash              String
  avatar                    String?
  role                      Role
  status                    UserStatus
  xp                        Int                        @default(0)
  location                  String?
  mainSport                 String?
  isVerified                Boolean                    @default(false)
  dateOfBirth               DateTime?
  preferredSports           String[]
  telegram                  String?
  discord                   String?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  teamsAsCaptain            Team[]                     @relation("Captain")
  teamsAsMember             Team[]                     @relation("TeamMembers")
  organizedTournaments      Tournament[]
  createdChallenges         Challenge[]                @relation("Creator")
  acceptedChallenges        Challenge[]                @relation("Opponent")
  createdPlaygrounds        Playground[]               @relation("CreatedPlaygrounds")
  reviews                   PlaygroundReview[]
  reports                   PlaygroundReport[]
  reportedOtherUsers        Report[]                   @relation("ReportedBy")
  reportsAboutUser          Report[]                   @relation("ReportedUser")
  createdFriendRequests     FriendRequest[]            @relation("FromUser")
  receivedFriendRequests    FriendRequest[]            @relation("ToUser")
  friends                   User[]                     @relation("Friends")
  friendOf                  User[]                     @relation("Friends")
  teamApplications          TeamApplication[]
  sentAnnouncements         TournamentAnnouncement[]
  notifications             Notification[]
  judgedMatches             Match[]                    @relation("JudgedMatches")
  createdActivities         Activity[]
  trainingLogs              TrainingLog[]
  measurements              Measurement[]
  inventoryItems            InventoryItem[]
  organizedPromotions       Promotion[]
  createdTrainingProposals  TrainingProposal[]         @relation("TrainingFromUser")
  receivedTrainingProposals TrainingProposal[]         @relation("TrainingToUser")
  coachProfile              CoachProfile?
  coaching                  User[]                     @relation("CoachStudents")
  coachId                   String?
  coach                     User?                      @relation("CoachStudents", fields: [coachId], references: [id])
  pollVotes                 PollVote[]
  foodLogEntries            FoodLogEntry[]
}

model Team {
  id                 String              @id @default(cuid())
  name               String
  slug               String              @unique
  game               String
  motto              String?
  logo               String?
  dataAiHint         String?
  rank               Int                 @default(1)
  wins               Int                 @default(0)
  losses             Int                 @default(0)
  draws              Int                 @default(0)
  seekingSponsorship Boolean             @default(false)
  description        String?
  goals              String?
  homePlaygroundId   String?
  creatorId          String
  captainId          String
  creator            User                @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  captain            User                @relation("Captain", fields: [captainId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  members            User[]              @relation("TeamMembers")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]             @relation("Team1")
  matchesAsTeam2     Match[]             @relation("Team2")
  sponsors           Sponsor[]
  applications       TeamApplication[]
  chat               Chat?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  teamPractices      TeamPractice[]
  leagueTeams        LeagueTeam[]
}

model Match {
  id              String       @id @default(cuid())
  team1Id         String
  team2Id         String
  team1           Team         @relation("Team1", fields: [team1Id], references: [id], onDelete: Cascade)
  team2           Team         @relation("Team2", fields: [team2Id], references: [id], onDelete: Cascade)
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  tournamentId    String?
  tournament      Tournament?  @relation(fields: [tournamentId], references: [id], onDelete: SetNull)
  events          MatchEvent[]
  scheduledAt     DateTime?
  startedAt       DateTime?
  finishedAt      DateTime?
  location        String?
  playgroundId    String?
  playground      Playground?  @relation(fields: [playgroundId], references: [id], onDelete: SetNull)
  judges          User[]       @relation("JudgedMatches")
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  refereeName     String?
  leagueId        String?
  league          League?      @relation(fields: [leagueId], references: [id], onDelete: SetNull)
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  description           String?
  status                TournamentStatus
  game                  String
  type                  TournamentType
  format                TournamentFormat
  participantCount      Int
  category              String
  location              String
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  organizerId           String
  organizer             User                     @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  teams                 Team[]
  matches               Match[]
  announcements         TournamentAnnouncement[]
  sponsors              Sponsor[]
  judges                User[]
  medicalPartners       MedicalPartner[]
  media                 TournamentMedia[]
  applications          TeamApplication[]        @relation("TournamentApplications")
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  leagueId              String?
  league                League?                  @relation(fields: [leagueId], references: [id], onDelete: SetNull)
}


// ==============================================================================
// === Местоположения (Площадки, Залы)
// ==============================================================================

model Playground {
  id                String                 @id @default(cuid())
  name              String
  address           String
  type              String
  coverImage        String?
  coverImageHint    String?
  surface           String
  features          String[]
  rating            Float                  @default(0)
  checkIns          Int                    @default(0)
  status            PlaygroundStatus       @default(PENDING_MODERATION)
  creatorId         String
  creator           User                   @relation("CreatedPlaygrounds", fields: [creatorId], references: [id], onDelete: Cascade)
  matches           Match[]
  reviews           PlaygroundReview[]
  reports           PlaygroundReport[]
  checkInActivities Activity[]
  teamPractices     TeamPractice[]
  lfgLobbies        LfgLobby[]
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
}


// ==============================================================================
// === Социальные сущности (Друзья, Чат, Активность)
// ==============================================================================

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("FromUser", fields: [fromId], references: [id], onDelete: Cascade)
  fromId    String
  to        User     @relation("ToUser", fields: [toId], references: [id], onDelete: Cascade)
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         ChatType
  participants User[]
  messages     Message[]
  teamId       String?   @unique
  team         Team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
}

model Message {
  id        String   @id @default(cuid())
  text      String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime @default(now())
}

model Activity {
  id           String     @id @default(cuid())
  type         ActivityType
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  metadata     Json
  playgroundId String?
  playground   Playground? @relation(fields: [playgroundId], references: [id], onDelete: SetNull)
  timestamp    DateTime   @default(now())
}

// ==============================================================================
// === Тренировки и Здоровье
// ==============================================================================

model TrainingProgram {
  id              String             @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean            @default(false)
  weeklySplit     WorkoutDay[]
  trainingProposals TrainingProposal[]
}

model WorkoutDay {
  id              String             @id @default(cuid())
  program         TrainingProgram    @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId       String
  day             Int
  title           String
  exercises       ExerciseInProgram[]
}

model ExerciseInProgram {
  id                      String      @id @default(cuid())
  day                     WorkoutDay  @relation(fields: [dayId], references: [id], onDelete: Cascade)
  dayId                   String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

model Exercise {
  id               String            @id @default(cuid())
  name             String            @unique
  description      String
  category         String
  equipment        String
  image            String?
  imageHint        String?
  videoUrl         String?
  techniqueTips    Json
  commonMistakes   Json
  alternatives     Json
  loggedExercises  LoggedExercise[]
}

model TrainingLog {
  id          String           @id @default(cuid())
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  date        DateTime
  workoutName String
  status      String // completed, planned, skipped
  mood        String? // great, good, ok, bad
  notes       String?
  coachNotes  String?
  exercises   LoggedExercise[]
}

model LoggedExercise {
  id            String         @id @default(cuid())
  trainingLog   TrainingLog    @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
  trainingLogId String
  exercise      Exercise       @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  notes         String?
  sets          LoggedSet[]
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
  loggedExerciseId String
  plannedReps      String
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int?
  isCompleted      Boolean        @default(false)
}

model Measurement {
  id      String   @id @default(cuid())
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

model TrainingProposal {
  id         String           @id @default(cuid())
  from       User             @relation("TrainingFromUser", fields: [fromId], references: [id], onDelete: Cascade)
  fromId     String
  to         User             @relation("TrainingToUser", fields: [toId], references: [id], onDelete: Cascade)
  toId       String
  sport      String
  date       DateTime
  comment    String?
  status     String           @default("PENDING") // PENDING, ACCEPTED, DECLINED
  programId  String?
  program    TrainingProgram? @relation(fields: [programId], references: [id], onDelete: SetNull)
  createdAt  DateTime         @default(now())
}

model NutritionPlan {
  id            String   @id @default(cuid())
  userId        String   @unique
  dailyCalories Int
  protein       Int
  fat           Int
  carbs         Int
  createdAt     DateTime @default(now())
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String
  category    String
  image       String?
  imageHint   String?
  calories    Int
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  foodItem    FoodItem @relation(fields: [foodItemId], references: [id], onDelete: Cascade)
  foodItemId  String
  grams       Int
  meal        String // Завтрак, Обед, Ужин, Перекус
  createdAt   DateTime @default(now())
}


// ==============================================================================
// === Геймификация и Экономика
// ==============================================================================

model Challenge {
  id            String      @id @default(cuid())
  title         String
  description   String
  wager         Int
  disciplineId  String
  discipline    Sport       @relation(fields: [disciplineId], references: [id])
  creatorId     String
  creator       User        @relation("Creator", fields: [creatorId], references: [id], onDelete: Cascade)
  opponentId    String?
  opponent      User?       @relation("Opponent", fields: [opponentId], references: [id], onDelete: SetNull)
  status        String      // OPEN, IN_PROGRESS, COMPLETED, CANCELLED
  result        String?
  createdAt     DateTime    @default(now())
}

model Quest {
  id          String    @id @default(cuid())
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  type        QuestType
  createdAt   DateTime  @default(now())
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model Poll {
  id        String      @id @default(cuid())
  title     String
  question  String
  isActive  Boolean     @default(true)
  options   PollOption[]
  votes     PollVote[]
  createdAt DateTime    @default(now())
}

model PollOption {
  id     String     @id @default(cuid())
  poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String
  text   String
  votes  PollVote[]
}

model PollVote {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@id([userId, pollId])
}

model FaqItem {
    id        String @id @default(cuid())
    category  String
    question  String
    answer    String
    createdAt DateTime @default(now())
}

// ==============================================================================
// === Вспомогательные и связующие сущности
// ==============================================================================

model TeamApplication {
  id           String      @id @default(cuid())
  team         Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  message      String?
  tournamentId String?
  tournament   Tournament? @relation("TournamentApplications", fields: [tournamentId], references: [id], onDelete: SetNull)
  status       TeamApplicationStatus @default(PENDING)
  createdAt    DateTime    @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  type      String
  href      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Report {
  id             String       @id @default(cuid())
  reporterId     String
  reporter       User         @relation("ReportedBy", fields: [reporterId], references: [id], onDelete: Cascade)
  reportedUserId String
  reportedUser   User         @relation("ReportedUser", fields: [reportedUserId], references: [id], onDelete: Cascade)
  reason         String
  context        String
  status         ReportStatus @default(PENDING)
  resolution     String?
  resolverId     String?
  resolvedAt     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model PlaygroundReport {
  id           String         @id @default(cuid())
  playground   Playground     @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  playgroundId String
  reporter     User           @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  reporterId   String
  category     String
  comment      String
  status       ReportStatus
  severity     ReportSeverity
  summary      String
  createdAt    DateTime       @default(now())
}

model LfgLobby {
  id           String     @id @default(cuid())
  creator      User       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId    String
  type         LfgLobbyType
  sport        String
  location     String
  playgroundId String?
  playground   Playground? @relation(fields: [playgroundId], references: [id], onDelete: SetNull)
  startTime    DateTime
  endTime      DateTime
  playersNeeded Int
  players      User[]
  comment      String
  createdAt    DateTime   @default(now())
}

model Sport {
  id         String      @id
  name       String
  icon       String
  category   String
  challenges Challenge[]
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String
  imageHint   String
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId   String
  played   Int
  wins     Int
  losses   Int
  draws    Int
  points   Int
}

model Sponsor {
  id          String       @id @default(cuid())
  name        String
  logo        String
  logoHint    String
  description String
  profileUrl  String
  interests   String[]
  teams       Team[]
  tournaments Tournament[]
  promotions  Promotion[]
}

model Promotion {
  id          String   @id @default(cuid())
  name        String
  description String
  prize       String
  sponsorId   String?
  sponsor     Sponsor? @relation(fields: [sponsorId], references: [id], onDelete: SetNull)
  organizerId String
  organizer   User     @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  imageDataUri String
  imageHint   String
  endDate     DateTime
  cost        String
  createdAt   DateTime @default(now())
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}

// ==============================================================================
// === ENUMS
// ==============================================================================

enum Role {
  Игрок
  Капитан
  Тренер
  Судья
  Менеджер
  Организатор
  Спонсор
  Болельщик
  Администратор
  Модератор
}

enum UserStatus {
  Активен
  Забанен
  Неактивен
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

enum TournamentType {
  team
  individual
}

enum TournamentFormat {
  single_elimination
  round_robin
  groups
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
  REJECTED
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum ReportSeverity {
  LOW
  MEDIUM
  HIGH
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}
