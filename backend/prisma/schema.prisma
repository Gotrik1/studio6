// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                @id @default(cuid())
  email                   String                @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    String                @default("Игрок")
  status                  String                @default("Активен")
  xp                      Int                   @default(0)
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  teamsAsCaptain          Team[]                @relation("TeamCaptain")
  teamsAsCreator          Team[]                @relation("TeamCreator")
  teamsAsMember           Team[]                @relation("TeamMembers")
  organizedTournaments    Tournament[]
  organizedPromotions     Promotion[]
  gallery                 GalleryItem[]
  careerHistory           CareerHistoryItem[]
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  isVerified              Boolean               @default(false)
  preferredSports         String[]
  telegram                String?
  discord                 String?
  friends                 User[]                @relation("Friendship")
  friendOf                User[]                @relation("Friendship")
  sentFriendRequests      FriendRequest[]       @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]       @relation("ReceivedFriendRequests")
  activities              Activity[]
  notifications           Notification[]
  coaching                User[]                @relation("CoachRelation")
  coach                   User?                 @relation("CoachRelation", fields: [coachId], references: [id])
  coachId                 String?
  judgedMatches           Match[]               @relation("MatchReferee")
  measurements            Measurement[]
  trainingLogs            TrainingLog[]
  foodLogEntries          FoodLogEntry[]
  trainingProposalsSent     TrainingProposal[]    @relation("TrainingProposalsFrom")
  trainingProposalsReceived TrainingProposal[]    @relation("TrainingProposalsTo")
  pollVotes               PollVote[]
}

model Team {
  id                 String       @id @default(cuid())
  name               String       @unique
  slug               String       @unique
  game               String
  motto              String?
  description        String?
  logo               String?
  dataAiHint         String?
  creator            User         @relation("TeamCreator", fields: [creatorId], references: [id])
  creatorId          String
  captain            User         @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId          String
  members            User[]       @relation("TeamMembers")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]      @relation("Team1Matches")
  matchesAsTeam2     Match[]      @relation("Team2Matches")
  wins               Int          @default(0)
  losses             Int          @default(0)
  draws              Int          @default(0)
  rank               Int          @default(0)
  homePlaygroundId   String?
  seekingSponsorship Boolean      @default(false)
  sponsors           Sponsor[]
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model Tournament {
  id                      String        @id @default(cuid())
  name                    String
  slug                    String        @unique
  game                    String
  description             String?
  format                  String
  status                  String
  type                    String
  category                String
  location                String
  participantCount        Int
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  organizer               User          @relation(fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
  league                  League?       @relation(fields: [leagueId], references: [id])
  leagueId                String?
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
}

model Match {
  id           String      @id @default(cuid())
  team1        Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id      String
  team2        Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id      String
  team1Score   Int?
  team2Score   Int?
  status       MatchStatus @default(PLANNED)
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  league       League?     @relation(fields: [leagueId], references: [id])
  leagueId     String?
  scheduledAt  DateTime
  finishedAt   DateTime?
  location     String?
  referee      User?       @relation("MatchReferee", fields: [refereeId], references: [id])
  refereeId    String?
  refereeName  String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
}

model Activity {
  id        String   @id @default(cuid())
  type      ActivityType
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  metadata  Json
  timestamp DateTime @default(now())
}

enum ActivityType {
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  type      String
  isRead    Boolean  @default(false)
  href      String?
  createdAt DateTime @default(now())
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)
}

model Playground {
  id             String    @id @default(cuid())
  name           String
  address        String
  type           String
  coverImage     String?
  coverImageHint String?
  surface        String
  features       String[]
  rating         Float
  checkIns       Int
  status         String    @default("PENDING_MODERATION") // PENDING_MODERATION, APPROVED, REJECTED
  creatorId      String
  creator        User      @relation(fields: [creatorId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Sponsor {
  id          String   @id @default(cuid())
  name        String   @unique
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]
  teams       Team[]
  promotions  Promotion[]
}

model Promotion {
    id String @id @default(cuid())
    name String
    description String
    prize String
    cost String
    imageDataUri String
    imageHint String
    endDate DateTime
    organizer User @relation(fields: [organizerId], references: [id])
    organizerId String
    sponsor Sponsor? @relation(fields: [sponsorId], references: [id])
    sponsorId String?
    createdAt DateTime @default(now())
}

model League {
    id String @id @default(cuid())
    name String
    description String
    game String
    image String?
    imageHint String?
    teams LeagueTeam[]
    matches Match[]
    tournaments Tournament[]
}

model LeagueTeam {
    id String @id @default(cuid())
    league League @relation(fields: [leagueId], references: [id])
    leagueId String
    team Team @relation(fields: [teamId], references: [id])
    teamId String
    played Int
    wins Int
    losses Int
    draws Int
    points Int
}

model LfgLobby {
  id            String       @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  playgroundId  String?
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  creator       User         @relation(fields: [creatorId], references: [id])
  creatorId     String
  players       User[]
  createdAt     DateTime     @default(now())
}

enum LfgLobbyType {
  GAME
  TRAINING
}

model Measurement {
    id String @id @default(cuid())
    date DateTime
    weight Float
    bodyFat Float?
    chest Float?
    waist Float?
    hips Float?
    biceps Float?
    thigh Float?
    user User @relation(fields: [userId], references: [id])
    userId String
}

model TrainingProposal {
    id String @id @default(cuid())
    from User @relation("TrainingProposalsFrom", fields: [fromId], references: [id])
    fromId String
    to User @relation("TrainingProposalsTo", fields: [toId], references: [id])
    toId String
    sport String
    date DateTime
    comment String?
    status String @default("PENDING") // PENDING, ACCEPTED, DECLINED
    createdAt DateTime @default(now())
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  votes     PollVote[]
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
}

model PollOption {
  id     String     @id @default(cuid())
  text   String
  poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String
  votes  PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@unique([userId, pollId])
}

// These are for Training Program generation and tracking
// A reference of available exercises
model Exercise {
  id               String           @id @default(cuid())
  name             String           @unique
  description      String
  category         String
  equipment        String
  image            String?
  imageHint        String?
  techniqueTips    String[]
  commonMistakes   String[]
  alternatives     String[]
  LoggedExercise   LoggedExercise[]
}

// A full program, potentially generated by AI or user
model TrainingProgram {
  id               String         @id @default(cuid())
  name             String
  description      String
  goal             String
  daysPerWeek      Int
  splitType        String
  author           String
  coverImage       String?
  coverImageHint   String?
  isAiGenerated    Boolean        @default(false)
  weeklySplit      WorkoutDay[]
}

// One day within a TrainingProgram
model WorkoutDay {
  id              String           @id @default(cuid())
  program         TrainingProgram  @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId       String
  day             Int
  title           String
  exercises       ExerciseDetail[]
}

// Details of a single exercise within a WorkoutDay
model ExerciseDetail {
  id                      String      @id @default(cuid())
  day                     WorkoutDay  @relation(fields: [dayId], references: [id], onDelete: Cascade)
  dayId                   String
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
}

// A log entry for a completed (or planned) workout
model TrainingLog {
  id          String           @id @default(cuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  workoutName String
  status      String // planned, completed, skipped
  notes       String?
  mood        String? // great, good, ok, bad
  coachNotes  String?
  exercises   LoggedExercise[]
}

// A specific exercise as it was logged in a TrainingLog
model LoggedExercise {
  id            String      @id @default(cuid())
  trainingLog   TrainingLog @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
  trainingLogId String
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  notes         String?
  sets          LoggedSet[]
}

// A single set within a LoggedExercise
model LoggedSet {
  id                 String         @id @default(cuid())
  loggedExercise     LoggedExercise @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
  loggedExerciseId   String
  plannedReps        String?
  plannedWeight      String?
  loggedReps         Int?
  loggedWeight       Float?
  rpe                Int? // Rate of Perceived Exertion
  isCompleted        Boolean        @default(false)
}

// For user profiles
model GalleryItem {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  src         String
  alt         String
  dataAiHint  String
  createdAt   DateTime @default(now())
}

model CareerHistoryItem {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model CoachProfile {
  id             String @id @default(cuid())
  user           User   @relation(fields: [userId], references: [id])
  userId         String @unique
  specialization String
  description    String
  tags           String[]
  rating         Float
  price          Decimal
}
