// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    String
  status                  String                   @default("Активен")
  xp                      Int                      @default(0)
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  isVerified              Boolean                  @default(false)
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  teamsAsCaptain          Team[]                   @relation("Captain")
  teamsAsMember           Team[]                   @relation("TeamMembers")
  organizedTournaments    Tournament[]
  friends                 User[]                   @relation("Friendship")
  friendsOf               User[]                   @relation("Friendship")
  sentFriendRequests      FriendRequest[]          @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]          @relation("ReceivedFriendRequests")
  careerHistory           CareerHistory[]
  trainingLogs            TrainingLog[]
  measurements            Measurement[]
  trainingProposalsSent   TrainingProposal[]       @relation("SentProposals")
  trainingProposalsRecv   TrainingProposal[]       @relation("ReceivedProposals")
  createdPolls            Poll[]
  votes                   PollVote[]
  createdQuests           Quest[]
  inventory               InventoryItem[]
  foodLog                 FoodLogEntry[]
  coaching                User[]                   @relation("CoachingRelationship")
  coachedBy               User?                    @relation("CoachingRelationship", fields: [coachId], references: [id])
  coachId                 String?
  coachProfile            CoachProfile?
  judgedMatches           Match[]
  organizedPromotions     Promotion[]
  createdPlaygrounds      Playground[]
  reviews                 PlaygroundReview[]
  reported                Report[]                 @relation("ReportedUser")
  reportedBy              Report[]                 @relation("Reporter")
  resolvedReports         Report[]                 @relation("Resolver")
  sentAnnouncements       TournamentAnnouncement[]
  achievements            UserAchievement[]
  applications            TeamApplication[]
  sponsorships            Sponsorship[]
  teamId                  String?
  activities              Activity[]
  notifications           Notification[]
}

model Team {
  id                   String                   @id @default(cuid())
  name                 String                   @unique
  slug                 String                   @unique
  logo                 String?
  dataAiHint           String?
  motto                String?
  description          String?
  game                 String
  rank                 Int                      @default(1)
  wins                 Int                      @default(0)
  losses               Int                      @default(0)
  draws                Int                      @default(0)
  seekingSponsorship   Boolean                  @default(false)
  pitch                String?
  creator              User                     @relation(fields: [creatorId], references: [id])
  creatorId            String
  captain              User                     @relation("Captain", fields: [captainId], references: [id])
  captainId            String                   @unique
  members              User[]                   @relation("TeamMembers")
  tournaments          Tournament[]
  matchesAsTeam1       Match[]                  @relation("Team1Matches")
  matchesAsTeam2       Match[]                  @relation("Team2Matches")
  homePlayground       Playground?              @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId     String?                  @unique
  events               MatchEvent[]
  sponsorships         Sponsorship[]
  teamPractices        TeamPractice[]
  applications         TeamApplication[]
  chat                 Chat?
  careerHistoryEntries CareerHistory[]
}

model CareerHistory {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String
  period String // e.g., "2022-2023"
  role   String
  review String
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())

  @@unique([fromId, toId])
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  game                    String
  status                  String
  teams                   Team[]
  matches                 Match[]
  organizer               User                     @relation(fields: [organizerId], references: [id])
  organizerId             String
  description             String?
  rules                   String?
  prizePool               String?
  format                  String
  type                    String // "team" or "individual"
  category                String
  location                String
  participantCount        Int
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  bannerImage             String?
  bannerImageHint         String?
  sponsors                Sponsor[]                @relation("TournamentSponsors")
  judges                  User[]                   @relation("TournamentJudges")
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  applications            TeamApplication[]
  media                   TournamentMedia[]
}

model TournamentMedia {
  id          String     @id @default(cuid())
  tournament  Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type        String // IMAGE, VIDEO, AUDIO
  src         String
  description String?
  hint        String?
  createdAt   DateTime   @default(now())
}

model Match {
  id              String       @id @default(cuid())
  tournament      Tournament?  @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  team1           Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  referee         User?        @relation(fields: [refereeId], references: [id])
  refereeId       String?
  playground      Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId    String?
  location        String?
  events          MatchEvent[]
  round           Int?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  leagueId        String?
  league          League?      @relation(fields: [leagueId], references: [id])

  @@index([team1Id])
  @@index([team2Id])
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model MatchEvent {
  id        String         @id @default(cuid())
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  type      MatchEventType
  timestamp DateTime       @default(now())
  player    User?          @relation(fields: [playerId], references: [id])
  playerId  String?
  team      Team?          @relation(fields: [teamId], references: [id])
  teamId    String?
  metadata  Json?
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
  SHOT
  SHOT_ON_TARGET
  CORNER
  FOUL
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
}

model Sponsor {
  id                   String        @id @default(cuid())
  name                 String        @unique
  logo                 String?
  logoHint             String?
  description          String
  profileUrl           String
  interests            String[]
  promotions           Promotion[]
  sponsorships         Sponsorship[]
  tournamentsSponsored Tournament[]  @relation("TournamentSponsors")
}

model Sponsorship {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  sponsor   Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId String
  amount    Decimal
  signedAt  DateTime @default(now())

  @@unique([teamId, sponsorId])
}

model Promotion {
  id            String    @id @default(cuid())
  name          String
  description   String
  prize         String
  cost          String // Can be "free" or a number of PD
  imageDataUri  String
  imageHint     String
  organizer     User      @relation(fields: [organizerId], references: [id])
  organizerId   String
  sponsor       Sponsor?  @relation(fields: [sponsorId], references: [id])
  sponsorId     String?
  endDate       DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Playground {
  id              String               @id @default(cuid())
  name            String
  address         String
  type            String
  coverImage      String?
  coverImageHint  String?
  surface         String
  features        String[]
  rating          Float
  checkIns        Int
  status          PlaygroundStatus
  creator         User                 @relation(fields: [creatorId], references: [id])
  creatorId       String
  matches         Match[]
  team            Team?
  reviews         PlaygroundReview[]
  reports         PlaygroundReport[]
  checkInActivity Activity[]
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String         @id @default(cuid())
  playground   Playground     @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User           @relation(fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String // low, medium, high
  summary      String
  status       ReportStatus
  createdAt    DateTime       @default(now())
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  status       TeamApplicationStatus @default(PENDING)
  message      String?
  createdAt    DateTime              @default(now())
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("Reporter", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportedUser", fields: [reportedUserId], references: [id])
  reportedUserId String
  category       String
  description    String?
  status         ReportStatus @default(PENDING)
  resolution     String?
  resolver       User?        @relation("Resolver", fields: [resolverId], references: [id])
  resolverId     String?
  createdAt      DateTime     @default(now())
  resolvedAt     DateTime?
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  wager        Int
  creator      User            @relation(fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation(fields: [opponentId], references: [id])
  opponentId   String?
  status       ChallengeStatus
  result       String? // e.g. "Creator Won", "Opponent Won", "Draw"
  createdAt    DateTime        @default(now())
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Sport {
  id         String      @id @unique
  name       String
  icon       String
  category   String
  challenges Challenge[]
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}

model LfgLobby {
  id           String       @id @default(cuid())
  type         LfgLobbyType
  sport        String
  location     String
  playgroundId String?
  startTime    DateTime
  endTime      DateTime
  creator      User         @relation(fields: [creatorId], references: [id])
  creatorId    String
  players      User[]
  playersNeeded Int
  comment      String
  status       LfgLobbyStatus @default(OPEN)
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

// Training related models
model TrainingProgram {
  id              String          @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean         @default(false)
  weeklySplit     WorkoutDay[]
  trainingLogs    TrainingLog[]
  trainingProposals TrainingProposal[]
}

model WorkoutDay {
  id          String        @id @default(cuid())
  day         Int
  title       String
  program     TrainingProgram @relation(fields: [programId], references: [id])
  programId   String
  exercises   WorkoutExercise[]
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String
}

model TrainingLog {
  id            String             @id @default(cuid())
  user          User               @relation(fields: [userId], references: [id])
  userId        String
  program       TrainingProgram?   @relation(fields: [programId], references: [id])
  programId     String?
  date          DateTime
  workoutName   String?
  status        TrainingLogStatus
  mood          Mood?
  notes         String?
  coachNotes    String?
  exercises     LoggedExercise[]
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

model LoggedExercise {
  id            String        @id @default(cuid())
  trainingLog   TrainingLog   @relation(fields: [trainingLogId], references: [id])
  trainingLogId String
  exercise      Exercise      @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  notes         String?
  sets          LoggedSet[]
}

model LoggedSet {
  id                String         @id @default(cuid())
  loggedExercise    LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId  String
  plannedReps       String?
  plannedWeight     String?
  loggedReps        Int?
  loggedWeight      Float?
  rpe               Int?
  isCompleted       Boolean        @default(false)
}

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  loggedExercises LoggedExercise[]
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean
}

model FaqItem {
  id       String @id @default(cuid())
  category String
  question String
  answer   String
  createdAt DateTime @default(now())
}

model FoodItem {
    id String @id @default(cuid())
    name String @unique
    category String
    image String?
    imageHint String?
    calories Float
    protein Float
    fat Float
    carbs Float
    description String?
    logEntries FoodLogEntry[]
}

model FoodLogEntry {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    foodItem FoodItem @relation(fields: [foodItemId], references: [id])
    foodItemId String
    grams Int
    meal String
    createdAt DateTime @default(now())
}

model Measurement {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String
    date DateTime
    weight Float
    bodyFat Float?
    chest Float?
    waist Float?
    hips Float?
    biceps Float?
    thigh Float?
}

model TrainingProposal {
    id String @id @default(cuid())
    from User @relation("SentProposals", fields: [fromId], references: [id])
    fromId String
    to User @relation("ReceivedProposals", fields: [toId], references: [id])
    toId String
    sport String
    date DateTime
    program TrainingProgram? @relation(fields: [programId], references: [id])
    programId String?
    comment String?
    status TrainingProposalStatus @default(PENDING)
    createdAt DateTime @default(now())
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Quest {
    id String @id @default(cuid())
    title String
    description String
    reward Int
    goal Int
    href String
    type QuestType
    author User? @relation(fields: [authorId], references: [id])
    authorId String?
    createdAt DateTime @default(now())
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

model Poll {
  id        String     @id @default(cuid())
  title     String
  question  String
  options   PollOption[]
  author    User?      @relation(fields: [authorId], references: [id])
  authorId  String?
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  votes     PollVote[]
}

model PollOption {
  id    String     @id @default(cuid())
  text  String
  poll  Poll       @relation(fields: [pollId], references: [id])
  pollId String
  votes PollVote[]
}

model PollVote {
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  poll       Poll       @relation(fields: [pollId], references: [id])
  pollId     String
  pollOption PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt  DateTime   @default(now())

  @@unique([userId, pollId])
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
}

model Achievement {
    id String @id @default(cuid())
    name String @unique
    description String
    icon String
    unlockedBy UserAchievement[]
}

model UserAchievement {
    user User @relation(fields: [userId], references: [id])
    userId String
    achievement Achievement @relation(fields: [achievementId], references: [id])
    achievementId String
    unlockedAt DateTime @default(now())
    
    @@id([userId, achievementId])
}

model Activity {
  id           String      @id @default(cuid())
  type         ActivityType
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  metadata     Json
  playground   Playground? @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  createdAt    DateTime    @default(now())
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model Notification {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  type      NotificationType
  message   String
  href      String?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  TEAM_INVITE
  SYSTEM_ALERT
}

model League {
    id String @id @default(cuid())
    name String
    description String
    game String
    image String?
    imageHint String?
    teams LeagueTeam[]
    matches Match[]
}

model LeagueTeam {
    id String @id @default(cuid())
    league League @relation(fields: [leagueId], references: [id])
    leagueId String
    team Team @relation(fields: [teamId], references: [id])
    teamId String
    played Int
    wins Int
    losses Int
    draws Int
    points Int
    
    @@unique([leagueId, teamId])
}
