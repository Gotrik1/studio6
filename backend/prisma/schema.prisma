// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  name                    String
  avatar                  String?
  role                    String
  passwordHash            String
  xp                      Int                    @default(0)
  status                  String
  location                String?
  mainSport               String?
  dateOfBirth             DateTime?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  createdTeams            Team[]                 @relation("CreatedTeams")
  captainedTeams          Team[]                 @relation("CaptainedTeams")
  teamsAsMember           Team[]                 @relation("TeamMembers")
  organizedTournaments    Tournament[]
  friends                 User[]                 @relation("Friendship")
  friendOf                User[]                 @relation("Friendship")
  sentFriendRequests      FriendRequest[]        @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]        @relation("ReceivedFriendRequests")
  playgrounds             Playground[]
  reports                 Report[]               @relation("ReportedUsers")
  reportedBy              Report[]               @relation("Reporters")
  resolvedReports         Report[]               @relation("ResolvedBy")
  judgedTournaments       Tournament[]           @relation("TournamentJudges")
  activities              Activity[]
  organizedPromotions     Promotion[]
  measurements            Measurement[]
  trainingLogs            TrainingLog[]
  foodLogEntries          FoodLogEntry[]
  trainingProposalsSent   TrainingProposal[]     @relation("SentTrainingProposals")
  trainingProposalsReceived TrainingProposal[]   @relation("ReceivedTrainingProposals")
  pollVotes               PollVote[]
  inventoryItems          InventoryItem[]
  tournamentAnnouncements TournamentAnnouncement[]
  coachProfile            CoachProfile?
  coaching                User[]                 @relation("CoachStudent")
  coach                   User?                  @relation("CoachStudent", fields: [coachId], references: [id])
  coachId                 String?
  teamApplications        TeamApplication[]      @relation("UserApplications")
}

model Team {
  id                  String            @id @default(cuid())
  name                String
  slug                String            @unique
  motto               String?
  logo                String?
  dataAiHint          String?
  game                String
  rank                Int               @default(0)
  wins                Int               @default(0)
  losses              Int               @default(0)
  draws               Int               @default(0)
  seekingSponsorship  Boolean           @default(false)
  goals               String?
  creator             User              @relation("CreatedTeams", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId           String
  captain             User              @relation("CaptainedTeams", fields: [captainId], references: [id], onDelete: Cascade)
  captainId           String
  members             User[]            @relation("TeamMembers")
  tournaments         Tournament[]
  matchesAsTeam1      Match[]           @relation("Team1Matches")
  matchesAsTeam2      Match[]           @relation("Team2Matches")
  sponsors            Sponsor[]
  homePlaygroundId    String?
  homePlayground      Playground?       @relation(fields: [homePlaygroundId], references: [id], onDelete: SetNull)
  applications        TeamApplication[] @relation("TeamApplications")
  chat                Chat?
  practices           TeamPractice[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model TeamApplication {
  id           String                   @id @default(cuid())
  team         Team                     @relation("TeamApplications", fields: [teamId], references: [id], onDelete: Cascade)
  teamId       String
  user         User                     @relation("UserApplications", fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  message      String?
  status       TeamApplicationStatus    @default(PENDING)
  tournament   Tournament?              @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId String?
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id], onDelete: Cascade)
  fromId    String
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id], onDelete: Cascade)
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Match {
  id              String      @id @default(cuid())
  team1           Team        @relation("Team1Matches", fields: [team1Id], references: [id], onDelete: Cascade)
  team1Id         String
  team2           Team        @relation("Team2Matches", fields: [team2Id], references: [id], onDelete: Cascade)
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournament      Tournament? @relation(fields: [tournamentId], references: [id], onDelete: SetNull)
  tournamentId    String?
  league          League?     @relation(fields: [leagueId], references: [id])
  leagueId        String?
  refereeName     String?
  location        String?
  playgroundId    String?
  playground      Playground? @relation(fields: [playgroundId], references: [id], onDelete: SetNull)
  disputeReason   String?
  resolution      String?
  disputeOpenedAt DateTime?
  judges          User[]
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  game                  String
  description           String?
  type                  String
  format                String
  status                String                   @default("registration") // registration, ongoing, finished
  organizer             User                     @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  organizerId           String
  teams                 Team[]
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  judges                User[]                   @relation("TournamentJudges")
  matches               Match[]
  applications          TeamApplication[]
  sponsors              Sponsor[]                @relation("TournamentSponsors")
  medicalPartners       MedicalPartner[]
  announcements         TournamentAnnouncement[]
  media                 TournamentMedia[]
}

model TournamentMedia {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type         String // IMAGE, VIDEO, AUDIO
  src          String
  description  String?
  hint         String?
  createdAt    DateTime   @default(now())
}

model Playground {
  id           String        @id @default(cuid())
  name         String
  address      String
  type         String
  coverImage   String?
  coverImageHint String?
  surface      String
  features     String[]
  rating       Float
  checkIns     Int
  creator      User          @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId    String
  status       String        @default("PENDING_MODERATION") // PENDING_MODERATION, APPROVED
  matches      Match[]
  reviews      PlaygroundReview[]
  activities   Activity[]
  reports      PlaygroundReport[]
  lfgLobbies   LfgLobby[]
  homeForTeams Team[]
  teamPractices TeamPractice[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model PlaygroundReview {
    id String @id @default(cuid())
    playground Playground @relation(fields: [playgroundId], references: [id])
    playgroundId String
    author User @relation(fields: [authorId], references: [id])
    authorId String
    rating Int
    comment String
    createdAt DateTime @default(now())
}

model Challenge {
  id            String   @id @default(cuid())
  title         String
  description   String
  discipline    Sport    @relation(fields: [disciplineId], references: [id])
  disciplineId  String
  wager         Int
  creatorId     String
  creator       User     @relation(fields: [creatorId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  opponentId    String?
  opponent      User?    @relation(fields: [opponentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  status        String // OPEN, IN_PROGRESS, COMPLETED, CANCELLED
  result        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model CoachProfile {
  id             String  @id @default(cuid())
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String  @unique
  specialization String
  description    String
  tags           String[]
  experience     String?
  rating         Float
  price          Float
}

model Sponsor {
  id            String       @id @default(cuid())
  name          String
  logo          String?
  logoHint      String?
  description   String
  profileUrl    String
  interests     String[]
  promotions    Promotion[]
  teams         Team[]
  tournaments   Tournament[] @relation("TournamentSponsors")
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         String // PRIVATE, GROUP
  participants User[]
  messages     Message[]
  team         Team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId       String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  content   String
  createdAt DateTime @default(now())
}

model FaqItem {
  id String @id @default(cuid())
  category String
  question String
  answer String
  createdAt DateTime @default(now())
}

model Notification {
  id        String          @id @default(cuid())
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      NotificationType
  message   String
  href      String?
  isRead    Boolean         @default(false)
  createdAt DateTime        @default(now())
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  TEAM_INVITE
  NEW_MESSAGE
  DISPUTE_RESOLVED
}

model Report {
  id String @id @default(cuid())
  reporter User @relation("Reporters", fields: [reporterId], references: [id], onDelete: Cascade)
  reporterId String
  reportedUser User @relation("ReportedUsers", fields: [reportedUserId], references: [id], onDelete: Cascade)
  reportedUserId String
  category String
  description String?
  status ReportStatus @default(PENDING)
  resolver User? @relation("ResolvedBy", fields: [resolverId], references: [id], onDelete: SetNull)
  resolverId String?
  resolution String?
  createdAt DateTime @default(now())
  resolvedAt DateTime?
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model League {
  id        String       @id @default(cuid())
  name      String
  description String
  game      String
  image     String?
  imageHint String?
  teams     LeagueTeam[]
  matches   Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId   String
  played   Int
  wins     Int
  losses   Int
  draws    Int
  points   Int
}

model LfgLobby {
  id String @id @default(cuid())
  creator User @relation(fields: [creatorId], references: [id])
  creatorId String
  type LfgLobbyType
  sport String
  location String
  playground Playground? @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  startTime DateTime
  endTime DateTime
  playersNeeded Int
  players User[]
  comment String
  status LfgLobbyStatus @default(OPEN)
  createdAt DateTime @default(now())
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

model Sport {
  id       String @id
  name     String
  icon     String
  category String
  challenges Challenge[]
}

model TeamPractice {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime

  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String

  playground   Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  playgroundId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Exercise {
  id               String           @id @default(cuid())
  name             String
  description      String
  category         String
  equipment        String
  image            String?
  imageHint        String?
  videoUrl         String?
  techniqueTips    Json
  commonMistakes   Json
  alternatives     Json
  createdAt        DateTime         @default(now())
  loggedExercises  LoggedExercise[]
}

model TrainingProgram {
  id String @id @default(cuid())
  name String
  description String
  goal String
  daysPerWeek Int
  splitType String
  author String
  coverImage String
  coverImageHint String
  isAiGenerated Boolean @default(false)
  weeklySplit WorkoutDay[]
  trainingProposals TrainingProposal[]
}

model WorkoutDay {
  id String @id @default(cuid())
  program TrainingProgram @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId String
  day Int
  title String
  exercises ExerciseDetail[]
}

model ExerciseDetail {
  id String @id @default(cuid())
  workoutDay WorkoutDay @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
  workoutDayId String
  name String
  sets String
  reps String
  plannedWeight String?
  isSupersetWithPrevious Boolean?
  technique String?
}

model TrainingLog {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  date DateTime
  workoutName String?
  status TrainingLogStatus
  exercises LoggedExercise[]
  mood Mood?
  notes String?
  coachNotes String?
  createdAt DateTime @default(now())
}

model LoggedExercise {
  id String @id @default(cuid())
  trainingLog TrainingLog @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
  trainingLogId String
  exercise Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
  notes String?
  sets LoggedSet[]
  isSupersetWithPrevious Boolean?
}

model LoggedSet {
  id String @id @default(cuid())
  loggedExercise LoggedExercise @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
  loggedExerciseId String
  plannedReps String?
  plannedWeight String?
  loggedReps Int?
  loggedWeight Int?
  rpe Int? // Rate of Perceived Exertion
  isCompleted Boolean @default(false)
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

model Promotion {
  id String @id @default(cuid())
  name String
  description String
  prize String
  imageDataUri String
  imageHint String
  organizer User @relation(fields: [organizerId], references: [id])
  organizerId String
  sponsor Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId String?
  endDate DateTime
  cost String
  createdAt DateTime @default(now())
}

model StoreItem {
  id String @id @default(cuid())
  name String
  description String
  price Float
  image String?
  imageHint String?
  category String
  isRealMoney Boolean @default(false)
  createdAt DateTime @default(now())
}

model Activity {
  id           String        @id @default(cuid())
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  type         ActivityType
  metadata     Json
  playground   Playground?   @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  playgroundId String?
  createdAt    DateTime      @default(now())
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model MedicalPartner {
  id String @id @default(cuid())
  name String
  specialization String
  contact String
  avatar String?
  avatarHint String?
  tournaments Tournament[]
}

model TournamentAnnouncement {
  id String @id @default(cuid())
  tournament Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId String
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId String
  subject String
  message String
  sentTo Int
  createdAt DateTime @default(now())
}

model PlaygroundReport {
  id String @id @default(cuid())
  playground Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  playgroundId String
  reporter User @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  reporterId String
  category String
  comment String
  severity String
  summary String
  status ReportStatus
  createdAt DateTime @default(now())
}

model Measurement {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  date DateTime
  weight Float
  bodyFat Float?
  chest Float?
  waist Float?
  hips Float?
  biceps Float?
  thigh Float?
}

model TrainingProposal {
  id String @id @default(cuid())
  from User @relation("SentTrainingProposals", fields: [fromId], references: [id], onDelete: Cascade)
  fromId String
  to User @relation("ReceivedTrainingProposals", fields: [toId], references: [id], onDelete: Cascade)
  toId String
  sport String
  date DateTime
  comment String?
  status TrainingProposalStatus @default(PENDING)
  program TrainingProgram? @relation(fields: [programId], references: [id], onDelete: SetNull)
  programId String?
  createdAt DateTime @default(now())
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Poll {
  id String @id @default(cuid())
  title String
  question String
  options PollOption[]
  author User? @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String?
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  votes PollVote[]
}

model PollOption {
  id String @id @default(cuid())
  poll Poll @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String
  text String
  votes PollVote[]
}

model PollVote {
  id String @id @default(cuid())
  poll Poll @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String
  option PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)
  pollOptionId String
  voter User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  createdAt DateTime @default(now())

  @@unique([userId, pollId])
}

model InventoryItem {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    name String
    category String
    type String
    purchaseDate DateTime
    lifespanMonths Int
    image String?
    imageHint String?
    createdAt DateTime @default(now())
}
