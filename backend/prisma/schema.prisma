// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums
enum Role {
  Администратор
  Модератор
  Капитан
  Игрок
  Тренер
  Судья
  Болельщик
  Менеджер
  Спонсор
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum TournamentStatus {
  REGISTRATION
  ONGOING
  FINISHED
  CANCELLED
}

enum TournamentType {
  team
  individual
}

enum TournamentFormat {
  single_elimination
  round_robin
  groups
}

enum ReportSeverity {
  low
  medium
  high
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum TrainingLogStatus {
  planned
  completed
  skipped
}

enum Mood {
  great
  good
  ok
  bad
}

enum MealType {
  Завтрак
  Обед
  Ужин
  Перекус
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

enum LfgLobbyType {
  GAME
  TRAINING
}

// Models
model User {
  id                   String      @id @default(cuid())
  email                String      @unique
  name                 String
  passwordHash         String
  avatar               String?
  role                 Role        @default(Игрок)
  xp                   Int         @default(0)
  status               String      @default("Активен")
  dateOfBirth          DateTime?
  location             String?
  mainSport            String?
  preferredSports      String[]
  telegram             String?
  discord              String?
  isVerified           Boolean     @default(false)
  activitySummary      String?
  statsSummary         String?

  teamsAsCaptain       Team[]      @relation("CaptainToTeam")
  teamsAsCreator       Team[]      @relation("CreatorToTeam")
  teamsAsMember        Team[]      @relation("TeamMembers")

  organizedTournaments Tournament[]

  judgedMatches User[] @relation("MatchJudges")

  createdPlaygrounds Playground[]

  friends  User[] @relation("Friends")
  friendOf User[] @relation("Friends")

  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")

  reportsSent             Report[]           @relation("Reporter")
  reportsReceived         Report[]           @relation("ReportedUser")
  reportsResolved         Report[]           @relation("Resolver")

  playgroundReports         PlaygroundReport[] @relation("Reporter")
  resolvedPlaygroundReports PlaygroundReport[] @relation("Resolver")

  challengesAsCreator  Challenge[] @relation("ChallengeCreator")
  challengesAsOpponent Challenge[] @relation("ChallengeOpponent")

  teamApplications TeamApplication[]

  organizedPromotions Promotion[]

  activities Activity[]

  trainingProposalsSent     TrainingProposal[] @relation("FromUser")
  trainingProposalsReceived TrainingProposal[] @relation("ToUser")

  trainingLogs   TrainingLog[]
  measurements   Measurement[]
  foodLogEntries FoodLogEntry[]

  coachProfile CoachProfile?
  coaching     User[]          @relation("Coaches")
  coachedBy    User[]          @relation("Coaches")

  careerHistory CareerHistoryItem[]
  inventory     InventoryItem[]
  pollVotes     PollVote[]

  notifications     Notification[]
  sentAnnouncements TournamentAnnouncement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoachProfile {
  id             String @id @default(cuid())
  user           User   @relation(fields: [userId], references: [id])
  userId         String @unique
  specialization String
  description    String
  tags           String[]
  rating         Float
  price          Float
}

model CareerHistoryItem {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model Team {
  id                 String                @id @default(cuid())
  name               String
  slug               String                @unique
  game               String
  motto              String?
  logo               String?
  dataAiHint         String?
  rank               Int                   @default(0)
  wins               Int                   @default(0)
  losses             Int                   @default(0)
  draws              Int                   @default(0)
  seekingSponsorship Boolean               @default(false)
  description        String?
  goals              String?
  homePlaygroundId   String?

  creator   User   @relation("CreatorToTeam", fields: [creatorId], references: [id])
  creatorId String
  captain   User   @relation("CaptainToTeam", fields: [captainId], references: [id])
  captainId String

  members        User[]                @relation("TeamMembers")
  matchesAsTeam1 Match[]               @relation("Team1")
  matchesAsTeam2 Match[]               @relation("Team2")
  tournaments    Tournament[]
  sponsors       Sponsor[]

  chat Chat?

  applications TeamApplication[]

  practices TeamPractice[]

  leagueTeams LeagueTeam[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         String    @default("DIRECT") // DIRECT or GROUP
  teamId       String?   @unique
  team         Team?     @relation(fields: [teamId], references: [id])
  participants User[]
  messages     Message[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime @default(now())
}

model Match {
  id              String      @id @default(cuid())
  team1           Team        @relation("Team1", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team        @relation("Team2", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  tournamentId    String?
  tournament      Tournament? @relation(fields: [tournamentId], references: [id])
  events          MatchEvent[]
  scheduledAt     DateTime
  startedAt       DateTime?
  finishedAt      DateTime?
  location        String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  judges          User[]      @relation("MatchJudges")
  refereeName     String?
  playgroundId    String?
  playground      Playground? @relation(fields: [playgroundId], references: [id])
  leagueId        String?
  league          League?     @relation(fields: [leagueId], references: [id])
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model MatchEvent {
  id      String @id @default(cuid())
  match   Match  @relation(fields: [matchId], references: [id])
  matchId String
  time    String
  type    String // e.g., GOAL, CARD, KILL
  player  String // Player name for simplicity
  team    String // Team name for simplicity
  details Json?
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  description           String?
  status                TournamentStatus         @default(REGISTRATION)
  game                  String
  type                  TournamentType
  format                TournamentFormat
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  organizer             User                     @relation(fields: [organizerId], references: [id])
  organizerId           String
  teams                 Team[]
  matches               Match[]
  announcements         TournamentAnnouncement[]
  sponsors              Sponsor[]
  judges                User[]
  medicalPartners       MedicalPartner[]
  media                 TournamentMedia[]
  applications          TeamApplication[]
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  message      String?
  status       TeamApplicationStatus @default(PENDING)
  tournamentId String?
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  @@unique([teamId, userId, tournamentId])
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
}

model TournamentMedia {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type         String // IMAGE, VIDEO, AUDIO
  src          String
  description  String?
  hint         String?
  createdAt    DateTime   @default(now())
}

model Playground {
  id             String             @id @default(cuid())
  name           String
  address        String
  type           String
  coverImage     String?
  coverImageHint String?
  surface        String
  features       String[]
  rating         Float
  checkIns       Int
  status         String             // APPROVED, PENDING_MODERATION
  creator        User               @relation(fields: [creatorId], references: [id])
  creatorId      String
  reviews        PlaygroundReview[]
  reports        PlaygroundReport[]
  matches        Match[]
  practices      TeamPractice[]
  lfgLobbies     LfgLobby[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String?
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String         @id @default(cuid())
  playground   Playground     @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User           @relation("Reporter", fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     ReportSeverity
  summary      String?
  status       ReportStatus   @default(PENDING)
  resolver     User?          @relation("Resolver", fields: [resolverId], references: [id])
  resolverId   String?
  resolution   String?
  resolvedAt   DateTime?
  createdAt    DateTime       @default(now())
}

model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("Reporter", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportedUser", fields: [reportedUserId], references: [id])
  reportedUserId String
  reason         String
  context        String
  status         ReportStatus @default(PENDING)
  resolver       User?        @relation("Resolver", fields: [resolverId], references: [id])
  resolverId     String?
  resolution     String?
  resolvedAt     DateTime?
  createdAt      DateTime     @default(now())
}

model FriendRequest {
  id        String              @id @default(cuid())
  from      User                @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())

  @@unique([fromId, toId])
}

model Activity {
  id           String       @id @default(cuid())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  type         ActivityType
  metadata     Json
  playgroundId String?
  playground   Playground?  @relation(fields: [playgroundId], references: [id], onDelete: SetNull)
  createdAt    DateTime     @default(now())

  @@index([userId])
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  wager        Int
  creator      User            @relation("ChallengeCreator", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("ChallengeOpponent", fields: [opponentId], references: [id])
  opponentId   String?
  status       ChallengeStatus @default(OPEN)
  result       String?
  disciplineId String
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model Measurement {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  weight    Float
  bodyFat   Float?
  chest     Float?
  waist     Float?
  hips      Float?
  biceps    Float?
  thigh     Float?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId, date])
}

model TrainingProposal {
  id        String                 @id @default(cuid())
  from      User                   @relation("FromUser", fields: [fromId], references: [id])
  fromId    String
  to        User                   @relation("ToUser", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  comment   String?
  status    TrainingProposalStatus @default(PENDING)
  programId String?
  program   TrainingProgram?       @relation(fields: [programId], references: [id])
  createdAt DateTime               @default(now())
}

model TrainingLog {
  id          String            @id @default(cuid())
  user        User              @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  workoutName String?
  status      TrainingLogStatus @default(planned)
  mood        Mood?
  notes       String?
  coachNotes  String?
  exercises   LoggedExercise[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model LoggedExercise {
  id                     String      @id @default(cuid())
  trainingLog            TrainingLog @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
  trainingLogId          String
  exercise               Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId             String
  notes                  String?
  sets                   LoggedSet[]
  isSupersetWithPrevious Boolean?
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Int? // Rate of Perceived Exertion
  isCompleted      Boolean        @default(false)
}

model Exercise {
  id             String            @id @default(cuid())
  name           String            @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  videoUrl       String?
  techniqueTips  Json
  commonMistakes Json
  alternatives   Json
  loggedItems    LoggedExercise[]
  programItems   ProgramExercise[]
}

model TrainingProgram {
  id              String             @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean            @default(false)
  weeklySplit     WorkoutDay[]
  proposals       TrainingProposal[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  day               Int
  title             String
  exercises         ProgramExercise[]
}

model ProgramExercise {
  id                     String    @id @default(cuid())
  workoutDay             WorkoutDay @relation(fields: [workoutDayId], references: [id])
  workoutDayId           String
  exercise               Exercise   @relation(fields: [exerciseId], references: [id])
  exerciseId             String
  name                   String
  sets                   String
  reps                   String
  plannedWeight          String?
  isSupersetWithPrevious Boolean?
  technique              String?
}

model Sponsor {
  id          String      @id @default(cuid())
  name        String
  logo        String
  logoHint    String
  description String
  profileUrl  String
  interests   String[]
  tournaments Tournament[]
  promotions  Promotion[]
}

model Promotion {
  id           String   @id @default(cuid())
  name         String
  description  String
  prize        String
  cost         String
  imageDataUri String
  imageHint    String
  organizer    User     @relation(fields: [organizerId], references: [id])
  organizerId  String
  sponsor      Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId    String?
  endDate      DateTime
  createdAt    DateTime @default(now())
}

model LfgLobby {
  id            String         @id @default(cuid())
  type          LfgLobbyType // GAME or TRAINING
  sport         String
  location      String
  playground    Playground?    @relation(fields: [playgroundId], references: [id])
  playgroundId  String?
  creator       User           @relation(fields: [creatorId], references: [id])
  creatorId     String
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  players       User[]
  comment       String
  status        LfgLobbyStatus @default(OPEN)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Sport {
  id         String      @id
  name       String      @unique
  icon       String
  category   String
  challenges Challenge[]
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String
  imageHint   String
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id     String @id @default(cuid())
  league League @relation(fields: [leagueId], references: [id])
  leagueId String
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String
  played Int
  wins   Int
  losses Int
  draws  Int
  points Int

  @@unique([leagueId, teamId])
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  isActive  Boolean      @default(true)
  options   PollOption[]
  votes     PollVote[]
  createdAt DateTime     @default(now())
}

model PollOption {
  id     String     @id @default(cuid())
  poll   Poll       @relation(fields: [pollId], references: [id])
  pollId String
  text   String
  votes  PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollId       String
  option       PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String

  @@unique([userId, pollId])
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String // 'Обувь' | 'Одежда' | 'Аксессуары' | 'Периферия'
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  type      String // FRIEND_REQUEST, MATCH_RESULT, etc.
  href      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String         @unique
  category    String // e.g., "Продукты", "Спортивное питание"
  image       String?
  imageHint   String?
  calories    Int // per 100g
  protein     Float // per 100g
  fat         Float // per 100g
  carbs       Float // per 100g
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id], onDelete: Cascade)
  foodItemId String
  grams      Int
  meal       MealType
  createdAt  DateTime @default(now())

  @@index([userId, createdAt])
}
