// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  name                    String
  passwordHash            String
  avatar                  String?
  role                    String                  @default("Игрок")
  status                  String                  @default("Активен")
  xp                      Int                     @default(0)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  organizedTournaments    Tournament[]            @relation("Organizer")
  teamsAsCaptain          Team[]                  @relation("Captain")
  teamsAsCreator          Team[]                  @relation("Creator")
  teamsAsMember           Team[]                  @relation("Members")
  gallery                 GalleryItem[]
  careerHistory           CareerHistoryItem[]
  organizedPromotions     Promotion[]
  friends                 User[]                  @relation("Friendship")
  friendsOf               User[]                  @relation("Friendship")
  sentFriendRequests      FriendRequest[]         @relation("SentRequests")
  receivedFriendRequests  FriendRequest[]         @relation("ReceivedRequests")
  trainingProposalsSent   TrainingProposal[]      @relation("ProposalsSent")
  trainingProposalsRecv   TrainingProposal[]      @relation("ProposalsReceived")
  coaching                User[]                  @relation("CoachingRelationship")
  coachedBy               User?                   @relation("CoachingRelationship", fields: [coachId], references: [id])
  coachId                 String?
  judgedMatches           Match[]                 @relation("Referee")
  createdPlaygrounds      Playground[]
  reviews                 PlaygroundReview[]
  activities              Activity[]
  measurements            Measurement[]
  trainingLogs            TrainingLog[]
  inventory               InventoryItem[]
  foodLogEntries          FoodLogEntry[]
  pollVotes               PollVote[]
  coachProfile            CoachProfile?
  sentAnnouncements       TournamentAnnouncement[]
  notifications           Notification[]
  reportsMade             Report[]                @relation("ReportedBy")
  reportsReceived         Report[]                @relation("ReportedUser")
  reportsResolved         Report[]                @relation("ResolvedBy")

  @@index([coachId])
}

model CoachProfile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  rating         Float
  price          Decimal
}

model GalleryItem {
  id         String   @id @default(cuid())
  src        String
  alt        String
  dataAiHint String
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  @@index([userId])
}

model CareerHistoryItem {
  id       String @id @default(cuid())
  teamName String
  period   String
  role     String
  review   String
  user     User   @relation(fields: [userId], references: [id])
  userId   String

  @@index([userId])
}

model Team {
  id                 String               @id @default(cuid())
  name               String
  slug               String               @unique
  logo               String?
  dataAiHint         String?
  motto              String?
  game               String
  wins               Int                  @default(0)
  losses             Int                  @default(0)
  draws              Int                  @default(0)
  rank               Int                  @default(0)
  seekingSponsorship Boolean              @default(false)
  homePlaygroundId   String?
  creator            User                 @relation("Creator", fields: [creatorId], references: [id])
  creatorId          String
  captain            User                 @relation("Captain", fields: [captainId], references: [id])
  captainId          String
  members            User[]               @relation("Members")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]              @relation("Team1Matches")
  matchesAsTeam2     Match[]              @relation("Team2Matches")
  sponsors           Sponsor[]
  applications       TeamApplication[]
  chat               Chat?                @relation(fields: [chatId], references: [id])
  chatId             String?              @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@index([creatorId])
  @@index([captainId])
}

model Match {
  id            String      @id @default(cuid())
  team1         Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id       String
  team2         Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id       String
  team1Score    Int?
  team2Score    Int?
  scheduledAt   DateTime
  finishedAt    DateTime?
  status        MatchStatus @default(PLANNED)
  tournament    Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId  String?
  league        League?     @relation(fields: [leagueId], references: [id])
  leagueId      String?
  playgroundId  String?
  location      String?
  referee       User?       @relation("Referee", fields: [refereeId], references: [id])
  refereeId     String?
  refereeName   String?
  disputeReason String?
  disputeOpenedAt DateTime?
  resolution    String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([team1Id])
  @@index([team2Id])
  @@index([tournamentId])
  @@index([leagueId])
  @@index([refereeId])
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  game                  String
  description           String?
  type                  String
  format                String
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  status                String                   @default("REGISTRATION") // REGISTRATION, ONGOING, FINISHED
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  organizer             User                     @relation("Organizer", fields: [organizerId], references: [id])
  organizerId           String
  teams                 Team[]
  matches               Match[]
  applications          TeamApplication[]
  sponsors              Sponsor[]
  judges                User[]
  medicalPartners       MedicalPartner[]
  announcements         TournamentAnnouncement[]
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt

  @@index([organizerId])
}

model League {
  id          String      @id @default(cuid())
  name        String
  description String?
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int    @default(0)
  wins     Int    @default(0)
  losses   Int    @default(0)
  draws    Int    @default(0)
  points   Int    @default(0)

  @@index([leagueId])
  @@index([teamId])
}

model Playground {
  id                   String             @id @default(cuid())
  name                 String
  address              String
  type                 String
  surface              String
  features             String[]
  coverImage           String?
  coverImageHint       String?
  rating               Float
  checkIns             Int
  status               String // APPROVED, PENDING_MODERATION
  creator              User               @relation(fields: [creatorId], references: [id])
  creatorId            String
  reviews              PlaygroundReview[]
  checkInActivities    Activity[]
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@index([creatorId])
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())

  @@index([playgroundId])
  @@index([authorId])
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())

  @@unique([fromId, toId])
  @@index([fromId])
  @@index([toId])
}

model TrainingProposal {
  id        String   @id @default(cuid())
  from      User     @relation("ProposalsSent", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ProposalsReceived", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  comment   String?
  status    String   @default("PENDING")
  createdAt DateTime @default(now())

  @@index([fromId])
  @@index([toId])
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         String // PRIVATE or GROUP
  participants User[]
  messages     Message[]
  team         Team?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  text      String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())

  @@index([chatId])
  @@index([authorId])
}

model Activity {
  id           String       @id @default(cuid())
  type         ActivityType
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  metadata     Json
  timestamp    DateTime     @default(now())
  playground   Playground?  @relation(fields: [playgroundId], references: [id])
  playgroundId String?

  @@index([userId])
}

enum ActivityType {
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  STATUS_POSTED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model Sponsor {
  id           String       @id @default(cuid())
  name         String
  logo         String?
  logoHint     String?
  description  String
  profileUrl   String?
  interests    String[]
  promotions   Promotion[]
  tournaments  Tournament[]
  teams        Team[]
}

model Promotion {
  id          String    @id @default(cuid())
  name        String
  description String
  prize       String
  cost        String
  imageDataUri String
  imageHint   String
  endDate     DateTime
  organizer   User      @relation(fields: [organizerId], references: [id])
  organizerId String
  sponsor     Sponsor?  @relation(fields: [sponsorId], references: [id])
  sponsorId   String?

  @@index([organizerId])
  @@index([sponsorId])
}

model Challenge {
  id         String          @id @default(cuid())
  title      String
  description String
  discipline String
  wager      Int
  status     ChallengeStatus
  creator    User            @relation(fields: [creatorId], references: [id])
  creatorId  String
  opponent   User?           @relation(fields: [opponentId], references: [id])
  opponentId String?
  result     String? // e.g., 'creator_won', 'opponent_won'
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@index([creatorId])
  @@index([opponentId])
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model FaqItem {
    id String @id @default(cuid())
    category String
    question String
    answer String
    createdAt DateTime @default(now())
}

model LfgLobby {
  id            String       @id @default(cuid())
  type          LfgLobbyType
  sport         String
  location      String
  playgroundId  String?
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  creator       User         @relation(fields: [creatorId], references: [id])
  creatorId     String
  players       User[]

  @@index([creatorId])
}

enum LfgLobbyType {
  GAME
  TRAINING
}

model Measurement {
  id        String    @id @default(cuid())
  date      DateTime
  weight    Float
  bodyFat   Float?
  chest     Float?
  waist     Float?
  hips      Float?
  biceps    Float?
  thigh     Float?
  user      User      @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
}

model Exercise {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String
  category       String
  equipment      String
  image          String?
  imageHint      String?
  techniqueTips  String[]
  commonMistakes String[]
  alternatives   String[]
  loggedExercises LoggedExercise[]
}

model TrainingProgram {
  id              String         @id @default(cuid())
  name            String
  description     String
  goal            String
  daysPerWeek     Int
  splitType       String
  author          String
  coverImage      String
  coverImageHint  String
  isAiGenerated   Boolean        @default(false)
  weeklySplit     WorkoutDay[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  day               Int
  title             String
  exercises         WorkoutExercise[]
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String

  @@index([trainingProgramId])
}

model WorkoutExercise {
  id                      String      @id @default(cuid())
  name                    String
  sets                    String
  reps                    String
  plannedWeight           String?
  isSupersetWithPrevious  Boolean?
  technique               String?
  workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id])
  workoutDayId            String

  @@index([workoutDayId])
}

model TrainingLog {
  id          String           @id @default(cuid())
  date        DateTime
  workoutName String
  status      String // planned, completed, skipped
  mood        String? // great, good, ok, bad
  notes       String?
  coachNotes  String?
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  exercises   LoggedExercise[]

  @@index([userId])
}

model LoggedExercise {
  id            String       @id @default(cuid())
  trainingLog   TrainingLog  @relation(fields: [trainingLogId], references: [id])
  trainingLogId String
  exercise      Exercise     @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  notes         String?
  sets          LoggedSet[]

  @@index([trainingLogId])
  @@index([exerciseId])
}

model LoggedSet {
  id               String         @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Int?
  isCompleted      Boolean        @default(false)

  @@index([loggedExerciseId])
}

model InventoryItem {
  id             String   @id @default(cuid())
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime @default(now())

  @@index([userId])
}

model FoodItem {
  id             String         @id @default(cuid())
  name           String         @unique
  category       String
  image          String?
  imageHint      String?
  calories       Int
  protein        Float
  fat            Float
  carbs          Float
  description    String?
  logEntries     FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String // Завтрак, Обед, Ужин, Перекус
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([foodItemId])
}

model Poll {
  id String @id @default(cuid())
  title String
  question String
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  options PollOption[]
  votes PollVote[]
}

model PollOption {
  id String @id @default(cuid())
  text String
  poll Poll @relation(fields: [pollId], references: [id])
  pollId String
  votes PollVote[]

  @@index([pollId])
}

model PollVote {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  poll Poll @relation(fields: [pollId], references: [id])
  pollId String
  pollOption PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt DateTime @default(now())

  @@unique([userId, pollId])
  @@index([pollId])
  @@index([pollOptionId])
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  href      String?
  isRead    Boolean  @default(false)
  type      String
  createdAt DateTime @default(now())

  @@index([userId])
}

model TeamApplication {
  id           String @id @default(cuid())
  team         Team   @relation(fields: [teamId], references: [id])
  teamId       String
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  status       TeamApplicationStatus @default(PENDING)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@unique([teamId, tournamentId])
  @@index([teamId])
  @@index([tournamentId])
}

enum TeamApplicationStatus {
    PENDING
    APPROVED
    REJECTED
}

model TournamentAnnouncement {
    id String @id @default(cuid())
    tournament Tournament @relation(fields: [tournamentId], references: [id])
    tournamentId String
    sender User @relation(fields: [senderId], references: [id])
    senderId String
    subject String
    message String
    sentTo Int
    createdAt DateTime @default(now())
    
    @@index([tournamentId])
    @@index([senderId])
}

model MedicalPartner {
    id String @id @default(cuid())
    name String
    specialization String
    contact String
    tournaments Tournament[]
}

model Sport {
    id String @id @unique
    name String
    icon String
    category String
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model Report {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  reason         String
  context        String
  status         ReportStatus @default(PENDING)
  reporterId     String
  reporter       User         @relation("ReportedBy", fields: [reporterId], references: [id])
  reportedUserId String
  reportedUser   User         @relation("ReportedUser", fields: [reportedUserId], references: [id])
  resolution     String?
  resolvedAt     DateTime?
  resolverId     String?
  resolver       User?        @relation("ResolvedBy", fields: [resolverId], references: [id])

  @@index([reporterId])
  @@index([reportedUserId])
  @@index([resolverId])
}
