// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                 @id @default(cuid())
  name                    String
  email                   String                 @unique
  passwordHash            String
  avatar                  String?
  role                    String
  status                  String                 @default("Активен")
  xp                      Int                    @default(0)
  location                String?
  mainSport               String?
  dateOfBirth             DateTime?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  teamsAsMember           Team[]                 @relation("TeamMembers")
  teamsAsCaptain          Team[]                 @relation("TeamCaptain")
  teamsAsCreator          Team[]                 @relation("TeamCreator")
  organizedTournaments    Tournament[]           @relation("TournamentOrganizer")
  organizedPromotions     Promotion[]
  gallery                 GalleryItem[]
  careerHistory           CareerHistoryItem[]
  activities              Activity[]
  friends                 User[]                 @relation("Friendship")
  friendOf                User[]                 @relation("Friendship")
  sentFriendRequests      FriendRequest[]        @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]        @relation("ReceivedFriendRequests")
  coaching                User[]                 @relation("CoachStudent")
  coach                   User?                  @relation("CoachStudent", fields: [coachId], references: [id])
  coachId                 String?
  judgedMatches           Match[]                @relation("MatchJudges")
  createdPlaygrounds      Playground[]
  reviews                 PlaygroundReview[]
  trainingLogs            TrainingLog[]
  measurements            Measurement[]
  sentTrainingProposals   TrainingProposal[]     @relation("TrainingProposalsFrom")
  receivedTrainingProposals TrainingProposal[]   @relation("TrainingProposalsTo")
  pollVotes               PollVote[]
  inventory               InventoryItem[]
  foodLog                 FoodLogEntry[]
  notifications           Notification[]
  sentMessages            Message[]
  chats                   Chat[]                 @relation("ChatParticipants")
  judgingTournaments      Tournament[]           @relation("TournamentJudges")
  medicalPartnerships     Tournament[]           @relation("TournamentMedicalPartners")
  coachProfile            CoachProfile?
  sponsorships            Sponsorship[]
}

model CoachProfile {
    id             String  @id @default(cuid())
    user           User    @relation(fields: [userId], references: [id])
    userId         String  @unique
    specialization String
    description    String
    tags           String[]
    rating         Float
    price          Decimal
}

model Team {
  id                 String               @id @default(cuid())
  name               String
  slug               String               @unique
  game               String
  motto              String?
  description        String?
  logo               String?
  dataAiHint         String?
  rank               Int                  @default(5)
  wins               Int                  @default(0)
  losses             Int                  @default(0)
  draws              Int                  @default(0)
  creatorId          String
  captainId          String
  creator            User                 @relation("TeamCreator", fields: [creatorId], references: [id])
  captain            User                 @relation("TeamCaptain", fields: [captainId], references: [id])
  members            User[]               @relation("TeamMembers")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]              @relation("MatchTeam1")
  matchesAsTeam2     Match[]              @relation("MatchTeam2")
  homePlaygroundId   String?
  homePlayground     Playground?          @relation(fields: [homePlaygroundId], references: [id])
  seekingSponsorship Boolean              @default(false)
  sponsors           Sponsor[]
  applications       TeamApplication[]
  practices          TeamPractice[]
  chat               Chat?                @relation(name: "TeamChat")
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  tournament   Tournament            @relation(fields: [tournamentId], references: [id])
  tournamentId String
  status       TeamApplicationStatus @default(PENDING)
  createdAt    DateTime              @default(now())

  @@unique([teamId, tournamentId])
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  game                    String
  description             String?
  status                  String                   @default("PLANNED") // e.g., REGISTRATION, ONGOING, FINISHED
  type                    String
  format                  String
  category                String
  location                String
  participantCount        Int
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  organizerId             String
  organizer               User                     @relation("TournamentOrganizer", fields: [organizerId], references: [id])
  teams                   Team[]
  matches                 Match[]
  announcements           TournamentAnnouncement[]
  judges                  User[]                   @relation("TournamentJudges")
  medicalPartners         MedicalPartner[]         @relation("TournamentMedicalPartners")
  sponsors                Sponsor[]
  applications            TeamApplication[]
}

model Match {
  id             String      @id @default(cuid())
  team1          Team        @relation("MatchTeam1", fields: [team1Id], references: [id])
  team1Id        String
  team2          Team        @relation("MatchTeam2", fields: [team2Id], references: [id])
  team2Id        String
  team1Score     Int?
  team2Score     Int?
  status         MatchStatus @default(PLANNED)
  scheduledAt    DateTime
  finishedAt     DateTime?
  tournamentId   String?
  tournament     Tournament? @relation(fields: [tournamentId], references: [id])
  leagueId       String?
  league         League?     @relation(fields: [leagueId], references: [id])
  disputeReason  String?
  disputeOpenedAt DateTime?
  resolution     String?
  refereeName    String?
  judges         User[]      @relation("MatchJudges")
  playgroundId   String?
  location       String?
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model GalleryItem {
  id          String   @id @default(cuid())
  src         String
  alt         String
  dataAiHint  String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}

model CareerHistoryItem {
  id       String @id @default(cuid())
  teamName String
  period   String
  role     String
  review   String
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Activity {
  id           String      @id @default(cuid())
  type         ActivityType
  metadata     Json
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  timestamp    DateTime    @default(now())
  playgroundId String?
}

enum ActivityType {
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  STATUS_POSTED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model FriendRequest {
  id        String   @id @default(cuid())
  fromId    String
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
}

model Challenge {
    id String @id @default(cuid())
    title String
    description String
    discipline String
    wager Int
    creatorId String
    opponentId String?
    status ChallengeStatus
    result String?
    creator User @relation(fields: [creatorId], references: [id])
    opponent User? @relation(fields: [opponentId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum ChallengeStatus {
    OPEN
    IN_PROGRESS
    COMPLETED
    CANCELLED
}

model Playground {
    id             String             @id @default(cuid())
    name           String
    address        String
    type           String
    coverImage     String?
    coverImageHint String?
    surface        String
    features       String[]
    rating         Float
    checkIns       Int
    status         String // e.g., 'approved', 'pending_moderation'
    creatorId      String
    creator        User               @relation(fields: [creatorId], references: [id])
    reviews        PlaygroundReview[]
    Team           Team[]
    TeamPractice   TeamPractice[]
}

model PlaygroundReview {
    id           String     @id @default(cuid())
    playgroundId String
    playground   Playground @relation(fields: [playgroundId], references: [id])
    authorId     String
    author       User       @relation(fields: [authorId], references: [id])
    rating       Int
    comment      String
    createdAt    DateTime   @default(now())
}


model Sponsor {
    id           String        @id @default(cuid())
    name         String
    logo         String?
    logoHint     String?
    description  String
    profileUrl   String
    interests    String[]
    tournaments  Tournament[]
    teams        Team[]
    promotions   Promotion[]
}

model Sponsorship {
  id      String @id @default(cuid())
  teamId  String
  userId  String
  team    Team   @relation(fields: [teamId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
}

model Message {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  type         String // DIRECT, GROUP
  participants User[]    @relation("ChatParticipants")
  messages     Message[]
  teamId       String?   @unique
  team         Team?     @relation(name: "TeamChat", fields: [teamId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Notification {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    message   String
    type      String // FRIEND_REQUEST, MATCH_RESULT, ANNOUNCEMENT
    href      String?
    isRead    Boolean  @default(false)
    createdAt DateTime @default(now())
}

model StoreItem {
    id String @id @default(cuid())
    name String
    description String
    price Float
    image String?
    imageHint String?
    category String
    isRealMoney Boolean @default(false)
}

model Promotion {
    id            String    @id @default(cuid())
    name          String
    description   String
    prize         String
    cost          String
    imageDataUri  String
    imageHint     String
    endDate       DateTime
    organizerId   String
    organizer     User      @relation(fields: [organizerId], references: [id])
    sponsorId     String?
    sponsor       Sponsor?  @relation(fields: [sponsorId], references: [id])
    createdAt     DateTime  @default(now())
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int
  wins     Int
  losses   Int
  draws    Int
  points   Int
}

model Sport {
    id          String @id @unique
    name        String
    icon        String
    category    String
}

model LfgLobby {
    id            String   @id @default(cuid())
    type          LfgLobbyType
    sport         String
    location      String
    playgroundId  String?
    creatorId     String
    creator       User     @relation(fields: [creatorId], references: [id])
    startTime     DateTime
    endTime       DateTime
    playersNeeded Int
    players       User[]
    comment       String
    createdAt     DateTime @default(now())
}

enum LfgLobbyType {
    GAME
    TRAINING
}

model Measurement {
    id      String    @id @default(cuid())
    date    DateTime
    weight  Float
    bodyFat Float?
    chest   Float?
    waist   Float?
    hips    Float?
    biceps  Float?
    thigh   Float?
    userId  String
    user    User      @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
}

model TrainingProposal {
    id         String   @id @default(cuid())
    fromId     String
    from       User     @relation("TrainingProposalsFrom", fields: [fromId], references: [id])
    toId       String
    to         User     @relation("TrainingProposalsTo", fields: [toId], references: [id])
    sport      String
    date       DateTime
    comment    String?
    status     String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model TrainingProgram {
    id String @id @default(cuid())
    name String
    description String
    goal String
    daysPerWeek Int
    splitType String
    author String
    coverImage String
    coverImageHint String
    isAiGenerated Boolean @default(false)
    weeklySplit WorkoutDay[]
}

model WorkoutDay {
    id String @id @default(cuid())
    day Int
    title String
    programId String
    program TrainingProgram @relation(fields: [programId], references: [id])
    exercises ExerciseInWorkoutDay[]
}

model ExerciseInWorkoutDay {
    id String @id @default(cuid())
    dayId String
    day WorkoutDay @relation(fields: [dayId], references: [id])
    name String
    sets String
    reps String
    plannedWeight String?
    isSupersetWithPrevious Boolean?
    technique String?
}

model Exercise {
    id String @id @default(cuid())
    name String
    description String
    category String
    equipment String
    image String?
    imageHint String?
    techniqueTips String[]
    commonMistakes String[]
    alternatives String[]
    loggedExercises LoggedExercise[]
}

model TrainingLog {
    id String @id @default(cuid())
    date DateTime
    workoutName String
    status String // completed, planned, skipped
    notes String?
    coachNotes String?
    mood String? // great, good, ok, bad
    userId String
    user User @relation(fields: [userId], references: [id])
    exercises LoggedExercise[]
    createdAt DateTime @default(now())
}

model LoggedExercise {
    id String @id @default(cuid())
    trainingLogId String
    trainingLog TrainingLog @relation(fields: [trainingLogId], references: [id])
    exerciseId String
    exercise Exercise @relation(fields: [exerciseId], references: [id])
    notes String?
    sets LoggedSet[]
}

model LoggedSet {
    id String @id @default(cuid())
    loggedExerciseId String
    loggedExercise LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
    plannedReps String
    plannedWeight String?
    loggedReps Int?
    loggedWeight Int?
    rpe Int? // Rate of Perceived Exertion
    isCompleted Boolean @default(false)
}

model Poll {
    id        String       @id @default(cuid())
    title     String
    question  String
    isActive  Boolean      @default(true)
    createdAt DateTime     @default(now())
    options   PollOption[]
    votes     PollVote[]
}

model PollOption {
    id        String     @id @default(cuid())
    text      String
    pollId    String
    poll      Poll       @relation(fields: [pollId], references: [id])
    votes     PollVote[]
}

model PollVote {
    id           String     @id @default(cuid())
    userId       String
    user         User       @relation(fields: [userId], references: [id])
    pollId       String
    poll         Poll       @relation(fields: [pollId], references: [id])
    pollOptionId String
    pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
    createdAt    DateTime   @default(now())

    @@unique([userId, pollId])
}

model Quest {
    id          String    @id @default(cuid())
    type        QuestType
    title       String
    description String
    reward      Int
    goal        Int
    href        String
    createdAt   DateTime  @default(now())
}

enum QuestType {
    DAILY
    WEEKLY
    SPECIAL
}

model UserQuest {
    userId    String
    questId   String
    progress  Int
    completed Boolean @default(false)
    // composite primary key
    @@id([userId, questId])
}

model InventoryItem {
  id             String   @id @default(cuid())
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
}

model FoodItem {
    id          String         @id @default(cuid())
    name        String
    category    String
    image       String?
    imageHint   String?
    calories    Float
    protein     Float
    fat         Float
    carbs       Float
    description String?
    logEntries  FoodLogEntry[]
}

model FoodLogEntry {
    id         String   @id @default(cuid())
    userId     String
    user       User     @relation(fields: [userId], references: [id])
    foodItemId String
    foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
    grams      Int
    meal       String // Завтрак, Обед, Ужин, Перекус
    createdAt  DateTime @default(now())
}

model FaqItem {
    id        String   @id @default(cuid())
    category  String
    question  String
    answer    String
    createdAt DateTime @default(now())
}

model TournamentAnnouncement {
    id           String     @id @default(cuid())
    subject      String
    message      String
    tournamentId String
    tournament   Tournament @relation(fields: [tournamentId], references: [id])
    senderId     String
    sender       User       @relation(fields: [senderId], references: [id])
    sentTo       Int
    createdAt    DateTime   @default(now())
}

model MedicalPartner {
    id             String       @id @default(cuid())
    name           String
    specialization String
    contact        String
    tournaments    Tournament[] @relation("TournamentMedicalPartners")
}

model Report {
    id               String       @id @default(cuid())
    reporterId       String
    reporter         User         @relation(name: "ReportedBy", fields: [reporterId], references: [id])
    reportedUserId   String
    reportedUser     User         @relation(name: "ReportedUser", fields: [reportedUserId], references: [id])
    reason           String
    context          String
    status           ReportStatus @default(PENDING)
    resolution       String?
    resolverId       String?
    resolver         User?        @relation(name: "ResolvedBy", fields: [resolverId], references: [id])
    createdAt        DateTime     @default(now())
    resolvedAt       DateTime?
}

enum ReportStatus {
    PENDING
    RESOLVED
    DISMISSED
}

relations:
User ReportedBy:
  from: Report
  to: User
  name: ReportedBy
  fields: [reporterId]
  references: [id]

User ReportedUser:
  from: Report
  to: User
  name: ReportedUser
  fields: [reportedUserId]
  references: [id]

User ResolvedBy:
  from: Report
  to: User
  name: ResolvedBy
  fields: [resolverId]
  references: [id]
