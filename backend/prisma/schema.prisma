// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(uuid())
  name                    String
  email                   String    @unique
  emailVerified           DateTime?
  passwordHash            String
  avatar                  String?
  role                    String    @default("Игрок")
  status                  String    @default("Активен")
  xp                      Int       @default(0)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  teamsAsCaptain          Team[]    @relation("Captain")
  teamsAsMember           Team[]    @relation("TeamMembers")
  createdTeams            Team[]    @relation("Creator")
  organizedTournaments    Tournament[]
  activities              Activity[]
  friends                 User[]     @relation("Friendship")
  friendOf                User[]     @relation("Friendship")
  sentFriendRequests      FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[] @relation("ReceivedFriendRequests")
  createdPlaygrounds      Playground[]
  organizedPromotions     Promotion[]
  createdLfgLobbies       LfgLobby[] @relation("LfgCreator")
  lfgLobbies              LfgLobby[] @relation("LfgPlayers")
  notifications           Notification[]
  measurements            Measurement[]
  foodLog                 FoodLogEntry[]
  trainingLogs            TrainingLog[]
  location                String?
  mainSport               String?
  dateOfBirth             DateTime?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  gallery                 GalleryItem[]
  careerHistory           CareerHistory[]
  coaching                User[] @relation("CoachToStudent")
  coach                   User? @relation("CoachToStudent", fields: [coachId], references: [id])
  coachId                 String?
  judgedMatches           Match[] @relation("JudgedMatches")
  trainingProposalsFrom   TrainingProposal[] @relation("ProposalsFrom")
  trainingProposalsTo     TrainingProposal[] @relation("ProposalsTo")
  coachProfile            CoachProfile?
}

model CoachProfile {
    id              String @id @default(uuid())
    user            User   @relation(fields: [userId], references: [id])
    userId          String @unique
    specialization  String
    description     String
    tags            String[]
    rating          Float  @default(5.0)
    price           Decimal @default(1000)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model Team {
  id                 String       @id @default(uuid())
  name               String
  slug               String       @unique
  logo               String?
  dataAiHint         String?
  motto              String?
  game               String
  rank               Int          @default(5)
  wins               Int          @default(0)
  losses             Int          @default(0)
  draws              Int          @default(0)
  creator            User         @relation("Creator", fields: [creatorId], references: [id])
  creatorId          String
  captain            User         @relation("Captain", fields: [captainId], references: [id])
  captainId          String
  members            User[]       @relation("TeamMembers")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]      @relation("Team1")
  matchesAsTeam2     Match[]      @relation("Team2")
  seekingSponsorship Boolean      @default(false)
  sponsors           Sponsor[]
  homePlayground     Playground?  @relation(fields: [homePlaygroundId], references: [id])
  homePlaygroundId   String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model Match {
  id            String      @id @default(uuid())
  team1         Team        @relation("Team1", fields: [team1Id], references: [id])
  team1Id       String
  team2         Team        @relation("Team2", fields: [team2Id], references: [id])
  team2Id       String
  team1Score    Int?
  team2Score    Int?
  tournament    Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId  String?
  status        MatchStatus @default(PLANNED)
  scheduledAt   DateTime
  finishedAt    DateTime?
  location      String?
  referee       User?       @relation("JudgedMatches", fields: [refereeId], references: [id])
  refereeId     String?
  refereeName   String?
  league        League?     @relation(fields: [leagueId], references: [id])
  leagueId      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Tournament {
  id                      String   @id @default(uuid())
  name                    String
  slug                    String   @unique
  game                    String
  format                  String
  prizePool               String?
  organizer               User     @relation(fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
  status                  String   @default("REGISTRATION") // REGISTRATION, ONGOING, FINISHED
  bannerImage             String?
  bannerImageHint         String?
  description             String?
  rules                   String?
  type                    String   @default("team") // team, individual
  category                String
  location                String
  participantCount        Int
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model Activity {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  type      ActivityType
  metadata  Json
  timestamp DateTime   @default(now())
}

enum ActivityType {
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
}

model FriendRequest {
    id        String @id @default(uuid())
    from      User   @relation("SentFriendRequests", fields: [fromId], references: [id])
    fromId    String
    to        User   @relation("ReceivedFriendRequests", fields: [toId], references: [id])
    toId      String
    status    String @default("PENDING") // PENDING, ACCEPTED, DECLINED
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([fromId, toId])
}

model Playground {
  id                  String  @id @default(uuid())
  name                String
  address             String
  type                String
  coverImage          String?
  coverImageHint      String?
  surface             String
  features            String[]
  rating              Float
  checkIns            Int
  status              String // APPROVED, PENDING_MODERATION
  creator             User     @relation(fields: [creatorId], references: [id])
  creatorId           String
  teamsWithHome       Team[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Challenge {
  id              String           @id @default(uuid())
  title           String
  description     String
  discipline      String
  wager           Int
  creator         User             @relation(fields: [creatorId], references: [id])
  creatorId       String
  opponent        User?            @relation(fields: [opponentId], references: [id])
  opponentId      String?
  status          ChallengeStatus
  result          String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Sponsor {
    id              String @id @default(uuid())
    name            String
    logo            String?
    logoHint        String?
    description     String
    profileUrl      String
    interests       String[]
    sponsoredTeams  Team[]
    promotions      Promotion[]
}

model Promotion {
    id              String @id @default(uuid())
    name            String
    description     String
    prize           String
    imageDataUri    String
    imageHint       String
    endDate         DateTime
    cost            String
    organizer       User     @relation(fields: [organizerId], references: [id])
    organizerId     String
    sponsor         Sponsor? @relation(fields: [sponsorId], references: [id])
    sponsorId       String?
    createdAt       DateTime @default(now())
}

model Chat {
    id              String @id @default(uuid())
    name            String?
    type            String // DIRECT, GROUP
    participants    User[]
    messages        Message[]
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model Message {
    id          String @id @default(uuid())
    chat        Chat   @relation(fields: [chatId], references: [id])
    chatId      String
    author      User   @relation(fields: [authorId], references: [id])
    authorId    String
    text        String
    createdAt   DateTime @default(now())
}

model Notification {
    id          String @id @default(uuid())
    user        User   @relation(fields: [userId], references: [id])
    userId      String
    type        String // FRIEND_REQUEST, MATCH_RESULT, etc.
    message     String
    href        String?
    isRead      Boolean @default(false)
    createdAt   DateTime @default(now())
}

model FaqItem {
    id          String @id @default(uuid())
    question    String
    answer      String
    category    String
}

model StoreItem {
    id              String @id @default(uuid())
    name            String
    description     String
    price           Float
    image           String?
    imageHint       String?
    category        String
    isRealMoney     Boolean @default(false)
}

model League {
    id          String @id @default(uuid())
    name        String
    description String
    game        String
    image       String
    imageHint   String
    teams       LeagueTeam[]
    matches     Match[]
}

model LeagueTeam {
    id          String @id @default(uuid())
    league      League @relation(fields: [leagueId], references: [id])
    leagueId    String
    team        Team @relation(fields: [teamId], references: [id])
    teamId      String @unique
    played      Int
    wins        Int
    losses      Int
    draws       Int
    points      Int
}

model LfgLobby {
    id              String @id @default(uuid())
    type            LfgLobbyType
    sport           String
    location        String
    playgroundId    String?
    startTime       DateTime
    endTime         DateTime
    creator         User     @relation("LfgCreator", fields: [creatorId], references: [id])
    creatorId       String
    players         User[]   @relation("LfgPlayers")
    playersNeeded   Int
    comment         String
    createdAt       DateTime @default(now())
}

enum LfgLobbyType {
    GAME
    TRAINING
}

model Sport {
    id          String @id
    name        String
    icon        String
    category    String
}

model TrainingLog {
    id          String @id @default(uuid())
    user        User @relation(fields: [userId], references: [id])
    userId      String
    date        DateTime
    workoutName String
    status      String // completed, planned, skipped
    exercises   LoggedExercise[]
    mood        String?
    notes       String?
    coachNotes  String?
}

model LoggedExercise {
    id              String @id @default(uuid())
    trainingLog     TrainingLog @relation(fields: [trainingLogId], references: [id])
    trainingLogId   String
    exercise        Exercise @relation(fields: [exerciseId], references: [id])
    exerciseId      String
    notes           String?
    isSupersetWithPrevious Boolean?
    sets            LoggedSet[]
}

model LoggedSet {
    id                  String @id @default(uuid())
    loggedExercise      LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
    loggedExerciseId    String
    plannedReps         String?
    plannedWeight       String?
    loggedReps          Int?
    loggedWeight        Float?
    rpe                 Int?
    isCompleted         Boolean @default(false)
}

model Exercise {
    id                  String @id @default(uuid())
    name                String
    description         String
    category            String
    equipment           String
    image               String?
    imageHint           String?
    techniqueTips       String[]
    commonMistakes      String[]
    alternatives        String[]
    loggedExercises     LoggedExercise[]
}

model TrainingProgram {
    id                  String @id @default(cuid())
    name                String
    description         String
    goal                String
    daysPerWeek         Int
    splitType           String
    author              String
    coverImage          String
    coverImageHint      String
    isAiGenerated       Boolean @default(false)
    weeklySplit         WorkoutDay[]
}

model WorkoutDay {
    id                  String @id @default(cuid())
    trainingProgram     TrainingProgram @relation(fields: [trainingProgramId], references: [id])
    trainingProgramId   String
    day                 Int
    title               String
    exercises           ExerciseDetail[]
}

model ExerciseDetail {
    id                      String @id @default(cuid())
    workoutDay              WorkoutDay @relation(fields: [workoutDayId], references: [id])
    workoutDayId            String
    name                    String
    sets                    String
    reps                    String
    plannedWeight           String?
    isSupersetWithPrevious  Boolean?
    technique               String?
}

model GalleryItem {
    id          String @id @default(uuid())
    user        User   @relation(fields: [userId], references: [id])
    userId      String
    src         String
    alt         String
    dataAiHint  String
    createdAt   DateTime @default(now())
}

model CareerHistory {
    id          String @id @default(uuid())
    user        User   @relation(fields: [userId], references: [id])
    userId      String
    teamName    String
    period      String
    role        String
    review      String
    createdAt   DateTime @default(now())
}

model Measurement {
    id          String @id @default(uuid())
    user        User   @relation(fields: [userId], references: [id])
    userId      String
    date        DateTime
    weight      Float
    bodyFat     Float?
    chest       Float?
    waist       Float?
    hips        Float?
    biceps      Float?
    thigh       Float?
}

model FoodItem {
    id          String @id @default(uuid())
    name        String
    category    String
    image       String?
    imageHint   String?
    calories    Float
    protein     Float
    fat         Float
    carbs       Float
    description String?
    entries     FoodLogEntry[]
}

model FoodLogEntry {
    id          String @id @default(uuid())
    user        User   @relation(fields: [userId], references: [id])
    userId      String
    foodItem    FoodItem @relation(fields: [foodItemId], references: [id])
    foodItemId  String
    grams       Int
    meal        String // Breakfast, Lunch, Dinner, Snack
    createdAt   DateTime @default(now())
}

model TrainingProposal {
    id          String @id @default(uuid())
    from        User   @relation("ProposalsFrom", fields: [fromId], references: [id])
    fromId      String
    to          User   @relation("ProposalsTo", fields: [toId], references: [id])
    toId        String
    sport       String
    date        DateTime
    comment     String?
    status      String @default("PENDING") // PENDING, ACCEPTED, DECLINED
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}
