// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                @id @default(cuid())
  email                 String                @unique
  name                  String
  role                  String
  status                String
  xp                    Int                   @default(0)
  passwordHash          String
  avatar                String?
  location              String?
  mainSport             String?
  preferredSports       String[]
  telegram              String?
  discord               String?
  dateOfBirth           DateTime?
  teams                 Team[]                @relation("TeamMembers")
  captainOf             Team[]                @relation("TeamCaptain")
  organizedTournaments  Tournament[]
  createdPlaygrounds    Playground[]
  challengesAsCreator   Challenge[]           @relation("CreatorChallenges")
  challengesAsOpponent  Challenge[]           @relation("OpponentChallenges")
  friendRequestsSent    FriendRequest[]       @relation("SentRequests")
  friendRequestsReceived FriendRequest[]      @relation("ReceivedRequests")
  friends               User[]                @relation("Friendship")
  friendsOf             User[]                @relation("Friendship")
  activities            Activity[]
  messages              Message[]
  notifications         Notification[]
  gallery               GalleryItem[]
  careerHistory         CareerHistoryItem[]
  coachProfile          Coach?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
}

model Team {
  id                 String       @id @default(cuid())
  name               String
  slug               String       @unique
  game               String
  motto              String?
  description        String?
  logo               String?
  dataAiHint         String?
  homePlaygroundId   String?
  rank               Int          @default(1)
  wins               Int          @default(0)
  losses             Int          @default(0)
  draws              Int          @default(0)
  captain            User         @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId          String
  members            User[]       @relation("TeamMembers")
  tournaments        Tournament[] @relation("TournamentTeams")
  matchesAsTeam1     Match[]      @relation("Team1Matches")
  matchesAsTeam2     Match[]      @relation("Team2Matches")
  seekingSponsorship Boolean      @default(true)
  sponsors           Sponsor[]    @relation("TeamSponsorships")
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model Tournament {
  id                    String    @id @default(cuid())
  name                  String
  slug                  String    @unique
  game                  String
  description           String?
  type                  String
  format                String
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  status                String // REGISTRATION, ONGOING, FINISHED
  organizer             User      @relation(fields: [organizerId], references: [id])
  organizerId           String
  teams                 Team[]    @relation("TournamentTeams")
  matches               Match[]
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Match {
  id           String      @id @default(cuid())
  team1        Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id      String
  team2        Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id      String
  team1Score   Int?
  team2Score   Int?
  status       MatchStatus
  scheduledAt  DateTime
  finishedAt   DateTime?
  location     String?
  refereeName  String?
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  messages     Message[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Challenge {
  id          String           @id @default(cuid())
  title       String
  description String
  discipline  String
  wager       Int
  creator     User             @relation("CreatorChallenges", fields: [creatorId], references: [id])
  creatorId   String
  opponent    User?            @relation("OpponentChallenges", fields: [opponentId], references: [id])
  opponentId  String?
  status      ChallengeStatus
  result      String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Playground {
  id             String           @id @default(cuid())
  name           String
  address        String
  type           String
  coverImage     String?
  coverImageHint String?
  surface        String
  features       String[]
  rating         Float
  checkIns       Int
  status         PlaygroundStatus
  creator        User             @relation(fields: [creatorId], references: [id])
  creatorId      String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model FriendRequest {
  id        String   @id @default(cuid())
  from      User     @relation("SentRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Activity {
  id        String       @id @default(cuid())
  type      ActivityType
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  metadata  Json
  timestamp DateTime     @default(now())
}

model Message {
  id        String   @id @default(cuid())
  text      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chatId    String // Can be a userId for DMs or teamId for team chats
  match     Match?   @relation(fields: [matchId], references: [id])
  matchId   String?
  createdAt DateTime @default(now())
}

model Notification {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  type      NotificationType
  message   String
  href      String?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
}

model GalleryItem {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  src        String
  alt        String
  dataAiHint String
  createdAt  DateTime @default(now())
}

model CareerHistoryItem {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model Coach {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id])
  specialization String
  description    String
  rating         Float
  price          String
  tags           String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Sponsor {
  id          String   @id @default(cuid())
  name        String   @unique
  logo        String?
  logoHint    String?
  description String
  profileUrl  String?
  interests   String[]
  teams       Team[]   @relation("TeamSponsorships")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StoreItem {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
}

enum ActivityType {
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}
