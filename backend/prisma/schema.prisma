// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String                    @id @default(cuid())
  email                     String                    @unique
  name                      String
  role                      String                    @default("Игрок") // e.g., "Игрок", "Капитан", "Организатор"
  passwordHash              String // In a real app, this should be handled by an IdP like Keycloak
  avatar                    String?
  status                    String                    @default("Активен") // e.g., "Активен", "Забанен"
  xp                        Int                       @default(0)
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  location                  String?
  mainSport                 String?
  isVerified                Boolean                   @default(false)
  dateOfBirth               DateTime?
  preferredSports           String[]
  telegram                  String?
  discord                   String?
  creatorOf                 Team[]                    @relation("CreatorOfTeam")
  captainOf                 Team[]                    @relation("CaptainOfTeam")
  memberOf                  Team[]                    @relation("MembersOfTeam")
  organizedTournaments      Tournament[]
  careerHistory             CareerHistoryItem[]
  gallery                   GalleryItem[]
  activities                Activity[]
  friends                   User[]                    @relation("Friendships")
  friendsOf                 User[]                    @relation("Friendships")
  sentFriendRequests        FriendRequest[]           @relation("SentFriendRequests")
  receivedFriendRequests    FriendRequest[]           @relation("ReceivedFriendRequests")
  authoredMessages          Message[]
  coaching                  User[]                    @relation("CoachStudent")
  coachedBy                 User?                     @relation("CoachStudent", fields: [coachId], references: [id])
  coachId                   String?
  judgedMatches             Match[]
  createdChallenges         Challenge[]               @relation("ChallengeCreator")
  acceptedChallenges        Challenge[]               @relation("ChallengeOpponent")
  playgrounds               Playground[]
  reviews                   PlaygroundReview[]
  authoredPlaygroundReports PlaygroundReport[]        @relation("ReporterOfPlaygroundReport")
  resolvedPlaygroundReports PlaygroundReport[]        @relation("ResolverOfPlaygroundReport")
  authoredReports           Report[]                  @relation("ReporterOfReport")
  resolvedReports           Report[]                  @relation("ResolverOfReport")
  reportedIn                Report[]                  @relation("ReportedInReport")
  coachProfile              CoachProfile?
  inventory                 InventoryItem[]
  measurements              Measurement[]
  teamApplications          TeamApplication[]
  trainingProposalsSent     TrainingProposal[]        @relation("TrainingProposalsSent")
  trainingProposalsReceived TrainingProposal[]        @relation("TrainingProposalsReceived")
  pollVotes                 PollVote[]
  authoredPolls             Poll[]                    @relation("UserPolls")
  trainingLogs              TrainingLog[]
}

model Team {
  id                 String              @id @default(cuid())
  name               String              @unique
  slug               String              @unique
  game               String
  motto              String?
  description        String?
  logo               String?
  dataAiHint         String?
  rank               Int                 @default(0)
  wins               Int                 @default(0)
  losses             Int                 @default(0)
  draws              Int                 @default(0)
  creatorId          String
  captainId          String
  homePlaygroundId   String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  creator            User                @relation("CreatorOfTeam", fields: [creatorId], references: [id])
  captain            User                @relation("CaptainOfTeam", fields: [captainId], references: [id])
  members            User[]              @relation("MembersOfTeam")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]             @relation("Team1Matches")
  matchesAsTeam2     Match[]             @relation("Team2Matches")
  chat               Chat?
  teamApplications   TeamApplication[]
  seekingSponsorship Boolean             @default(false)
  sponsors           Sponsor[]
  practices          TeamPractice[]
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  playgroundId String
  createdAt    DateTime   @default(now())
}

model Tournament {
  id                      String                   @id @default(cuid())
  name                    String
  slug                    String                   @unique
  game                    String
  description             String?
  type                    String
  format                  String
  category                String
  location                String
  participantCount        Int
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  prizePool               String?
  rules                   String?
  bannerImage             String?
  bannerImageHint         String?
  status                  String
  organizer               User                     @relation(fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  media                   TournamentMedia[]
  judges                  User[]
  sponsors                Sponsor[]
  medicalPartners         MedicalPartner[]
  announcements           TournamentAnnouncement[]
  teamApplications        TeamApplication[]
}

model Match {
  id              String       @id @default(cuid())
  team1           Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournament      Tournament?  @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  playgroundId    String?
  location        String?
  referee         User?        @relation(fields: [refereeId], references: [id])
  refereeId       String?
  refereeName     String? // Denormalized for easy access if referee is external
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  league          League?      @relation(fields: [leagueId], references: [id])
  leagueId        String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Playground {
  id               String               @id @default(cuid())
  name             String
  address          String
  type             String
  coverImage       String?
  coverImageHint   String?
  surface          String
  features         String[]
  rating           Float                @default(0)
  checkIns         Int                  @default(0)
  status           PlaygroundStatus     @default(PENDING_MODERATION)
  creatorId        String
  creator          User                 @relation(fields: [creatorId], references: [id])
  createdAt        DateTime             @default(now())
  reviews          PlaygroundReview[]
  reports          PlaygroundReport[]
  practices        TeamPractice[]
  activities       Activity[]
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

model CareerHistoryItem {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model GalleryItem {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  src        String
  alt        String
  dataAiHint String
  createdAt  DateTime @default(now())
}

model FriendRequest {
  id        String                @id @default(cuid())
  from      User                  @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                  @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus   @default(PENDING)
  createdAt DateTime              @default(now())

  @@unique([fromId, toId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime @default(now())
}

model Chat {
  id           String    @id @default(cuid())
  name         String? // For group chats
  isGroup      Boolean   @default(false)
  type         ChatType  @default(PRIVATE)
  messages     Message[]
  participants User[]
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum ChatType {
  PRIVATE
  GROUP
}

model Activity {
  id           String      @id @default(cuid())
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  type         ActivityType
  metadata     Json
  playgroundId String?
  playground   Playground? @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())

  @@index([userId])
}

enum ActivityType {
  STATUS_POSTED
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
  PLAYGROUND_CHECK_IN
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  discipline   Sport           @relation(fields: [disciplineId], references: [id])
  disciplineId String
  wager        Int             @default(0)
  creator      User            @relation("ChallengeCreator", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?           @relation("ChallengeOpponent", fields: [opponentId], references: [id])
  opponentId   String?
  status       ChallengeStatus @default(OPEN)
  result       String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@index([creatorId])
  @@index([opponentId])
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String?
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String         @id @default(cuid())
  playground   Playground     @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User           @relation("ReporterOfPlaygroundReport", fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String
  summary      String
  status       ReportStatus   @default(PENDING)
  resolver     User?          @relation("ResolverOfPlaygroundReport", fields: [resolverId], references: [id])
  resolverId   String?
  resolution   String?
  resolvedAt   DateTime?
  createdAt    DateTime       @default(now())
}

model LfgLobby {
  id            String         @id @default(cuid())
  creator       User           @relation(fields: [creatorId], references: [id])
  creatorId     String
  type          LfgLobbyType
  sport         String
  location      String
  playgroundId  String?
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  comment       String
  players       User[]
  status        LfgLobbyStatus @default(OPEN)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum LfgLobbyType {
  GAME
  TRAINING
}

enum LfgLobbyStatus {
  OPEN
  FULL
  IN_PROGRESS
  FINISHED
  CANCELLED
}

model Measurement {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  weight    Float // in kg
  bodyFat   Float? // in %
  chest     Float? // in cm
  waist     Float? // in cm
  hips      Float? // in cm
  biceps    Float? // in cm
  thigh     Float? // in cm
  createdAt DateTime  @default(now())
}

model TrainingProposal {
  id        String                 @id @default(cuid())
  from      User                   @relation("TrainingProposalsSent", fields: [fromId], references: [id])
  fromId    String
  to        User                   @relation("TrainingProposalsReceived", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  comment   String?
  status    TrainingProposalStatus @default(PENDING)
  program   TrainingProgram?       @relation(fields: [programId], references: [id])
  programId String?
  createdAt DateTime               @default(now())
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model TrainingLog {
  id          String            @id @default(cuid())
  user        User              @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  workoutName String?
  status      TrainingLogStatus @default(PLANNED)
  exercises   LoggedExercise[]
  mood        Mood?
  notes       String?
  coachNotes  String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

enum TrainingLogStatus {
  PLANNED
  COMPLETED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

model LoggedExercise {
  id                     String      @id @default(cuid())
  trainingLog            TrainingLog @relation(fields: [trainingLogId], references: [id])
  trainingLogId          String
  exercise               Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId             String
  notes                  String?
  sets                   LoggedSet[]
  isSupersetWithPrevious Boolean?
}

model LoggedSet {
  id               String  @id @default(cuid())
  loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Float?
  rpe              Int? // Rate of Perceived Exertion
  isCompleted      Boolean @default(false)
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String         @unique
  category    String // e.g., "Продукты", "Спортивное питание"
  image       String?
  imageHint   String?
  calories    Float // per 100g
  protein     Float // per 100g
  fat         Float // per 100g
  carbs       Float // per 100g
  description String?
  createdAt   DateTime       @default(now())
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       MealType
  createdAt  DateTime @default(now())
}

enum MealType {
  Breakfast
  Lunch
  Dinner
  Snack
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int // estimated lifespan in months
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model CoachProfile {
  id             String  @id @default(cuid())
  user           User    @relation(fields: [userId], references: [id])
  userId         String  @unique
  specialization String
  description    String
  experience     String
  tags           String[]
  rating         Float   @default(0)
  price          Decimal @default(0)
}

model Poll {
  id        String       @id @default(cuid())
  title     String
  question  String
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  options   PollOption[]
  votes     PollVote[]
  author    User?        @relation("UserPolls", fields: [authorId], references: [id], onDelete: SetNull)
  authorId  String?
}

model PollOption {
  id     String     @id @default(cuid())
  text   String
  poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String
  votes  PollVote[]
}

model PollVote {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  poll         Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)
  pollOptionId String
  createdAt    DateTime   @default(now())

  @@unique([userId, pollId])
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model Report {
  id             String       @id @default(cuid())
  reporter       User         @relation("ReporterOfReport", fields: [reporterId], references: [id])
  reporterId     String
  reportedUser   User         @relation("ReportedInReport", fields: [reportedUserId], references: [id])
  reportedUserId String
  reason         String
  context        String
  status         ReportStatus @default(PENDING)
  resolver       User?        @relation("ResolverOfReport", fields: [resolverId], references: [id])
  resolverId     String?
  resolution     String?
  resolvedAt     DateTime?
  createdAt      DateTime     @default(now())
}

model Sport {
  id          String      @id @unique
  name        String
  icon        String
  category    String
  challenges  Challenge[]
  createdAt   DateTime    @default(now())
}

model Sponsor {
  id          String       @id @default(cuid())
  name        String       @unique
  logo        String?
  logoHint    String?
  description String
  profileUrl  String?
  interests   String[]
  teams       Team[]
  tournaments Tournament[]
  promotions  Promotion[]
}

model Promotion {
  id           String   @id @default(cuid())
  name         String
  description  String
  prize        String
  cost         String
  organizer    User     @relation(fields: [organizerId], references: [id])
  organizerId  String
  sponsor      Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId    String?
  imageDataUri String
  imageHint    String
  endDate      DateTime
  createdAt    DateTime @default(now())
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int    @default(0)
  wins     Int    @default(0)
  losses   Int    @default(0)
  draws    Int    @default(0)
  points   Int    @default(0)
}

model TournamentMedia {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type         String // "IMAGE", "VIDEO", "AUDIO"
  src          String
  description  String?
  hint         String?
  createdAt    DateTime   @default(now())
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  status       TeamApplicationStatus @default(PENDING)
  message      String?
  createdAt    DateTime              @default(now())

  @@unique([teamId, userId, tournamentId])
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

model Exercise {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String
  category        String
  equipment       String
  image           String?
  imageHint       String?
  videoUrl        String?
  techniqueTips   Json
  commonMistakes  Json
  alternatives    Json
  loggedExercises LoggedExercise[]
}

model TrainingProgram {
  id                String             @id
  name              String
  description       String
  goal              String
  daysPerWeek       Int
  splitType         String
  author            String
  coverImage        String
  coverImageHint    String
  isAiGenerated     Boolean            @default(false)
  weeklySplit       WorkoutDay[]
  trainingProposals TrainingProposal[]
}

model WorkoutDay {
  id                String            @id @default(cuid())
  trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id])
  trainingProgramId String
  day               Int
  title             String
  exercises         WorkoutExercise[]
}

model WorkoutExercise {
  id                     String  @id @default(cuid())
  workoutDay             WorkoutDay @relation(fields: [workoutDayId], references: [id])
  workoutDayId           String
  name                   String
  sets                   String
  reps                   String
  plannedWeight          String?
  isSupersetWithPrevious Boolean?
  technique              String?
}
