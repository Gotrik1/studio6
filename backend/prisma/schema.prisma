// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                @id @default(uuid())
  name                    String
  email                   String                @unique
  role                    String
  status                  String                @default("Активен")
  xp                      Int                   @default(0)
  avatar                  String?
  bannerImage             String?
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  teamsAsCaptain          Team[]                @relation("CaptainToTeam")
  teamsAsCreator          Team[]                @relation("CreatorToTeam")
  teamsAsMember           Team[]                @relation("TeamMembers")
  organizedTournaments    Tournament[]
  createdPlaygrounds      Playground[]
  createdChallenges       Challenge[]           @relation("ChallengeCreator")
  acceptedChallenges      Challenge[]           @relation("ChallengeOpponent")
  sentFriendRequests      FriendRequest[]       @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]       @relation("ReceivedFriendRequests")
  friends                 User[]                @relation("Friends")
  friendsOf               User[]                @relation("Friends")
  notifications           Notification[]
  activities              Activity[]
  coachProfile            CoachProfile?
  gallery                 GalleryItem[]
  careerHistory           CareerHistoryItem[]
  organizedPromotions     Promotion[]
  messages                Message[]

  @@map("users")
}

model Team {
  id                 String       @id @default(uuid())
  slug               String       @unique
  name               String
  game               String
  motto              String?
  logo               String?
  dataAiHint         String?
  description        String?
  homePlaygroundId   String?
  wins               Int          @default(0)
  losses             Int          @default(0)
  draws              Int          @default(0)
  rank               Int          @default(999)
  seekingSponsorship Boolean      @default(false)
  captain            User         @relation("CaptainToTeam", fields: [captainId], references: [id])
  captainId          String
  creator            User         @relation("CreatorToTeam", fields: [creatorId], references: [id])
  creatorId          String
  members            User[]       @relation("TeamMembers")
  tournaments        Tournament[]
  matchesAsTeam1     Match[]      @relation("Team1Matches")
  matchesAsTeam2     Match[]      @relation("Team2Matches")
  sponsors           Sponsor[]
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  @@map("teams")
}

model Tournament {
  id                      String       @id @default(uuid())
  slug                    String       @unique
  name                    String
  description             String?
  game                    String
  format                  String
  type                    String
  category                String
  location                String
  participantCount        Int
  prizePool               String?
  rules                   String?
  status                  String       @default("REGISTRATION")
  registrationStartDate   DateTime
  registrationEndDate     DateTime
  tournamentStartDate     DateTime
  bannerImage             String?
  bannerImageHint         String?
  organizer               User         @relation(fields: [organizerId], references: [id])
  organizerId             String
  teams                   Team[]
  matches                 Match[]
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt

  @@map("tournaments")
}

model Match {
  id           String      @id @default(uuid())
  team1        Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id      String
  team2        Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id      String
  team1Score   Int?
  team2Score   Int?
  status       MatchStatus @default(PLANNED)
  scheduledAt  DateTime
  finishedAt   DateTime?
  location     String?
  refereeName  String?
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  activities   Activity[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("matches")
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Playground {
  id             String   @id @default(uuid())
  name           String
  address        String
  type           String
  surface        String
  features       String[]
  rating         Float
  checkIns       Int
  coverImage     String?
  coverImageHint String?
  status         String   @default("PENDING_MODERATION") // PENDING_MODERATION | APPROVED
  creator        User     @relation(fields: [creatorId], references: [id])
  creatorId      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Challenge {
  id          String           @id @default(uuid())
  title       String
  description String
  discipline  String
  wager       Int
  status      ChallengeStatus
  result      String?
  creator     User             @relation("ChallengeCreator", fields: [creatorId], references: [id])
  creatorId   String
  opponent    User?            @relation("ChallengeOpponent", fields: [opponentId], references: [id])
  opponentId  String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model FriendRequest {
  id        String   @id @default(uuid())
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fromId, toId])
}

model Notification {
  id        String   @id @default(uuid())
  type      String
  message   String
  href      String?
  isRead    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Activity {
  id        String       @id @default(uuid())
  type      ActivityType
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  matchId   String?      @map("match_id")
  match     Match?       @relation(fields: [matchId], references: [id])
  timestamp DateTime     @default(now())
  metadata  Json
}

enum ActivityType {
  MATCH_PLAYED
  TOURNAMENT_REGISTERED
  TEAM_JOINED
}

model CoachProfile {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  specialization String
  description    String
  tags           String[]
  rating         Float
  price          String
}

model GalleryItem {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  src          String
  alt          String
  dataAiHint   String
  createdAt    DateTime @default(now())
}

model CareerHistoryItem {
    id          String @id @default(uuid())
    user        User   @relation(fields: [userId], references: [id])
    userId      String
    teamName    String
    period      String
    role        String
    review      String
    createdAt   DateTime @default(now())
}

model Sponsor {
  id           String   @id @default(uuid())
  name         String   @unique
  logo         String?
  logoHint     String?
  description  String
  profileUrl   String
  interests    String[]
  teams        Team[]
  promotions   Promotion[]
}

model StoreItem {
    id          String @id @default(uuid())
    name        String @unique
    description String
    price       Float
    image       String?
    imageHint   String?
    category    String
    isRealMoney Boolean @default(false)
}

model Promotion {
    id              String @id @default(uuid())
    name            String
    description     String
    prize           String
    cost            String
    imageDataUri    String
    imageHint       String
    organizer       User   @relation(fields: [organizerId], references: [id])
    organizerId     String
    sponsor         Sponsor? @relation(fields: [sponsorId], references: [id])
    sponsorId       String?
    endDate         DateTime
    createdAt       DateTime @default(now())
}

model Message {
    id          String  @id @default(uuid())
    text        String
    chatId      String  // Can be a user ID for DMs or a team ID for team chats
    author      User    @relation(fields: [authorId], references: [id])
    authorId    String
    createdAt   DateTime @default(now())
}

model Exercise {
    id                  String   @id @default(uuid())
    name                String   @unique
    description         String
    category            String
    equipment           String
    image               String?
    imageHint           String?
    techniqueTips       String[]
    commonMistakes      String[]
    alternatives        String[]
    createdAt           DateTime @default(now())
}
