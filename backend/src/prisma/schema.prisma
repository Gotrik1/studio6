// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                    @id @default(cuid())
  email                   String                    @unique
  name                    String
  passwordHash            String
  role                    String
  avatar                  String?
  status                  String                    @default("Активен")
  xp                      Int                       @default(0)
  dateOfBirth             DateTime?
  location                String?
  mainSport               String?
  preferredSports         String[]                  @default([])
  telegram                String?
  discord                 String?
  isVerified              Boolean                   @default(false)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  teamsAsCaptain          Team[]                    @relation("CaptainToTeams")
  teamsAsMember           Team[]                    @relation("TeamMembers")
  createdTeams            Team[]                    @relation("CreatorToTeams")
  organizedTournaments    Tournament[]
  createdPlaygrounds      Playground[]
  reviews                 PlaygroundReview[]
  friends                 User[]                    @relation("Friendships")
  friendOf                User[]                    @relation("Friendships")
  sentFriendRequests      FriendRequest[]           @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]           @relation("ReceivedFriendRequests")
  sentChallenges          Challenge[]               @relation("ChallengeCreator")
  receivedChallenges      Challenge[]               @relation("ChallengeOpponent")
  chatParticipants        Chat[]
  messages                Message[]
  notifications           Notification[]
  organizedPromotions     Promotion[]
  judgedMatches           Match[]                   @relation("JudgedMatches")
  reportsMade             Report[]                  @relation("Reporter")
  reportsReceived         Report[]                  @relation("ReportedUser")
  reportsResolved         Report[]                  @relation("Resolver")
  unlockedAchievements    UserAchievement[]
  coachedBy               User?                     @relation("CoachToPlayer", fields: [coachId], references: [id])
  coachId                 String?
  coaching                User[]                    @relation("CoachToPlayer")
  careerHistory           CareerHistoryItem[]
  inventory               InventoryItem[]
  trainingLogs            TrainingLog[]
  foodLogEntries          FoodLogEntry[]
  measurements            Measurement[]
  sentTrainingProposals   TrainingProposal[]        @relation("SentTrainingProposals")
  receivedTrainingProposals TrainingProposal[]      @relation("ReceivedTrainingProposals")
  pollVotes               PollVote[]
  createdPolls            Poll[]
  tournamentAnnouncements TournamentAnnouncement[]
  activities              Activity[]
  teamApplications        TeamApplication[]
}

model CareerHistoryItem {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  teamName  String
  period    String
  role      String
  review    String
  createdAt DateTime @default(now())
}

model Team {
  id                 String              @id @default(cuid())
  name               String              @unique
  motto              String?
  logo               String?
  dataAiHint         String?
  game               String
  slug               String              @unique
  creator            User                @relation("CreatorToTeams", fields: [creatorId], references: [id])
  creatorId          String
  captain            User                @relation("CaptainToTeams", fields: [captainId], references: [id])
  captainId          String
  members            User[]              @relation("TeamMembers")
  tournaments        Tournament[]
  wins               Int                 @default(0)
  losses             Int                 @default(0)
  draws              Int                 @default(0)
  rank               Int                 @default(99)
  matchesAsTeam1     Match[]             @relation("Team1Matches")
  matchesAsTeam2     Match[]             @relation("Team2Matches")
  homePlaygroundId   String?
  homePlayground     Playground?         @relation(fields: [homePlaygroundId], references: [id])
  seekingSponsorship Boolean             @default(false)
  sponsors           Sponsor[]
  events             MatchEvent[]
  chat               Chat?
  practices          TeamPractice[]
  applications       TeamApplication[]
  leagueTeams        LeagueTeam[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model TeamPractice {
  id           String     @id @default(cuid())
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  title        String
  description  String?
  date         DateTime
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  createdAt    DateTime   @default(now())
}

model Tournament {
  id                    String                   @id @default(cuid())
  name                  String
  slug                  String                   @unique
  game                  String
  description           String?
  status                String
  type                  String
  format                String
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  tournamentStartDate   DateTime
  prizePool             String?
  rules                 String?
  bannerImage           String?
  bannerImageHint       String?
  organizer             User                     @relation(fields: [organizerId], references: [id])
  organizerId           String
  teams                 Team[]
  matches               Match[]
  judges                User[]                   @relation("JudgedMatches")
  sponsors              Sponsor[]
  medicalPartners       MedicalPartner[]
  announcements         TournamentAnnouncement[]
  applications          TeamApplication[]
  media                 TournamentMedia[]
  league                League?                  @relation(fields: [leagueId], references: [id])
  leagueId              String?
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
}

model TournamentMedia {
  id          String     @id @default(cuid())
  tournament  Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  type        String // IMAGE, VIDEO, AUDIO
  src         String
  description String?
  hint        String?
  createdAt   DateTime   @default(now())
}

model Match {
  id              String       @id @default(cuid())
  team1           Team         @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id         String
  team2           Team         @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id         String
  team1Score      Int?
  team2Score      Int?
  status          MatchStatus
  scheduledAt     DateTime
  finishedAt      DateTime?
  tournament      Tournament?  @relation(fields: [tournamentId], references: [id])
  tournamentId    String?
  playgroundId    String?
  playground      Playground?  @relation(fields: [playgroundId], references: [id])
  location        String?
  refereeName     String?
  disputeReason   String?
  disputeOpenedAt DateTime?
  resolution      String?
  league          League?      @relation(fields: [leagueId], references: [id])
  leagueId        String?
  events          MatchEvent[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model MatchEvent {
  id        String         @id @default(cuid())
  match     Match          @relation(fields: [matchId], references: [id])
  matchId   String
  timestamp DateTime
  type      MatchEventType
  player    User?          @relation(fields: [playerId], references: [id])
  playerId  String?
  team      Team?          @relation(fields: [teamId], references: [id])
  teamId    String?
  metadata  Json?
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  KILL
  DEATH
  ASSIST_ESPORTS
  BOMB_PLANTED
  BOMB_DEFUSED
  ROUND_WIN
  ROUND_LOSS
  OTHER
}


enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model FriendRequest {
  id        String               @id @default(cuid())
  from      User                 @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    String
  to        User                 @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      String
  status    FriendRequestStatus  @default(PENDING)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@unique([fromId, toId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Chat {
  id           String    @id @default(cuid())
  name         String?
  participants User[]
  messages     Message[]
  type         ChatType  @default(PRIVATE)
  team         Team?     @relation(fields: [teamId], references: [id])
  teamId       String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum ChatType {
  PRIVATE
  GROUP
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String   @map("text")
  createdAt DateTime @default(now())

  @@index([chatId])
}

model Notification {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  type      NotificationType
  message   String
  isRead    Boolean          @default(false)
  href      String?
  createdAt DateTime         @default(now())
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH_RESULT
  ANNOUNCEMENT
  TEAM_INVITE
  OTHER
}

model Promotion {
  id            String    @id @default(cuid())
  name          String
  description   String
  prize         String
  cost          String // Can be 'Free' or a PD value
  imageDataUri  String
  imageHint     String
  organizer     User      @relation(fields: [organizerId], references: [id])
  organizerId   String
  sponsor       Sponsor?  @relation(fields: [sponsorId], references: [id])
  sponsorId     String?
  endDate       DateTime
  createdAt     DateTime  @default(now())
}

model Sponsor {
  id          String       @id @default(cuid())
  name        String       @unique
  logo        String?
  logoHint    String?
  description String
  profileUrl  String
  interests   String[]     @default([])
  promotions  Promotion[]
  teams       Team[]
  tournaments Tournament[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}


model Playground {
  id               String               @id @default(cuid())
  name             String
  address          String
  type             String
  coverImage       String?
  coverImageHint   String?
  surface          String
  features         String[]             @default([])
  rating           Float
  checkIns         Int
  status           PlaygroundStatus
  creator          User                 @relation(fields: [creatorId], references: [id])
  creatorId        String
  reviews          PlaygroundReview[]
  matches          Match[]
  reports          PlaygroundReport[]
  practices        TeamPractice[]
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}

enum PlaygroundStatus {
  APPROVED
  PENDING_MODERATION
}

model PlaygroundReview {
  id           String     @id @default(cuid())
  playground   Playground @relation(fields: [playgroundId], references: [id])
  playgroundId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  rating       Int
  comment      String
  createdAt    DateTime   @default(now())
}

model PlaygroundReport {
  id           String       @id @default(cuid())
  playground   Playground   @relation(fields: [playgroundId], references: [id])
  playgroundId String
  reporter     User         @relation(fields: [reporterId], references: [id])
  reporterId   String
  category     String
  comment      String
  severity     String // low, medium, high
  summary      String
  status       ReportStatus
  createdAt    DateTime     @default(now())
}

model Report {
  id               String       @id @default(cuid())
  reporter         User         @relation("Reporter", fields: [reporterId], references: [id])
  reporterId       String
  reportedUser     User         @relation("ReportedUser", fields: [reportedUserId], references: [id])
  reportedUserId   String
  category         String
  description      String?
  status           ReportStatus @default(PENDING)
  resolver         User?        @relation("Resolver", fields: [resolverId], references: [id])
  resolverId       String?
  resolution       String?
  createdAt        DateTime     @default(now())
  resolvedAt       DateTime?
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}

model TeamApplication {
  id           String                @id @default(cuid())
  team         Team                  @relation(fields: [teamId], references: [id])
  teamId       String
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  tournament   Tournament?           @relation(fields: [tournamentId], references: [id])
  tournamentId String?
  status       TeamApplicationStatus @default(PENDING)
  message      String?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

enum TeamApplicationStatus {
  PENDING
  APPROVED
  DECLINED
}

model Challenge {
  id           String            @id @default(cuid())
  title        String
  description  String
  creator      User              @relation("ChallengeCreator", fields: [creatorId], references: [id])
  creatorId    String
  opponent     User?             @relation("ChallengeOpponent", fields: [opponentId], references: [id])
  opponentId   String?
  discipline   Sport             @relation(fields: [disciplineId], references: [id])
  disciplineId String
  wager        Int
  status       ChallengeStatus
  result       String?
  createdAt    DateTime          @default(now())
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Sport {
  id          String      @id
  name        String
  icon        String
  category    String
  challenges  Challenge[]
}

model CoachProfile {
  id             String    @id @default(cuid())
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String    @unique
  specialization String
  description    String
  tags           String[]
  experience     String
  rating         Float
  price          Decimal
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model MedicalPartner {
  id             String       @id @default(cuid())
  name           String
  specialization String
  contact        String
  avatar         String?
  avatarHint     String?
  tournaments    Tournament[]
}


model LfgLobby {
  id            String       @id @default(cuid())
  creator       User         @relation(fields: [creatorId], references: [id])
  creatorId     String
  type          LfgLobbyType
  sport         String
  location      String
  playgroundId  String?
  startTime     DateTime
  endTime       DateTime
  playersNeeded Int
  players       User[]
  comment       String
}

enum LfgLobbyType {
  GAME
  TRAINING
}

// Full Training System Schema
model TrainingLog {
  id         String            @id @default(cuid())
  user       User              @relation(fields: [userId], references: [id])
  userId     String
  date       DateTime
  workoutName String?
  status     TrainingLogStatus @default(PLANNED)
  mood       Mood?
  notes      String?
  coachNotes String?
  exercises  LoggedExercise[]
}

enum TrainingLogStatus {
  COMPLETED
  PLANNED
  SKIPPED
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
}

model LoggedExercise {
  id                      String          @id @default(cuid())
  trainingLog             TrainingLog     @relation(fields: [trainingLogId], references: [id])
  trainingLogId           String
  exercise                Exercise        @relation(fields: [exerciseId], references: [id])
  exerciseId              String
  sets                    LoggedSet[]
  notes                   String?
  isSupersetWithPrevious  Boolean?        @default(false)
}

model LoggedSet {
  id               String          @id @default(cuid())
  loggedExercise   LoggedExercise  @relation(fields: [loggedExerciseId], references: [id])
  loggedExerciseId String
  plannedReps      String?
  plannedWeight    String?
  loggedReps       Int?
  loggedWeight     Int?
  rpe              Int? // Rate of Perceived Exertion
  isCompleted      Boolean         @default(false)
}

model TrainingProgram {
  id               String         @id
  name             String
  description      String
  goal             String
  daysPerWeek      Int
  splitType        String
  author           String
  coverImage       String
  coverImageHint   String
  isAiGenerated    Boolean        @default(false)
  weeklySplit      WorkoutDay[]
  trainingProposals TrainingProposal[]
}

model WorkoutDay {
  id         String            @id @default(cuid())
  program    TrainingProgram   @relation(fields: [programId], references: [id])
  programId  String
  day        Int
  title      String
  exercises  WorkoutExercise[]
}

model WorkoutExercise {
  id                     String      @id @default(cuid())
  day                    WorkoutDay  @relation(fields: [dayId], references: [id])
  dayId                  String
  name                   String
  sets                   String
  reps                   String
  plannedWeight          String?
  isSupersetWithPrevious Boolean?
  technique              String?
}

model Exercise {
  id               String           @id @default(cuid())
  name             String           @unique
  description      String
  category         String
  equipment        String
  image            String?
  imageHint        String?
  videoUrl         String?
  techniqueTips    Json
  commonMistakes   Json
  alternatives     Json
  loggedExercises  LoggedExercise[]
}

model InventoryItem {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  name           String
  category       String
  type           String
  purchaseDate   DateTime
  lifespanMonths Int
  image          String?
  imageHint      String?
  createdAt      DateTime @default(now())
}

model FoodItem {
  id          String         @id @default(cuid())
  name        String         @unique
  category    String // Продукты, Спортивное питание
  image       String?
  imageHint   String?
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
  description String?
  logEntries  FoodLogEntry[]
}

model FoodLogEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
  grams      Int
  meal       String // Завтрак, Обед, Ужин, Перекус
  createdAt  DateTime @default(now())
}

model Measurement {
  id      String    @id @default(cuid())
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime
  weight  Float
  bodyFat Float?
  chest   Float?
  waist   Float?
  hips    Float?
  biceps  Float?
  thigh   Float?
}

model TrainingProposal {
  id        String           @id @default(cuid())
  from      User             @relation("SentTrainingProposals", fields: [fromId], references: [id])
  fromId    String
  to        User             @relation("ReceivedTrainingProposals", fields: [toId], references: [id])
  toId      String
  sport     String
  date      DateTime
  program   TrainingProgram? @relation(fields: [programId], references: [id])
  programId String?
  comment   String?
  status    TrainingProposalStatus @default(PENDING)
  createdAt DateTime         @default(now())
}

enum TrainingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Quest {
  id          String    @id @default(cuid())
  type        QuestType
  title       String
  description String
  reward      Int
  goal        Int
  href        String
  createdAt   DateTime  @default(now())
}

enum QuestType {
  DAILY
  WEEKLY
  SPECIAL
}

model StoreItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String?
  imageHint   String?
  category    String
  isRealMoney Boolean @default(false)
}

model Poll {
  id        String      @id
  title     String
  question  String
  options   PollOption[]
  author    User?       @relation(fields: [authorId], references: [id])
  authorId  String?
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  votes     PollVote[]
}

model PollOption {
  id    String     @id
  poll  Poll       @relation(fields: [pollId], references: [id])
  pollId String
  text  String
  votes PollVote[]
}

model PollVote {
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  poll       Poll       @relation(fields: [pollId], references: [id])
  pollId     String
  pollOption PollOption @relation(fields: [pollOptionId], references: [id])
  pollOptionId String
  createdAt  DateTime   @default(now())

  @@id([userId, pollId])
}

model FaqItem {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model TournamentAnnouncement {
  id           String     @id @default(cuid())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  sender       User       @relation(fields: [senderId], references: [id])
  senderId     String
  subject      String
  message      String
  sentTo       Int
  createdAt    DateTime   @default(now())
}

model Activity {
  id           String      @id @default(cuid())
  type         ActivityType
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  playground   Playground? @relation(fields: [playgroundId], references: [id])
  playgroundId String?
  metadata     Json
  createdAt    DateTime    @default(now())
}

enum ActivityType {
  STATUS_POSTED
  PLAYGROUND_CHECK_IN
  MATCH_PLAYED
  TEAM_JOINED
  TOURNAMENT_REGISTERED
  ACHIEVEMENT_UNLOCKED
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  league    League   @relation(fields: [leagueId], references: [id])
  leagueId  String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  played    Int      @default(0)
  wins      Int      @default(0)
  losses    Int      @default(0)
  draws     Int      @default(0)
  points    Int      @default(0)
  createdAt DateTime @default(now())

  @@id([leagueId, teamId])
}

model Achievement {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String
  users       UserAchievement[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserAchievement {
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@id([userId, achievementId])
}

