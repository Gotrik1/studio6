// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  name                    String
  passwordHash            String
  role                    String                 @default("Игрок")
  avatar                  String?
  status                  String                 @default("Активен") // Активен, Забанен
  xp                      Int                    @default(0)
  location                String?
  mainSport               String?
  dateOfBirth             DateTime?
  preferredSports         String[]
  telegram                String?
  discord                 String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  teamsAsCreator          Team[]                 @relation("CreatedTeams")
  teamsAsCaptain          Team[]                 @relation("CaptainOfTeams")
  teamsAsMember           Team[]                 @relation("TeamMembers")
  organizedTournaments    Tournament[]
  organizedPromotions     Promotion[]
  gallery                 GalleryItem[]
  careerHistory           CareerHistoryItem[]
  activities              Activity[]
  friends                 User[]                 @relation("Friends")
  friendOf                User[]                 @relation("Friends")
  sentFriendRequests      FriendRequest[]        @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]        @relation("ReceivedFriendRequests")
  messages                Message[]
  createdLfgLobbies       LfgLobby[]             @relation("CreatedLfgLobbies")
  joinedLfgLobbies        LfgLobby[]             @relation("JoinedLfgLobbies")
  createdChallenges       Challenge[]            @relation("CreatedChallenges")
  acceptedChallenges      Challenge[]            @relation("AcceptedChallenges")
  createdPlaygrounds      Playground[]
  coachProfile            CoachProfile?
  coaching                User[]                 @relation("CoachStudents")
  coach                   User?                  @relation("CoachStudents", fields: [coachId], references: [id])
  coachId                 String?
  judgedMatches           Match[]                @relation("JudgedMatches")
  measurements            Measurement[]
  foodLog                 FoodLogEntry[]
  sentProposals           TrainingProposal[]     @relation("ProposalsSent")
  receivedProposals       TrainingProposal[]     @relation("ProposalsReceived")
  trainingLogs            TrainingLog[]
}

model Activity {
  id        String   @id @default(cuid())
  type      String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  metadata  Json
}

model GalleryItem {
  id         String   @id @default(cuid())
  src        String
  alt        String
  dataAiHint String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())
}

model CareerHistoryItem {
  id       String @id @default(cuid())
  teamName String
  period   String
  role     String
  review   String
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  createdAt DateTime @default(now())
}

model FriendRequest {
  id     String   @id @default(cuid())
  from   User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId String
  to     User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId   String
  status String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())

  @@unique([fromId, toId])
}

model Team {
  id                 String   @id @default(cuid())
  name               String
  slug               String   @unique
  motto              String?
  logo               String?
  dataAiHint         String?
  game               String
  rank               Int      @default(0)
  wins               Int      @default(0)
  losses             Int      @default(0)
  draws              Int      @default(0)
  seekingSponsorship Boolean  @default(false)
  creator            User     @relation("CreatedTeams", fields: [creatorId], references: [id])
  creatorId          String
  captain            User     @relation("CaptainOfTeams", fields: [captainId], references: [id])
  captainId          String
  members            User[]   @relation("TeamMembers")
  tournaments        Tournament[]
  homePlaygroundId   String?
  matchesAsTeam1     Match[]  @relation("Team1Matches")
  matchesAsTeam2     Match[]  @relation("Team2Matches")
  sponsors           Sponsor[]
  leagues            LeagueTeam[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Match {
  id            String      @id @default(cuid())
  team1         Team        @relation("Team1Matches", fields: [team1Id], references: [id])
  team1Id       String
  team2         Team        @relation("Team2Matches", fields: [team2Id], references: [id])
  team2Id       String
  team1Score    Int?
  team2Score    Int?
  status        MatchStatus @default(PLANNED)
  scheduledAt   DateTime
  finishedAt    DateTime?
  location      String?
  tournament    Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId  String?
  league        League?     @relation(fields: [leagueId], references: [id])
  leagueId      String?
  referee       User?       @relation("JudgedMatches", fields: [refereeId], references: [id])
  refereeId     String?
  refereeName   String?
}

enum MatchStatus {
  PLANNED
  LIVE
  FINISHED
  DISPUTED
  CANCELLED
}

model Tournament {
  id                    String    @id @default(cuid())
  name                  String
  slug                  String    @unique
  game                  String
  format                String
  prizePool             String?
  tournamentStartDate   DateTime
  description           String?
  rules                 String?
  type                  String
  category              String
  location              String
  participantCount      Int
  registrationStartDate DateTime
  registrationEndDate   DateTime
  bannerImage           String?
  bannerImageHint       String?
  organizer             User      @relation(fields: [organizerId], references: [id])
  organizerId           String
  status                String // REGISTRATION, ONGOING, FINISHED
  teams                 Team[]
  matches               Match[]
}

model Challenge {
  id          String           @id @default(cuid())
  title       String
  description String
  discipline  String
  wager       Int
  creator     User             @relation("CreatedChallenges", fields: [creatorId], references: [id])
  creatorId   String
  opponent    User?            @relation("AcceptedChallenges", fields: [opponentId], references: [id])
  opponentId  String?
  status      ChallengeStatus
  result      String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

enum ChallengeStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Playground {
  id              String   @id @default(cuid())
  name            String
  address         String
  type            String
  coverImage      String?
  coverImageHint  String?
  surface         String
  features        String[]
  rating          Float
  checkIns        Int
  status          String   @default("PENDING_MODERATION") // PENDING_MODERATION, APPROVED, REJECTED
  creator         User     @relation(fields: [creatorId], references: [id])
  creatorId       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model CoachProfile {
    id             String   @id @default(cuid())
    user           User     @relation(fields: [userId], references: [id])
    userId         String   @unique
    specialization String
    description    String
    tags           String[]
    rating         Float
    price          Decimal
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
}

model Sponsor {
    id          String   @id @default(cuid())
    name        String   @unique
    logo        String?
    logoHint    String?
    description String
    profileUrl  String
    interests   String[]
    teams       Team[]
    promotions  Promotion[]
}

model Message {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  chatId    String // Can be a user ID for DMs or a team ID for team chats
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  href      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model StoreItem {
    id          String  @id @default(cuid())
    name        String
    description String
    price       Float
    image       String?
    imageHint   String?
    category    String
    isRealMoney Boolean @default(false)
}

model Promotion {
    id           String   @id @default(cuid())
    name         String
    description  String
    prize        String
    cost         String
    imageDataUri String
    imageHint    String
    endDate      DateTime
    organizer    User     @relation(fields: [organizerId], references: [id])
    organizerId  String
    sponsor      Sponsor? @relation(fields: [sponsorId], references: [id])
    sponsorId    String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model Sport {
  id       String @id @unique
  name     String
  icon     String
  category String
}

model League {
  id          String       @id @default(cuid())
  name        String
  description String
  game        String
  image       String?
  imageHint   String?
  teams       LeagueTeam[]
  matches     Match[]
}

model LeagueTeam {
  id       String @id @default(cuid())
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  played   Int    @default(0)
  wins     Int    @default(0)
  losses   Int    @default(0)
  draws    Int    @default(0)
  points   Int    @default(0)

  @@unique([leagueId, teamId])
}

enum LfgLobbyType {
  GAME
  TRAINING
}

model LfgLobby {
    id            String       @id @default(cuid())
    type          LfgLobbyType
    sport         String
    location      String
    playgroundId  String?
    startTime     DateTime
    endTime       DateTime
    playersNeeded Int
    comment       String
    creator       User         @relation("CreatedLfgLobbies", fields: [creatorId], references: [id])
    creatorId     String
    players       User[]       @relation("JoinedLfgLobbies")
    createdAt     DateTime     @default(now())
}

model Exercise {
    id             String           @id @default(cuid())
    name           String           @unique
    description    String
    category       String
    equipment      String
    image          String?
    imageHint      String?
    techniqueTips  String[]
    commonMistakes String[]
    alternatives   String[]
    loggedExercises LoggedExercise[]
}

model TrainingProgram {
    id             String           @id @default(cuid())
    name           String
    description    String
    goal           String
    daysPerWeek    Int
    splitType      String
    author         String
    coverImage     String
    coverImageHint String
    isAiGenerated  Boolean          @default(false)
    weeklySplit    WorkoutDay[]
}

model WorkoutDay {
    id                String            @id @default(cuid())
    day               Int
    title             String
    trainingProgram   TrainingProgram   @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
    trainingProgramId String
    exercises         ExerciseDetail[]
}

model ExerciseDetail {
    id                      String      @id @default(cuid())
    name                    String
    sets                    String
    reps                    String
    plannedWeight           String?
    isSupersetWithPrevious  Boolean?
    technique               String?
    workoutDay              WorkoutDay  @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
    workoutDayId            String
}

model TrainingLog {
    id        String           @id @default(cuid())
    date      DateTime
    user      User             @relation(fields: [userId], references: [id])
    userId    String
    workoutName String
    status    String // completed, planned, skipped
    mood      String? // great, good, ok, bad
    notes     String?
    coachNotes String?
    exercises LoggedExercise[]
}

model LoggedExercise {
    id            String      @id @default(cuid())
    trainingLog   TrainingLog @relation(fields: [trainingLogId], references: [id], onDelete: Cascade)
    trainingLogId String
    exercise      Exercise    @relation(fields: [exerciseId], references: [id])
    exerciseId    String
    notes         String?
    sets          LoggedSet[]
}

model LoggedSet {
    id               String         @id @default(cuid())
    loggedExercise   LoggedExercise @relation(fields: [loggedExerciseId], references: [id], onDelete: Cascade)
    loggedExerciseId String
    plannedReps      String?
    plannedWeight    String?
    loggedReps       Int?
    loggedWeight     Int?
    rpe              Int?
    isCompleted      Boolean        @default(false)
}

model FaqItem {
    id        String   @id @default(cuid())
    question  String
    answer    String
    category  String
    createdAt DateTime @default(now())
}

model Measurement {
    id      String   @id @default(cuid())
    date    DateTime
    user    User     @relation(fields: [userId], references: [id])
    userId  String
    weight  Float
    bodyFat Float?
    chest   Float?
    waist   Float?
    hips    Float?
    biceps  Float?
    thigh   Float?
}

model FoodItem {
    id          String         @id @default(cuid())
    name        String
    category    String
    image       String?
    imageHint   String?
    calories    Float
    protein     Float
    fat         Float
    carbs       Float
    description String?
    logEntries  FoodLogEntry[]
}

model FoodLogEntry {
    id         String   @id @default(cuid())
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
    foodItemId String
    grams      Int
    meal       String
    createdAt  DateTime @default(now())
}

model TrainingProposal {
  id        String   @id @default(cuid())
  from      User     @relation("ProposalsSent", fields: [fromId], references: [id], onDelete: Cascade)
  fromId    String
  to        User     @relation("ProposalsReceived", fields: [toId], references: [id], onDelete: Cascade)
  toId      String
  sport     String
  date      DateTime
  comment   String?
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([fromId])
  @@index([toId])
}
