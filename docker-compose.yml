# This Docker Compose file sets up a complete development environment
# that mirrors the production architecture described in the documentation.
# It includes the frontend, backend, databases, and critical infrastructure
# like an API Gateway, Identity Provider, and Message Brokers.
#
# To run everything: docker compose up --build
#
# Key services and ports:
# - Frontend (Next.js): http://localhost:9002
# - Backend (NestJS): http://localhost:3001 (for direct access)
# - Kong API Gateway: http://localhost:8000 (main entry point)
# - Keycloak (IdP): http://localhost:8180
# - pgAdmin (DB UI): http://localhost:5050
# - RabbitMQ UI: http://localhost:15672
# - Grafana (Monitoring): http://localhost:3000

services:
  # ---------------------------------------------------
  # Application Databases & Tooling
  # ---------------------------------------------------
  db:
    image: postgres:15
    container_name: db
    restart: on-failure
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGPASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ./database_data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - prodvor-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    volumes:
      - ./database_data/pgadmin:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy
    networks:
      - prodvor-network

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ./database_data/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - prodvor-network

  # ---------------------------------------------------
  # Message Brokers (Kafka & RabbitMQ)
  # ---------------------------------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOO_4LW_COMMANDS_WHITELIST: "*"
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - prodvor-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      CLUSTER_ID: '9e6c7c82-1f7b-4f3e-8b2d-4f8d1b8d7e5a'
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_PROCESS_ROLES: broker,controller
    healthcheck:
        test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
        interval: 15s
        timeout: 10s
        retries: 10
    networks:
      - prodvor-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    hostname: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASSWORD: ${RABBITMQ_DEFAULT_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./database_data/rabbitmq:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - prodvor-network

  # ---------------------------------------------------
  # Identity & API Gateway (Keycloak & Kong)
  # ---------------------------------------------------
  keycloak-db:
    image: postgres:15
    container_name: keycloak-db
    restart: on-failure
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./database_data/keycloak:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - prodvor-network

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    command: start-dev
    depends_on:
      keycloak-db:
        condition: service_healthy
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak-db
      KC_DB_URL_PORT: 5432
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_PROXY: edge      
    ports:
      - "8180:8080"
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 20
    networks:
      - prodvor-network

  kong-db:
    image: postgres:15.1-alpine
    container_name: kong-db
    restart: on-failure
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: kong
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./database_data/kong:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong -d kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - prodvor-network

  kong-migrations:
    image: kong:3.0.1-alpine
    container_name: kong-migrations
    command: "kong migrations bootstrap"
    depends_on:
      kong-db:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD}
    restart: on-failure
    networks:
      - prodvor-network

  kong:
    image: kong:3.0.1-alpine
    container_name: kong
    restart: always
    depends_on:
      kong-migrations:
        condition: service_completed_successfully
      keycloak:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD}
      KONG_ADMIN_LISTEN: ${KONG_ADMIN_LISTEN}
      KONG_PROXY_LISTEN: ${KONG_PROXY_LISTEN}
      KONG_PLUGINS: bundled,oidc
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
    healthcheck:
        test: ["CMD-SHELL", "kong health"]
        interval: 10s
        timeout: 5s
        retries: 10
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
    networks:
      - prodvor-network

  kong-setup:
    image: kong/deck:latest
    container_name: kong-setup
    command: >
      deck sync -s /config/kong.yml --kong-addr http://kong:8001
    volumes:
      - ./config/kong:/config
    depends_on:
      kong:
        condition: service_healthy
    networks:
      - prodvor-network
    restart: on-failure

  # ---------------------------------------------------
  # Monitoring & Observability
  # ---------------------------------------------------
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./database_data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - prodvor-network

  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: always
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./config/loki/loki-config.yml:/etc/loki/local-config.yaml
    networks:
      - prodvor-network

  grafana:
    image: grafana/grafana-enterprise:latest
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./database_data/grafana:/var/lib/grafana
      - ./config/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./config/grafana/grafana.ini:/etc/grafana/grafana.ini
    depends_on:
      - prometheus
      - loki
    networks:
      - prodvor-network

  # ---------------------------------------------------
  # Application Services (Frontend & Backend)
  # ---------------------------------------------------
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    restart: on-failure
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    command: npm run start:dev
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3001 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"
    networks:
      - prodvor-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: on-failure
    ports:
      - "9002:9002"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    env_file:
      - ./.env
    depends_on:
      backend:
          condition: service_healthy
      kong-setup:
          condition: service_completed_successfully
    command: npm run dev
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"
    networks:
      - prodvor-network

networks:
  prodvor-network:
    driver: bridge

volumes:
  postgres_data:
  keycloak_db_data:
  kong_db_data:
  pgadmin_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
