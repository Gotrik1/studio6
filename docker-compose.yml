
version: '3.8'

# This Docker Compose file sets up a complete development environment
# that mirrors the production architecture described in the documentation.
# It includes the frontend, backend, databases, and critical infrastructure
# like an API Gateway, Identity Provider, and Message Broker.
#
# To run everything: docker-compose up --build
#
# Key services and ports:
# - Frontend (Next.js): http://localhost:9002
# - Backend (NestJS): http://localhost:3001 (for direct access)
# - Kong API Gateway: http://localhost:8000 (main entry point)
# - King GUI (Kong UI): http://localhost:8080
# - Keycloak (IdP): http://localhost:8180
# - pgAdmin (DB UI): http://localhost:5050

services:
  # ---------------------------------------------------
  # Application Database & Tooling
  # ---------------------------------------------------
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./database_data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - prodvor-network

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    volumes:
      - ./database_data/pgadmin:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy
    networks:
      - prodvor-network

  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ./database_data/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - prodvor-network

  # ---------------------------------------------------
  # Message Broker (Kafka)
  # ---------------------------------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - prodvor-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - prodvor-network

  # ---------------------------------------------------
  # Identity & API Gateway (Keycloak & Kong)
  # ---------------------------------------------------
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    command: start-dev
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    ports:
      - "8180:8080"
    restart: always
    networks:
      - prodvor-network

  kong-db:
    image: postgres:15.1-alpine
    restart: always
    environment:
      POSTGRES_USER: ${KONG_PG_USER}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD}
      POSTGRES_DB: ${KONG_PG_DATABASE}
    volumes:
      - ./database_data/kong:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KONG_PG_USER} -d ${KONG_PG_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - prodvor-network

  kong-migrations:
    image: kong:3.0.1-alpine
    command: "kong migrations bootstrap"
    depends_on:
      kong-db:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
    restart: on-failure
    networks:
      - prodvor-network

  kong:
    image: kong:3.0.1-alpine
    restart: always
    depends_on:
      kong-migrations:
        condition: service_completed_successfully
      keycloak:
        condition: service_started
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_ADMIN_LISTEN: ${KONG_ADMIN_LISTEN}
      KONG_PROXY_LISTEN: ${KONG_PROXY_LISTEN}
      KONG_PLUGINS: bundled,oidc
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
    ports:
      - "8000:8000" # Proxy
      - "8443:8443" # SSL Proxy
      - "8001:8001" # Admin API
    networks:
      - prodvor-network

  # The King GUI service requires a Dockerfile in the project root.
  # If you have one, you can uncomment this section.
  # king:
  #   build:
  #     context: .
  #   container_name: king
  #   restart: on-failure
  #   ports:
  #     - 8080:80

  # ---------------------------------------------------
  # Application Services (Frontend & Backend)
  # ---------------------------------------------------
  prisma-migrate:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: "npm run prisma:migrate"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./.env
    networks:
      - prodvor-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    volumes:
      - ./backend/src:/usr/src/app/src
      - ./backend/prisma:/usr/src/app/prisma
    env_file:
      - ./.env
    depends_on:
      prisma-migrate:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    command: npm run start:dev
    networks:
      - prodvor-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "9002:9002"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    depends_on:
      - backend
      - kong
    command: npm run dev
    networks:
      - prodvor-network

networks:
  prodvor-network:
    driver: bridge
